Welcome to JMH Tests Suites
##################################################################################################
############################       HotSpot C1/C2 JIT Test Suite       ############################
##################################################################################################
Launching hotspotvm_c1_c2_jit JMH Tests Suite ...
Create results/hotspotvm_c1_c2_jit folder
Running java  -jar benchmarks/target/benchmarks.jar .*ArrayCopyBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ArrayCopyBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 16384, stride = 256)

# Run progress: 0.00% complete, ETA 02:20:00
# Fork: 1 of 3
# Warmup Iteration   1: 2209.507 ns/op
# Warmup Iteration   2: 2259.305 ns/op
# Warmup Iteration   3: 2135.445 ns/op
# Warmup Iteration   4: 2076.493 ns/op
# Warmup Iteration   5: 2085.180 ns/op
Iteration   1: 2081.331 ns/op
Iteration   2: 2087.791 ns/op
Iteration   3: 2084.723 ns/op
Iteration   4: 2089.341 ns/op
Iteration   5: 2078.378 ns/op

# Run progress: 1.19% complete, ETA 02:18:42
# Fork: 2 of 3
# Warmup Iteration   1: 2123.023 ns/op
# Warmup Iteration   2: 2074.271 ns/op
# Warmup Iteration   3: 2088.821 ns/op
# Warmup Iteration   4: 2082.776 ns/op
# Warmup Iteration   5: 2089.645 ns/op
Iteration   1: 2079.971 ns/op
Iteration   2: 2089.317 ns/op
Iteration   3: 2077.861 ns/op
Iteration   4: 2091.054 ns/op
Iteration   5: 2078.289 ns/op

# Run progress: 2.38% complete, ETA 02:17:02
# Fork: 3 of 3
# Warmup Iteration   1: 2123.063 ns/op
# Warmup Iteration   2: 2076.506 ns/op
# Warmup Iteration   3: 2091.057 ns/op
# Warmup Iteration   4: 2077.661 ns/op
# Warmup Iteration   5: 2083.238 ns/op
Iteration   1: 2081.663 ns/op
Iteration   2: 2088.937 ns/op
Iteration   3: 2081.225 ns/op
Iteration   4: 2083.737 ns/op
Iteration   5: 2077.798 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  2083.428 ±(99.9%) 5.094 ns/op [Average]
  (min, avg, max) = (2077.798, 2083.428, 2091.054), stdev = 4.765
  CI (99.9%): [2078.334, 2088.522] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 16384, stride = 512)

# Run progress: 3.57% complete, ETA 02:15:21
# Fork: 1 of 3
# Warmup Iteration   1: 2153.769 ns/op
# Warmup Iteration   2: 2114.622 ns/op
# Warmup Iteration   3: 2093.274 ns/op
# Warmup Iteration   4: 2084.536 ns/op
# Warmup Iteration   5: 2096.209 ns/op
Iteration   1: 2083.577 ns/op
Iteration   2: 2096.956 ns/op
Iteration   3: 2085.911 ns/op
Iteration   4: 2092.276 ns/op
Iteration   5: 2082.440 ns/op

# Run progress: 4.76% complete, ETA 02:13:46
# Fork: 2 of 3
# Warmup Iteration   1: 2131.463 ns/op
# Warmup Iteration   2: 2079.282 ns/op
# Warmup Iteration   3: 2089.229 ns/op
# Warmup Iteration   4: 2085.779 ns/op
# Warmup Iteration   5: 2093.289 ns/op
Iteration   1: 2082.187 ns/op
Iteration   2: 2088.330 ns/op
Iteration   3: 2080.363 ns/op
Iteration   4: 2088.694 ns/op
Iteration   5: 2083.098 ns/op

# Run progress: 5.95% complete, ETA 02:12:04
# Fork: 3 of 3
# Warmup Iteration   1: 2133.556 ns/op
# Warmup Iteration   2: 2082.788 ns/op
# Warmup Iteration   3: 2097.212 ns/op
# Warmup Iteration   4: 2088.482 ns/op
# Warmup Iteration   5: 2096.557 ns/op
Iteration   1: 2092.432 ns/op
Iteration   2: 2093.528 ns/op
Iteration   3: 2089.869 ns/op
Iteration   4: 2093.184 ns/op
Iteration   5: 2085.062 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  2087.860 ±(99.9%) 5.413 ns/op [Average]
  (min, avg, max) = (2080.363, 2087.860, 2096.956), stdev = 5.064
  CI (99.9%): [2082.447, 2093.274] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 32768, stride = 256)

# Run progress: 7.14% complete, ETA 02:10:23
# Fork: 1 of 3
# Warmup Iteration   1: 4234.386 ns/op
# Warmup Iteration   2: 4601.621 ns/op
# Warmup Iteration   3: 4313.509 ns/op
# Warmup Iteration   4: 4125.264 ns/op
# Warmup Iteration   5: 4129.118 ns/op
Iteration   1: 4129.595 ns/op
Iteration   2: 4127.523 ns/op
Iteration   3: 4140.393 ns/op
Iteration   4: 4117.708 ns/op
Iteration   5: 4126.754 ns/op

# Run progress: 8.33% complete, ETA 02:08:42
# Fork: 2 of 3
# Warmup Iteration   1: 4200.736 ns/op
# Warmup Iteration   2: 4107.415 ns/op
# Warmup Iteration   3: 4112.845 ns/op
# Warmup Iteration   4: 4119.097 ns/op
# Warmup Iteration   5: 4115.720 ns/op
Iteration   1: 4118.247 ns/op
Iteration   2: 4120.407 ns/op
Iteration   3: 4121.988 ns/op
Iteration   4: 4110.442 ns/op
Iteration   5: 4111.021 ns/op

# Run progress: 9.52% complete, ETA 02:07:02
# Fork: 3 of 3
# Warmup Iteration   1: 4212.214 ns/op
# Warmup Iteration   2: 4117.982 ns/op
# Warmup Iteration   3: 4132.852 ns/op
# Warmup Iteration   4: 4130.222 ns/op
# Warmup Iteration   5: 4126.047 ns/op
Iteration   1: 4138.820 ns/op
Iteration   2: 4127.084 ns/op
Iteration   3: 4133.914 ns/op
Iteration   4: 4125.376 ns/op
Iteration   5: 4122.277 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  4124.770 ±(99.9%) 9.413 ns/op [Average]
  (min, avg, max) = (4110.442, 4124.770, 4140.393), stdev = 8.805
  CI (99.9%): [4115.357, 4134.183] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 32768, stride = 512)

# Run progress: 10.71% complete, ETA 02:05:21
# Fork: 1 of 3
# Warmup Iteration   1: 4188.187 ns/op
# Warmup Iteration   2: 4116.619 ns/op
# Warmup Iteration   3: 4126.660 ns/op
# Warmup Iteration   4: 4122.070 ns/op
# Warmup Iteration   5: 4123.266 ns/op
Iteration   1: 4125.858 ns/op
Iteration   2: 4118.092 ns/op
Iteration   3: 4175.036 ns/op
Iteration   4: 4166.112 ns/op
Iteration   5: 4126.048 ns/op

# Run progress: 11.90% complete, ETA 02:03:41
# Fork: 2 of 3
# Warmup Iteration   1: 4222.222 ns/op
# Warmup Iteration   2: 4120.137 ns/op
# Warmup Iteration   3: 4139.508 ns/op
# Warmup Iteration   4: 4134.293 ns/op
# Warmup Iteration   5: 4128.236 ns/op
Iteration   1: 4134.746 ns/op
Iteration   2: 4132.529 ns/op
Iteration   3: 4135.990 ns/op
Iteration   4: 4133.063 ns/op
Iteration   5: 4130.028 ns/op

# Run progress: 13.10% complete, ETA 02:02:00
# Fork: 3 of 3
# Warmup Iteration   1: 4207.519 ns/op
# Warmup Iteration   2: 4126.203 ns/op
# Warmup Iteration   3: 4131.721 ns/op
# Warmup Iteration   4: 4125.494 ns/op
# Warmup Iteration   5: 4123.172 ns/op
Iteration   1: 4137.427 ns/op
Iteration   2: 4141.228 ns/op
Iteration   3: 4130.730 ns/op
Iteration   4: 4122.347 ns/op
Iteration   5: 4134.174 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  4136.227 ±(99.9%) 16.306 ns/op [Average]
  (min, avg, max) = (4118.092, 4136.227, 4175.036), stdev = 15.253
  CI (99.9%): [4119.921, 4152.534] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 16384, stride = 256)

# Run progress: 14.29% complete, ETA 02:00:20
# Fork: 1 of 3
# Warmup Iteration   1: 406.333 ns/op
# Warmup Iteration   2: 391.866 ns/op
# Warmup Iteration   3: 388.217 ns/op
# Warmup Iteration   4: 385.373 ns/op
# Warmup Iteration   5: 382.431 ns/op
Iteration   1: 381.105 ns/op
Iteration   2: 379.254 ns/op
Iteration   3: 379.485 ns/op
Iteration   4: 377.589 ns/op
Iteration   5: 377.112 ns/op

# Run progress: 15.48% complete, ETA 01:58:39
# Fork: 2 of 3
# Warmup Iteration   1: 336.294 ns/op
# Warmup Iteration   2: 335.554 ns/op
# Warmup Iteration   3: 337.638 ns/op
# Warmup Iteration   4: 338.304 ns/op
# Warmup Iteration   5: 339.578 ns/op
Iteration   1: 339.558 ns/op
Iteration   2: 338.414 ns/op
Iteration   3: 339.237 ns/op
Iteration   4: 337.123 ns/op
Iteration   5: 338.934 ns/op

# Run progress: 16.67% complete, ETA 01:56:59
# Fork: 3 of 3
# Warmup Iteration   1: 389.430 ns/op
# Warmup Iteration   2: 382.250 ns/op
# Warmup Iteration   3: 379.723 ns/op
# Warmup Iteration   4: 378.776 ns/op
# Warmup Iteration   5: 378.213 ns/op
Iteration   1: 379.516 ns/op
Iteration   2: 377.941 ns/op
Iteration   3: 377.563 ns/op
Iteration   4: 376.280 ns/op
Iteration   5: 376.625 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  365.049 ±(99.9%) 20.703 ns/op [Average]
  (min, avg, max) = (337.123, 365.049, 381.105), stdev = 19.366
  CI (99.9%): [344.346, 385.752] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 16384, stride = 512)

# Run progress: 17.86% complete, ETA 01:55:18
# Fork: 1 of 3
# Warmup Iteration   1: 378.795 ns/op
# Warmup Iteration   2: 376.371 ns/op
# Warmup Iteration   3: 376.139 ns/op
# Warmup Iteration   4: 375.000 ns/op
# Warmup Iteration   5: 374.509 ns/op
Iteration   1: 374.741 ns/op
Iteration   2: 374.340 ns/op
Iteration   3: 374.071 ns/op
Iteration   4: 373.118 ns/op
Iteration   5: 373.260 ns/op

# Run progress: 19.05% complete, ETA 01:53:38
# Fork: 2 of 3
# Warmup Iteration   1: 339.325 ns/op
# Warmup Iteration   2: 340.708 ns/op
# Warmup Iteration   3: 343.339 ns/op
# Warmup Iteration   4: 343.800 ns/op
# Warmup Iteration   5: 343.868 ns/op
Iteration   1: 344.225 ns/op
Iteration   2: 343.906 ns/op
Iteration   3: 344.301 ns/op
Iteration   4: 343.281 ns/op
Iteration   5: 344.445 ns/op

# Run progress: 20.24% complete, ETA 01:51:57
# Fork: 3 of 3
# Warmup Iteration   1: 381.784 ns/op
# Warmup Iteration   2: 377.980 ns/op
# Warmup Iteration   3: 376.768 ns/op
# Warmup Iteration   4: 376.021 ns/op
# Warmup Iteration   5: 375.473 ns/op
Iteration   1: 375.365 ns/op
Iteration   2: 374.870 ns/op
Iteration   3: 374.526 ns/op
Iteration   4: 373.661 ns/op
Iteration   5: 373.482 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  364.106 ±(99.9%) 15.723 ns/op [Average]
  (min, avg, max) = (343.281, 364.106, 375.365), stdev = 14.707
  CI (99.9%): [348.383, 379.829] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 32768, stride = 256)

# Run progress: 21.43% complete, ETA 01:50:17
# Fork: 1 of 3
# Warmup Iteration   1: 1000.336 ns/op
# Warmup Iteration   2: 1007.868 ns/op
# Warmup Iteration   3: 1014.186 ns/op
# Warmup Iteration   4: 1014.952 ns/op
# Warmup Iteration   5: 1018.243 ns/op
Iteration   1: 1019.494 ns/op
Iteration   2: 1022.894 ns/op
Iteration   3: 1023.663 ns/op
Iteration   4: 1023.288 ns/op
Iteration   5: 1024.894 ns/op

# Run progress: 22.62% complete, ETA 01:48:36
# Fork: 2 of 3
# Warmup Iteration   1: 1177.086 ns/op
# Warmup Iteration   2: 1161.858 ns/op
# Warmup Iteration   3: 1159.591 ns/op
# Warmup Iteration   4: 1150.141 ns/op
# Warmup Iteration   5: 1151.672 ns/op
Iteration   1: 1147.341 ns/op
Iteration   2: 1145.660 ns/op
Iteration   3: 1143.790 ns/op
Iteration   4: 1144.112 ns/op
Iteration   5: 1144.061 ns/op

# Run progress: 23.81% complete, ETA 01:46:56
# Fork: 3 of 3
# Warmup Iteration   1: 1128.810 ns/op
# Warmup Iteration   2: 1125.851 ns/op
# Warmup Iteration   3: 1130.016 ns/op
# Warmup Iteration   4: 1128.981 ns/op
# Warmup Iteration   5: 1129.249 ns/op
Iteration   1: 1128.719 ns/op
Iteration   2: 1128.548 ns/op
Iteration   3: 1128.989 ns/op
Iteration   4: 1128.110 ns/op
Iteration   5: 1128.319 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  1098.792 ±(99.9%) 59.906 ns/op [Average]
  (min, avg, max) = (1019.494, 1098.792, 1147.341), stdev = 56.036
  CI (99.9%): [1038.886, 1158.698] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 32768, stride = 512)

# Run progress: 25.00% complete, ETA 01:45:16
# Fork: 1 of 3
# Warmup Iteration   1: 1013.043 ns/op
# Warmup Iteration   2: 1015.358 ns/op
# Warmup Iteration   3: 1020.974 ns/op
# Warmup Iteration   4: 1023.990 ns/op
# Warmup Iteration   5: 1026.540 ns/op
Iteration   1: 1028.539 ns/op
Iteration   2: 1029.044 ns/op
Iteration   3: 1028.585 ns/op
Iteration   4: 1031.374 ns/op
Iteration   5: 1032.852 ns/op

# Run progress: 26.19% complete, ETA 01:43:35
# Fork: 2 of 3
# Warmup Iteration   1: 1026.468 ns/op
# Warmup Iteration   2: 1022.226 ns/op
# Warmup Iteration   3: 1027.094 ns/op
# Warmup Iteration   4: 1027.396 ns/op
# Warmup Iteration   5: 1027.704 ns/op
Iteration   1: 1026.605 ns/op
Iteration   2: 1026.560 ns/op
Iteration   3: 1028.328 ns/op
Iteration   4: 1028.000 ns/op
Iteration   5: 1028.358 ns/op

# Run progress: 27.38% complete, ETA 01:41:55
# Fork: 3 of 3
# Warmup Iteration   1: 1057.762 ns/op
# Warmup Iteration   2: 1050.061 ns/op
# Warmup Iteration   3: 1053.110 ns/op
# Warmup Iteration   4: 1054.369 ns/op
# Warmup Iteration   5: 1053.167 ns/op
Iteration   1: 1054.427 ns/op
Iteration   2: 1052.501 ns/op
Iteration   3: 1050.907 ns/op
Iteration   4: 1049.678 ns/op
Iteration   5: 1160.005 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  1043.718 ±(99.9%) 36.202 ns/op [Average]
  (min, avg, max) = (1026.560, 1043.718, 1160.005), stdev = 33.863
  CI (99.9%): [1007.516, 1079.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 16384, stride = 256)

# Run progress: 28.57% complete, ETA 01:40:15
# Fork: 1 of 3
# Warmup Iteration   1: 3338.692 ns/op
# Warmup Iteration   2: 3258.016 ns/op
# Warmup Iteration   3: 3256.710 ns/op
# Warmup Iteration   4: 3252.986 ns/op
# Warmup Iteration   5: 3255.478 ns/op
Iteration   1: 3251.564 ns/op
Iteration   2: 3253.844 ns/op
Iteration   3: 3254.469 ns/op
Iteration   4: 3252.280 ns/op
Iteration   5: 3256.340 ns/op

# Run progress: 29.76% complete, ETA 01:38:34
# Fork: 2 of 3
# Warmup Iteration   1: 3348.972 ns/op
# Warmup Iteration   2: 3254.202 ns/op
# Warmup Iteration   3: 3250.101 ns/op
# Warmup Iteration   4: 3251.814 ns/op
# Warmup Iteration   5: 3254.467 ns/op
Iteration   1: 3247.055 ns/op
Iteration   2: 3246.677 ns/op
Iteration   3: 3251.362 ns/op
Iteration   4: 3249.990 ns/op
Iteration   5: 3254.829 ns/op

# Run progress: 30.95% complete, ETA 01:36:54
# Fork: 3 of 3
# Warmup Iteration   1: 3336.573 ns/op
# Warmup Iteration   2: 3251.430 ns/op
# Warmup Iteration   3: 3247.527 ns/op
# Warmup Iteration   4: 3249.463 ns/op
# Warmup Iteration   5: 3251.490 ns/op
Iteration   1: 3248.300 ns/op
Iteration   2: 3248.853 ns/op
Iteration   3: 3248.131 ns/op
Iteration   4: 3243.029 ns/op
Iteration   5: 3249.262 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  3250.399 ±(99.9%) 3.854 ns/op [Average]
  (min, avg, max) = (3243.029, 3250.399, 3256.340), stdev = 3.605
  CI (99.9%): [3246.545, 3254.253] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 16384, stride = 512)

# Run progress: 32.14% complete, ETA 01:35:14
# Fork: 1 of 3
# Warmup Iteration   1: 3238.300 ns/op
# Warmup Iteration   2: 3157.545 ns/op
# Warmup Iteration   3: 3151.948 ns/op
# Warmup Iteration   4: 3148.502 ns/op
# Warmup Iteration   5: 3150.744 ns/op
Iteration   1: 3150.340 ns/op
Iteration   2: 3149.404 ns/op
Iteration   3: 3156.570 ns/op
Iteration   4: 3147.349 ns/op
Iteration   5: 3151.169 ns/op

# Run progress: 33.33% complete, ETA 01:33:34
# Fork: 2 of 3
# Warmup Iteration   1: 3324.233 ns/op
# Warmup Iteration   2: 3306.711 ns/op
# Warmup Iteration   3: 3181.400 ns/op
# Warmup Iteration   4: 3250.343 ns/op
# Warmup Iteration   5: 3382.803 ns/op
Iteration   1: 3562.590 ns/op
Iteration   2: 3367.971 ns/op
Iteration   3: 3195.066 ns/op
Iteration   4: 3186.337 ns/op
Iteration   5: 3170.889 ns/op

# Run progress: 34.52% complete, ETA 01:31:54
# Fork: 3 of 3
# Warmup Iteration   1: 3279.187 ns/op
# Warmup Iteration   2: 3183.654 ns/op
# Warmup Iteration   3: 3193.535 ns/op
# Warmup Iteration   4: 3177.488 ns/op
# Warmup Iteration   5: 3195.327 ns/op
Iteration   1: 3180.151 ns/op
Iteration   2: 3196.037 ns/op
Iteration   3: 3176.384 ns/op
Iteration   4: 3191.276 ns/op
Iteration   5: 3179.913 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  3210.763 ±(99.9%) 118.676 ns/op [Average]
  (min, avg, max) = (3147.349, 3210.763, 3562.590), stdev = 111.009
  CI (99.9%): [3092.088, 3329.439] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 32768, stride = 256)

# Run progress: 35.71% complete, ETA 01:30:13
# Fork: 1 of 3
# Warmup Iteration   1: 6642.366 ns/op
# Warmup Iteration   2: 6447.357 ns/op
# Warmup Iteration   3: 6472.044 ns/op
# Warmup Iteration   4: 6441.285 ns/op
# Warmup Iteration   5: 6468.818 ns/op
Iteration   1: 6447.990 ns/op
Iteration   2: 6473.473 ns/op
Iteration   3: 6450.359 ns/op
Iteration   4: 6475.031 ns/op
Iteration   5: 6439.465 ns/op

# Run progress: 36.90% complete, ETA 01:28:33
# Fork: 2 of 3
# Warmup Iteration   1: 6623.221 ns/op
# Warmup Iteration   2: 6432.264 ns/op
# Warmup Iteration   3: 6456.014 ns/op
# Warmup Iteration   4: 6433.122 ns/op
# Warmup Iteration   5: 6456.878 ns/op
Iteration   1: 6425.595 ns/op
Iteration   2: 6454.110 ns/op
Iteration   3: 7646.654 ns/op
Iteration   4: 6466.833 ns/op
Iteration   5: 6408.235 ns/op

# Run progress: 38.10% complete, ETA 01:26:53
# Fork: 3 of 3
# Warmup Iteration   1: 6593.050 ns/op
# Warmup Iteration   2: 6413.099 ns/op
# Warmup Iteration   3: 6395.468 ns/op
# Warmup Iteration   4: 6392.533 ns/op
# Warmup Iteration   5: 6400.472 ns/op
Iteration   1: 6395.940 ns/op
Iteration   2: 6393.703 ns/op
Iteration   3: 6389.193 ns/op
Iteration   4: 6393.893 ns/op
Iteration   5: 6413.886 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  6511.624 ±(99.9%) 337.244 ns/op [Average]
  (min, avg, max) = (6389.193, 6511.624, 7646.654), stdev = 315.458
  CI (99.9%): [6174.380, 6848.868] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 32768, stride = 512)

# Run progress: 39.29% complete, ETA 01:25:13
# Fork: 1 of 3
# Warmup Iteration   1: 6446.075 ns/op
# Warmup Iteration   2: 6282.912 ns/op
# Warmup Iteration   3: 6262.656 ns/op
# Warmup Iteration   4: 6270.165 ns/op
# Warmup Iteration   5: 6264.986 ns/op
Iteration   1: 6272.946 ns/op
Iteration   2: 6270.942 ns/op
Iteration   3: 6281.090 ns/op
Iteration   4: 6272.666 ns/op
Iteration   5: 6269.930 ns/op

# Run progress: 40.48% complete, ETA 01:23:32
# Fork: 2 of 3
# Warmup Iteration   1: 6460.901 ns/op
# Warmup Iteration   2: 6277.733 ns/op
# Warmup Iteration   3: 6270.706 ns/op
# Warmup Iteration   4: 6277.419 ns/op
# Warmup Iteration   5: 6268.536 ns/op
Iteration   1: 6274.956 ns/op
Iteration   2: 6269.178 ns/op
Iteration   3: 6267.128 ns/op
Iteration   4: 6261.042 ns/op
Iteration   5: 6269.457 ns/op

# Run progress: 41.67% complete, ETA 01:21:52
# Fork: 3 of 3
# Warmup Iteration   1: 6447.662 ns/op
# Warmup Iteration   2: 6288.187 ns/op
# Warmup Iteration   3: 6276.017 ns/op
# Warmup Iteration   4: 6274.568 ns/op
# Warmup Iteration   5: 6288.333 ns/op
Iteration   1: 6280.769 ns/op
Iteration   2: 6279.608 ns/op
Iteration   3: 6276.356 ns/op
Iteration   4: 6266.812 ns/op
Iteration   5: 6272.457 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  6272.356 ±(99.9%) 5.961 ns/op [Average]
  (min, avg, max) = (6261.042, 6272.356, 6281.090), stdev = 5.576
  CI (99.9%): [6266.394, 6278.317] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 16384, stride = 256)

# Run progress: 42.86% complete, ETA 01:20:12
# Fork: 1 of 3
# Warmup Iteration   1: 328.961 ns/op
# Warmup Iteration   2: 309.390 ns/op
# Warmup Iteration   3: 320.896 ns/op
# Warmup Iteration   4: 320.249 ns/op
# Warmup Iteration   5: 318.452 ns/op
Iteration   1: 318.429 ns/op
Iteration   2: 318.115 ns/op
Iteration   3: 319.458 ns/op
Iteration   4: 323.744 ns/op
Iteration   5: 318.832 ns/op

# Run progress: 44.05% complete, ETA 01:18:32
# Fork: 2 of 3
# Warmup Iteration   1: 328.643 ns/op
# Warmup Iteration   2: 311.745 ns/op
# Warmup Iteration   3: 324.363 ns/op
# Warmup Iteration   4: 324.298 ns/op
# Warmup Iteration   5: 323.474 ns/op
Iteration   1: 323.316 ns/op
Iteration   2: 323.936 ns/op
Iteration   3: 323.281 ns/op
Iteration   4: 323.952 ns/op
Iteration   5: 323.099 ns/op

# Run progress: 45.24% complete, ETA 01:16:51
# Fork: 3 of 3
# Warmup Iteration   1: 354.619 ns/op
# Warmup Iteration   2: 335.885 ns/op
# Warmup Iteration   3: 349.238 ns/op
# Warmup Iteration   4: 349.095 ns/op
# Warmup Iteration   5: 347.801 ns/op
Iteration   1: 346.018 ns/op
Iteration   2: 346.699 ns/op
Iteration   3: 345.130 ns/op
Iteration   4: 345.208 ns/op
Iteration   5: 345.063 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  329.619 ±(99.9%) 12.718 ns/op [Average]
  (min, avg, max) = (318.115, 329.619, 346.699), stdev = 11.896
  CI (99.9%): [316.901, 342.336] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 16384, stride = 512)

# Run progress: 46.43% complete, ETA 01:15:11
# Fork: 1 of 3
# Warmup Iteration   1: 318.363 ns/op
# Warmup Iteration   2: 307.325 ns/op
# Warmup Iteration   3: 320.733 ns/op
# Warmup Iteration   4: 321.261 ns/op
# Warmup Iteration   5: 321.284 ns/op
Iteration   1: 321.535 ns/op
Iteration   2: 322.357 ns/op
Iteration   3: 322.176 ns/op
Iteration   4: 322.875 ns/op
Iteration   5: 324.134 ns/op

# Run progress: 47.62% complete, ETA 01:13:31
# Fork: 2 of 3
# Warmup Iteration   1: 330.880 ns/op
# Warmup Iteration   2: 307.165 ns/op
# Warmup Iteration   3: 321.475 ns/op
# Warmup Iteration   4: 321.625 ns/op
# Warmup Iteration   5: 321.274 ns/op
Iteration   1: 320.910 ns/op
Iteration   2: 321.196 ns/op
Iteration   3: 320.457 ns/op
Iteration   4: 321.247 ns/op
Iteration   5: 320.927 ns/op

# Run progress: 48.81% complete, ETA 01:11:51
# Fork: 3 of 3
# Warmup Iteration   1: 322.574 ns/op
# Warmup Iteration   2: 308.535 ns/op
# Warmup Iteration   3: 321.023 ns/op
# Warmup Iteration   4: 321.826 ns/op
# Warmup Iteration   5: 320.712 ns/op
Iteration   1: 320.659 ns/op
Iteration   2: 321.009 ns/op
Iteration   3: 320.757 ns/op
Iteration   4: 321.484 ns/op
Iteration   5: 320.669 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  321.493 ±(99.9%) 1.074 ns/op [Average]
  (min, avg, max) = (320.457, 321.493, 324.134), stdev = 1.005
  CI (99.9%): [320.419, 322.567] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 32768, stride = 256)

# Run progress: 50.00% complete, ETA 01:10:10
# Fork: 1 of 3
# Warmup Iteration   1: 983.079 ns/op
# Warmup Iteration   2: 979.028 ns/op
# Warmup Iteration   3: 990.154 ns/op
# Warmup Iteration   4: 991.869 ns/op
# Warmup Iteration   5: 992.496 ns/op
Iteration   1: 988.456 ns/op
Iteration   2: 1084.375 ns/op
Iteration   3: 1078.019 ns/op
Iteration   4: 1071.583 ns/op
Iteration   5: 1068.505 ns/op

# Run progress: 51.19% complete, ETA 01:08:30
# Fork: 2 of 3
# Warmup Iteration   1: 946.720 ns/op
# Warmup Iteration   2: 952.922 ns/op
# Warmup Iteration   3: 961.500 ns/op
# Warmup Iteration   4: 963.400 ns/op
# Warmup Iteration   5: 963.774 ns/op
Iteration   1: 963.809 ns/op
Iteration   2: 965.407 ns/op
Iteration   3: 964.321 ns/op
Iteration   4: 964.265 ns/op
Iteration   5: 964.899 ns/op

# Run progress: 52.38% complete, ETA 01:06:50
# Fork: 3 of 3
# Warmup Iteration   1: 993.843 ns/op
# Warmup Iteration   2: 1101.565 ns/op
# Warmup Iteration   3: 1101.501 ns/op
# Warmup Iteration   4: 1093.826 ns/op
# Warmup Iteration   5: 1089.310 ns/op
Iteration   1: 1087.594 ns/op
Iteration   2: 1084.015 ns/op
Iteration   3: 1082.094 ns/op
Iteration   4: 1081.044 ns/op
Iteration   5: 1080.159 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  1035.236 ±(99.9%) 60.802 ns/op [Average]
  (min, avg, max) = (963.809, 1035.236, 1087.594), stdev = 56.874
  CI (99.9%): [974.435, 1096.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 32768, stride = 512)

# Run progress: 53.57% complete, ETA 01:05:09
# Fork: 1 of 3
# Warmup Iteration   1: 1057.792 ns/op
# Warmup Iteration   2: 1050.288 ns/op
# Warmup Iteration   3: 1056.847 ns/op
# Warmup Iteration   4: 1059.364 ns/op
# Warmup Iteration   5: 1055.368 ns/op
Iteration   1: 1057.531 ns/op
Iteration   2: 1081.502 ns/op
Iteration   3: 1102.439 ns/op
Iteration   4: 1090.606 ns/op
Iteration   5: 1085.251 ns/op

# Run progress: 54.76% complete, ETA 01:03:29
# Fork: 2 of 3
# Warmup Iteration   1: 961.707 ns/op
# Warmup Iteration   2: 962.267 ns/op
# Warmup Iteration   3: 964.391 ns/op
# Warmup Iteration   4: 967.713 ns/op
# Warmup Iteration   5: 967.383 ns/op
Iteration   1: 968.759 ns/op
Iteration   2: 977.598 ns/op
Iteration   3: 974.003 ns/op
Iteration   4: 978.626 ns/op
Iteration   5: 973.762 ns/op

# Run progress: 55.95% complete, ETA 01:01:49
# Fork: 3 of 3
# Warmup Iteration   1: 1112.683 ns/op
# Warmup Iteration   2: 976.716 ns/op
# Warmup Iteration   3: 985.653 ns/op
# Warmup Iteration   4: 987.440 ns/op
# Warmup Iteration   5: 986.961 ns/op
Iteration   1: 987.158 ns/op
Iteration   2: 985.237 ns/op
Iteration   3: 988.081 ns/op
Iteration   4: 986.096 ns/op
Iteration   5: 986.095 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  1014.850 ±(99.9%) 54.830 ns/op [Average]
  (min, avg, max) = (968.759, 1014.850, 1102.439), stdev = 51.288
  CI (99.9%): [960.020, 1069.679] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 16384, stride = 256)

# Run progress: 57.14% complete, ETA 01:00:09
# Fork: 1 of 3
# Warmup Iteration   1: 351.839 ns/op
# Warmup Iteration   2: 352.171 ns/op
# Warmup Iteration   3: 348.940 ns/op
# Warmup Iteration   4: 348.979 ns/op
# Warmup Iteration   5: 348.351 ns/op
Iteration   1: 348.117 ns/op
Iteration   2: 347.814 ns/op
Iteration   3: 348.391 ns/op
Iteration   4: 347.098 ns/op
Iteration   5: 347.788 ns/op

# Run progress: 58.33% complete, ETA 00:58:28
# Fork: 2 of 3
# Warmup Iteration   1: 382.012 ns/op
# Warmup Iteration   2: 390.158 ns/op
# Warmup Iteration   3: 384.007 ns/op
# Warmup Iteration   4: 382.569 ns/op
# Warmup Iteration   5: 381.018 ns/op
Iteration   1: 380.518 ns/op
Iteration   2: 380.390 ns/op
Iteration   3: 379.661 ns/op
Iteration   4: 378.359 ns/op
Iteration   5: 378.313 ns/op

# Run progress: 59.52% complete, ETA 00:56:48
# Fork: 3 of 3
# Warmup Iteration   1: 334.221 ns/op
# Warmup Iteration   2: 336.726 ns/op
# Warmup Iteration   3: 373.285 ns/op
# Warmup Iteration   4: 374.173 ns/op
# Warmup Iteration   5: 374.357 ns/op
Iteration   1: 375.330 ns/op
Iteration   2: 374.329 ns/op
Iteration   3: 375.905 ns/op
Iteration   4: 374.558 ns/op
Iteration   5: 375.960 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  367.502 ±(99.9%) 15.523 ns/op [Average]
  (min, avg, max) = (347.098, 367.502, 380.518), stdev = 14.520
  CI (99.9%): [351.980, 383.025] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 16384, stride = 512)

# Run progress: 60.71% complete, ETA 00:55:08
# Fork: 1 of 3
# Warmup Iteration   1: 389.800 ns/op
# Warmup Iteration   2: 385.306 ns/op
# Warmup Iteration   3: 379.605 ns/op
# Warmup Iteration   4: 378.632 ns/op
# Warmup Iteration   5: 377.941 ns/op
Iteration   1: 378.566 ns/op
Iteration   2: 378.133 ns/op
Iteration   3: 378.320 ns/op
Iteration   4: 376.435 ns/op
Iteration   5: 377.483 ns/op

# Run progress: 61.90% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: 373.316 ns/op
# Warmup Iteration   2: 373.926 ns/op
# Warmup Iteration   3: 372.491 ns/op
# Warmup Iteration   4: 372.075 ns/op
# Warmup Iteration   5: 372.155 ns/op
Iteration   1: 378.418 ns/op
Iteration   2: 375.332 ns/op
Iteration   3: 371.605 ns/op
Iteration   4: 370.385 ns/op
Iteration   5: 370.718 ns/op

# Run progress: 63.10% complete, ETA 00:51:47
# Fork: 3 of 3
# Warmup Iteration   1: 373.678 ns/op
# Warmup Iteration   2: 342.029 ns/op
# Warmup Iteration   3: 377.876 ns/op
# Warmup Iteration   4: 379.812 ns/op
# Warmup Iteration   5: 381.091 ns/op
Iteration   1: 381.240 ns/op
Iteration   2: 381.714 ns/op
Iteration   3: 382.159 ns/op
Iteration   4: 381.433 ns/op
Iteration   5: 382.957 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  377.660 ±(99.9%) 4.413 ns/op [Average]
  (min, avg, max) = (370.385, 377.660, 382.957), stdev = 4.128
  CI (99.9%): [373.247, 382.073] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 32768, stride = 256)

# Run progress: 64.29% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 1156.861 ns/op
# Warmup Iteration   2: 1147.526 ns/op
# Warmup Iteration   3: 1142.797 ns/op
# Warmup Iteration   4: 1142.510 ns/op
# Warmup Iteration   5: 1140.475 ns/op
Iteration   1: 1139.945 ns/op
Iteration   2: 1138.713 ns/op
Iteration   3: 1138.863 ns/op
Iteration   4: 1137.891 ns/op
Iteration   5: 1137.896 ns/op

# Run progress: 65.48% complete, ETA 00:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 1171.484 ns/op
# Warmup Iteration   2: 1163.715 ns/op
# Warmup Iteration   3: 1159.502 ns/op
# Warmup Iteration   4: 1159.634 ns/op
# Warmup Iteration   5: 1160.317 ns/op
Iteration   1: 1160.730 ns/op
Iteration   2: 1160.355 ns/op
Iteration   3: 1159.723 ns/op
Iteration   4: 1158.523 ns/op
Iteration   5: 1157.451 ns/op

# Run progress: 66.67% complete, ETA 00:46:47
# Fork: 3 of 3
# Warmup Iteration   1: 1013.388 ns/op
# Warmup Iteration   2: 1013.549 ns/op
# Warmup Iteration   3: 1019.926 ns/op
# Warmup Iteration   4: 1024.058 ns/op
# Warmup Iteration   5: 1025.025 ns/op
Iteration   1: 1029.219 ns/op
Iteration   2: 1029.341 ns/op
Iteration   3: 1029.389 ns/op
Iteration   4: 1031.043 ns/op
Iteration   5: 1031.533 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  1109.374 ±(99.9%) 62.736 ns/op [Average]
  (min, avg, max) = (1029.219, 1109.374, 1160.730), stdev = 58.684
  CI (99.9%): [1046.638, 1172.111] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 32768, stride = 512)

# Run progress: 67.86% complete, ETA 00:45:06
# Fork: 1 of 3
# Warmup Iteration   1: 1055.762 ns/op
# Warmup Iteration   2: 1050.027 ns/op
# Warmup Iteration   3: 1052.796 ns/op
# Warmup Iteration   4: 1051.494 ns/op
# Warmup Iteration   5: 1052.563 ns/op
Iteration   1: 1053.167 ns/op
Iteration   2: 1054.379 ns/op
Iteration   3: 1052.895 ns/op
Iteration   4: 1053.539 ns/op
Iteration   5: 1053.817 ns/op

# Run progress: 69.05% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: 1030.792 ns/op
# Warmup Iteration   2: 1156.161 ns/op
# Warmup Iteration   3: 1144.702 ns/op
# Warmup Iteration   4: 1138.461 ns/op
# Warmup Iteration   5: 1136.006 ns/op
Iteration   1: 1133.798 ns/op
Iteration   2: 1137.689 ns/op
Iteration   3: 1154.301 ns/op
Iteration   4: 1143.249 ns/op
Iteration   5: 1157.951 ns/op

# Run progress: 70.24% complete, ETA 00:41:46
# Fork: 3 of 3
# Warmup Iteration   1: 1163.932 ns/op
# Warmup Iteration   2: 1239.072 ns/op
# Warmup Iteration   3: 1476.911 ns/op
# Warmup Iteration   4: 2019.770 ns/op
# Warmup Iteration   5: 2088.895 ns/op
Iteration   1: 1296.385 ns/op
Iteration   2: 1096.760 ns/op
Iteration   3: 1108.729 ns/op
Iteration   4: 1074.849 ns/op
Iteration   5: 1095.002 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  1111.101 ±(99.9%) 69.394 ns/op [Average]
  (min, avg, max) = (1052.895, 1111.101, 1296.385), stdev = 64.911
  CI (99.9%): [1041.707, 1180.494] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 16384, stride = 256)

# Run progress: 71.43% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 2851.276 ns/op
# Warmup Iteration   2: 2490.338 ns/op
# Warmup Iteration   3: 2440.739 ns/op
# Warmup Iteration   4: 2348.283 ns/op
# Warmup Iteration   5: 2464.391 ns/op
Iteration   1: 2442.368 ns/op
Iteration   2: 2534.092 ns/op
Iteration   3: 2321.496 ns/op
Iteration   4: 2321.373 ns/op
Iteration   5: 2348.441 ns/op

# Run progress: 72.62% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 2510.566 ns/op
# Warmup Iteration   2: 2406.259 ns/op
# Warmup Iteration   3: 2401.357 ns/op
# Warmup Iteration   4: 2231.916 ns/op
# Warmup Iteration   5: 2300.075 ns/op
Iteration   1: 2279.762 ns/op
Iteration   2: 2263.525 ns/op
Iteration   3: 2297.276 ns/op
Iteration   4: 2243.024 ns/op
Iteration   5: 2244.138 ns/op

# Run progress: 73.81% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 2564.916 ns/op
# Warmup Iteration   2: 2379.550 ns/op
# Warmup Iteration   3: 2318.952 ns/op
# Warmup Iteration   4: 2305.768 ns/op
# Warmup Iteration   5: 2299.522 ns/op
Iteration   1: 2345.337 ns/op
Iteration   2: 2337.107 ns/op
Iteration   3: 2354.724 ns/op
Iteration   4: 2418.937 ns/op
Iteration   5: 2311.685 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  2337.552 ±(99.9%) 83.791 ns/op [Average]
  (min, avg, max) = (2243.024, 2337.552, 2534.092), stdev = 78.378
  CI (99.9%): [2253.761, 2421.344] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 16384, stride = 512)

# Run progress: 75.00% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 1794.253 ns/op
# Warmup Iteration   2: 1682.062 ns/op
# Warmup Iteration   3: 1695.400 ns/op
# Warmup Iteration   4: 1694.874 ns/op
# Warmup Iteration   5: 1710.769 ns/op
Iteration   1: 1721.547 ns/op
Iteration   2: 1723.852 ns/op
Iteration   3: 1711.637 ns/op
Iteration   4: 1905.071 ns/op
Iteration   5: 1725.549 ns/op

# Run progress: 76.19% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 1764.882 ns/op
# Warmup Iteration   2: 1652.163 ns/op
# Warmup Iteration   3: 1685.732 ns/op
# Warmup Iteration   4: 1662.629 ns/op
# Warmup Iteration   5: 1649.252 ns/op
Iteration   1: 1672.311 ns/op
Iteration   2: 1643.201 ns/op
Iteration   3: 1678.867 ns/op
Iteration   4: 1669.134 ns/op
Iteration   5: 1666.675 ns/op

# Run progress: 77.38% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 1728.196 ns/op
# Warmup Iteration   2: 1627.547 ns/op
# Warmup Iteration   3: 1610.997 ns/op
# Warmup Iteration   4: 1595.119 ns/op
# Warmup Iteration   5: 1601.714 ns/op
Iteration   1: 1610.288 ns/op
Iteration   2: 1586.816 ns/op
Iteration   3: 1609.749 ns/op
Iteration   4: 1607.149 ns/op
Iteration   5: 1603.740 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  1675.706 ±(99.9%) 84.958 ns/op [Average]
  (min, avg, max) = (1586.816, 1675.706, 1905.071), stdev = 79.470
  CI (99.9%): [1590.748, 1760.664] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 32768, stride = 256)

# Run progress: 78.57% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 5251.213 ns/op
# Warmup Iteration   2: 4904.429 ns/op
# Warmup Iteration   3: 4687.946 ns/op
# Warmup Iteration   4: 4731.537 ns/op
# Warmup Iteration   5: 4646.689 ns/op
Iteration   1: 4688.210 ns/op
Iteration   2: 4724.234 ns/op
Iteration   3: 4720.269 ns/op
Iteration   4: 4719.419 ns/op
Iteration   5: 4747.814 ns/op

# Run progress: 79.76% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 5118.683 ns/op
# Warmup Iteration   2: 4830.330 ns/op
# Warmup Iteration   3: 4970.701 ns/op
# Warmup Iteration   4: 4865.947 ns/op
# Warmup Iteration   5: 5103.219 ns/op
Iteration   1: 4983.448 ns/op
Iteration   2: 4972.313 ns/op
Iteration   3: 4888.372 ns/op
Iteration   4: 5088.659 ns/op
Iteration   5: 5029.423 ns/op

# Run progress: 80.95% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 5471.327 ns/op
# Warmup Iteration   2: 4824.330 ns/op
# Warmup Iteration   3: 5020.581 ns/op
# Warmup Iteration   4: 4850.723 ns/op
# Warmup Iteration   5: 4989.973 ns/op
Iteration   1: 4884.498 ns/op
Iteration   2: 4848.646 ns/op
Iteration   3: 4808.098 ns/op
Iteration   4: 4893.871 ns/op
Iteration   5: 4890.079 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  4859.157 ±(99.9%) 132.461 ns/op [Average]
  (min, avg, max) = (4688.210, 4859.157, 5088.659), stdev = 123.904
  CI (99.9%): [4726.696, 4991.617] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 32768, stride = 512)

# Run progress: 82.14% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 3586.597 ns/op
# Warmup Iteration   2: 3474.082 ns/op
# Warmup Iteration   3: 3439.959 ns/op
# Warmup Iteration   4: 3451.252 ns/op
# Warmup Iteration   5: 3458.305 ns/op
Iteration   1: 3450.340 ns/op
Iteration   2: 3451.685 ns/op
Iteration   3: 3373.211 ns/op
Iteration   4: 3402.440 ns/op
Iteration   5: 3460.812 ns/op

# Run progress: 83.33% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 3670.584 ns/op
# Warmup Iteration   2: 3535.116 ns/op
# Warmup Iteration   3: 3464.897 ns/op
# Warmup Iteration   4: 3559.665 ns/op
# Warmup Iteration   5: 3561.778 ns/op
Iteration   1: 3479.264 ns/op
Iteration   2: 3427.685 ns/op
Iteration   3: 3536.814 ns/op
Iteration   4: 3521.465 ns/op
Iteration   5: 3489.474 ns/op

# Run progress: 84.52% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 3868.303 ns/op
# Warmup Iteration   2: 3733.914 ns/op
# Warmup Iteration   3: 3455.962 ns/op
# Warmup Iteration   4: 3457.656 ns/op
# Warmup Iteration   5: 3465.404 ns/op
Iteration   1: 3500.551 ns/op
Iteration   2: 3501.090 ns/op
Iteration   3: 3442.723 ns/op
Iteration   4: 3475.235 ns/op
Iteration   5: 3451.604 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  3464.293 ±(99.9%) 46.624 ns/op [Average]
  (min, avg, max) = (3373.211, 3464.293, 3536.814), stdev = 43.612
  CI (99.9%): [3417.669, 3510.917] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 16384, stride = 256)

# Run progress: 85.71% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 1586.950 ns/op
# Warmup Iteration   2: 1503.696 ns/op
# Warmup Iteration   3: 1513.488 ns/op
# Warmup Iteration   4: 1509.888 ns/op
# Warmup Iteration   5: 1518.582 ns/op
Iteration   1: 1537.379 ns/op
Iteration   2: 1484.754 ns/op
Iteration   3: 1503.886 ns/op
Iteration   4: 1513.840 ns/op
Iteration   5: 1520.188 ns/op

# Run progress: 86.90% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 1571.211 ns/op
# Warmup Iteration   2: 1504.954 ns/op
# Warmup Iteration   3: 1497.714 ns/op
# Warmup Iteration   4: 1489.057 ns/op
# Warmup Iteration   5: 1482.435 ns/op
Iteration   1: 1470.262 ns/op
Iteration   2: 1502.739 ns/op
Iteration   3: 1479.586 ns/op
Iteration   4: 1514.711 ns/op
Iteration   5: 1492.819 ns/op

# Run progress: 88.10% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 1543.383 ns/op
# Warmup Iteration   2: 1507.096 ns/op
# Warmup Iteration   3: 1500.762 ns/op
# Warmup Iteration   4: 1491.052 ns/op
# Warmup Iteration   5: 1500.805 ns/op
Iteration   1: 1501.691 ns/op
Iteration   2: 1519.141 ns/op
Iteration   3: 1507.340 ns/op
Iteration   4: 1504.836 ns/op
Iteration   5: 1491.129 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  1502.953 ±(99.9%) 18.549 ns/op [Average]
  (min, avg, max) = (1470.262, 1502.953, 1537.379), stdev = 17.351
  CI (99.9%): [1484.404, 1521.503] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 16384, stride = 512)

# Run progress: 89.29% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 1457.384 ns/op
# Warmup Iteration   2: 1402.919 ns/op
# Warmup Iteration   3: 1467.192 ns/op
# Warmup Iteration   4: 1444.067 ns/op
# Warmup Iteration   5: 1434.013 ns/op
Iteration   1: 1418.448 ns/op
Iteration   2: 1450.278 ns/op
Iteration   3: 1451.389 ns/op
Iteration   4: 1445.927 ns/op
Iteration   5: 1428.773 ns/op

# Run progress: 90.48% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 1431.551 ns/op
# Warmup Iteration   2: 1359.460 ns/op
# Warmup Iteration   3: 1435.817 ns/op
# Warmup Iteration   4: 1407.124 ns/op
# Warmup Iteration   5: 1400.737 ns/op
Iteration   1: 1418.203 ns/op
Iteration   2: 1392.873 ns/op
Iteration   3: 1413.374 ns/op
Iteration   4: 1408.697 ns/op
Iteration   5: 1412.947 ns/op

# Run progress: 91.67% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 1459.842 ns/op
# Warmup Iteration   2: 1398.511 ns/op
# Warmup Iteration   3: 1408.625 ns/op
# Warmup Iteration   4: 1389.899 ns/op
# Warmup Iteration   5: 1414.890 ns/op
Iteration   1: 1408.911 ns/op
Iteration   2: 1397.389 ns/op
Iteration   3: 1396.732 ns/op
Iteration   4: 1407.769 ns/op
Iteration   5: 1399.476 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  1416.746 ±(99.9%) 20.607 ns/op [Average]
  (min, avg, max) = (1392.873, 1416.746, 1451.389), stdev = 19.276
  CI (99.9%): [1396.139, 1437.353] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 32768, stride = 256)

# Run progress: 92.86% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 3558.687 ns/op
# Warmup Iteration   2: 3452.692 ns/op
# Warmup Iteration   3: 3398.118 ns/op
# Warmup Iteration   4: 3366.359 ns/op
# Warmup Iteration   5: 3443.461 ns/op
Iteration   1: 3381.982 ns/op
Iteration   2: 3483.629 ns/op
Iteration   3: 3380.175 ns/op
Iteration   4: 3404.301 ns/op
Iteration   5: 3334.919 ns/op

# Run progress: 94.05% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3453.116 ns/op
# Warmup Iteration   2: 3412.412 ns/op
# Warmup Iteration   3: 3403.498 ns/op
# Warmup Iteration   4: 3390.220 ns/op
# Warmup Iteration   5: 3382.907 ns/op
Iteration   1: 3390.982 ns/op
Iteration   2: 3434.864 ns/op
Iteration   3: 3393.753 ns/op
Iteration   4: 3357.465 ns/op
Iteration   5: 3373.323 ns/op

# Run progress: 95.24% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3469.110 ns/op
# Warmup Iteration   2: 3393.943 ns/op
# Warmup Iteration   3: 3359.348 ns/op
# Warmup Iteration   4: 3338.070 ns/op
# Warmup Iteration   5: 3304.799 ns/op
Iteration   1: 3350.291 ns/op
Iteration   2: 3358.729 ns/op
Iteration   3: 3353.691 ns/op
Iteration   4: 3323.989 ns/op
Iteration   5: 3304.004 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  3375.073 ±(99.9%) 47.651 ns/op [Average]
  (min, avg, max) = (3304.004, 3375.073, 3483.629), stdev = 44.572
  CI (99.9%): [3327.423, 3422.724] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 32768, stride = 512)

# Run progress: 96.43% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3411.297 ns/op
# Warmup Iteration   2: 3234.733 ns/op
# Warmup Iteration   3: 3267.328 ns/op
# Warmup Iteration   4: 3319.689 ns/op
# Warmup Iteration   5: 3211.471 ns/op
Iteration   1: 3266.482 ns/op
Iteration   2: 3263.563 ns/op
Iteration   3: 3276.562 ns/op
Iteration   4: 3244.979 ns/op
Iteration   5: 3303.235 ns/op

# Run progress: 97.62% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3320.623 ns/op
# Warmup Iteration   2: 3246.182 ns/op
# Warmup Iteration   3: 3176.028 ns/op
# Warmup Iteration   4: 3204.092 ns/op
# Warmup Iteration   5: 3198.351 ns/op
Iteration   1: 3212.430 ns/op
Iteration   2: 3196.939 ns/op
Iteration   3: 3215.344 ns/op
Iteration   4: 3182.693 ns/op
Iteration   5: 3223.852 ns/op

# Run progress: 98.81% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 3307.898 ns/op
# Warmup Iteration   2: 3234.047 ns/op
# Warmup Iteration   3: 3172.900 ns/op
# Warmup Iteration   4: 3205.022 ns/op
# Warmup Iteration   5: 3210.929 ns/op
Iteration   1: 3182.034 ns/op
Iteration   2: 3240.013 ns/op
Iteration   3: 3204.895 ns/op
Iteration   4: 3224.749 ns/op
Iteration   5: 3171.248 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  3227.268 ±(99.9%) 40.913 ns/op [Average]
  (min, avg, max) = (3171.248, 3227.268, 3303.235), stdev = 38.270
  CI (99.9%): [3186.355, 3268.180] (assumes normal distribution)


# Run complete. Total time: 02:20:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             (size)  (stride)  Mode  Cnt     Score     Error  Units
ArrayCopyBenchmark.array_clone         16384       256  avgt   15  2083.428 ±   5.094  ns/op
ArrayCopyBenchmark.array_clone         16384       512  avgt   15  2087.860 ±   5.413  ns/op
ArrayCopyBenchmark.array_clone         32768       256  avgt   15  4124.770 ±   9.413  ns/op
ArrayCopyBenchmark.array_clone         32768       512  avgt   15  4136.227 ±  16.306  ns/op
ArrayCopyBenchmark.arrays_compare      16384       256  avgt   15   365.049 ±  20.703  ns/op
ArrayCopyBenchmark.arrays_compare      16384       512  avgt   15   364.106 ±  15.723  ns/op
ArrayCopyBenchmark.arrays_compare      32768       256  avgt   15  1098.792 ±  59.906  ns/op
ArrayCopyBenchmark.arrays_compare      32768       512  avgt   15  1043.718 ±  36.202  ns/op
ArrayCopyBenchmark.arrays_copyOf       16384       256  avgt   15  3250.399 ±   3.854  ns/op
ArrayCopyBenchmark.arrays_copyOf       16384       512  avgt   15  3210.763 ± 118.676  ns/op
ArrayCopyBenchmark.arrays_copyOf       32768       256  avgt   15  6511.624 ± 337.244  ns/op
ArrayCopyBenchmark.arrays_copyOf       32768       512  avgt   15  6272.356 ±   5.961  ns/op
ArrayCopyBenchmark.arrays_equals       16384       256  avgt   15   329.619 ±  12.718  ns/op
ArrayCopyBenchmark.arrays_equals       16384       512  avgt   15   321.493 ±   1.074  ns/op
ArrayCopyBenchmark.arrays_equals       32768       256  avgt   15  1035.236 ±  60.802  ns/op
ArrayCopyBenchmark.arrays_equals       32768       512  avgt   15  1014.850 ±  54.830  ns/op
ArrayCopyBenchmark.arrays_mismatch     16384       256  avgt   15   367.502 ±  15.523  ns/op
ArrayCopyBenchmark.arrays_mismatch     16384       512  avgt   15   377.660 ±   4.413  ns/op
ArrayCopyBenchmark.arrays_mismatch     32768       256  avgt   15  1109.374 ±  62.736  ns/op
ArrayCopyBenchmark.arrays_mismatch     32768       512  avgt   15  1111.101 ±  69.394  ns/op
ArrayCopyBenchmark.manual_array_copy   16384       256  avgt   15  2337.552 ±  83.791  ns/op
ArrayCopyBenchmark.manual_array_copy   16384       512  avgt   15  1675.706 ±  84.958  ns/op
ArrayCopyBenchmark.manual_array_copy   32768       256  avgt   15  4859.157 ± 132.461  ns/op
ArrayCopyBenchmark.manual_array_copy   32768       512  avgt   15  3464.293 ±  46.624  ns/op
ArrayCopyBenchmark.system_array_copy   16384       256  avgt   15  1502.953 ±  18.549  ns/op
ArrayCopyBenchmark.system_array_copy   16384       512  avgt   15  1416.746 ±  20.607  ns/op
ArrayCopyBenchmark.system_array_copy   32768       256  avgt   15  3375.073 ±  47.651  ns/op
ArrayCopyBenchmark.system_array_copy   32768       512  avgt   15  3227.268 ±  40.913  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/ArrayCopyBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*IfConditionalBranchBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/IfConditionalBranchBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.branchless_baseline
# Parameters: (thresholdLimit = 4096)

# Run progress: 0.00% complete, ETA 00:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 4168.077 ns/op
# Warmup Iteration   2: 4163.529 ns/op
# Warmup Iteration   3: 4161.756 ns/op
# Warmup Iteration   4: 4161.934 ns/op
# Warmup Iteration   5: 4162.211 ns/op
Iteration   1: 4162.801 ns/op
Iteration   2: 4163.096 ns/op
Iteration   3: 4164.419 ns/op
Iteration   4: 4162.263 ns/op
Iteration   5: 4162.577 ns/op

# Run progress: 11.11% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 4164.371 ns/op
# Warmup Iteration   2: 4160.787 ns/op
# Warmup Iteration   3: 4162.692 ns/op
# Warmup Iteration   4: 4161.967 ns/op
# Warmup Iteration   5: 4161.827 ns/op
Iteration   1: 4161.851 ns/op
Iteration   2: 4163.239 ns/op
Iteration   3: 4163.696 ns/op
Iteration   4: 4163.349 ns/op
Iteration   5: 4163.349 ns/op

# Run progress: 22.22% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 4477.295 ns/op
# Warmup Iteration   2: 4460.051 ns/op
# Warmup Iteration   3: 4453.178 ns/op
# Warmup Iteration   4: 4449.389 ns/op
# Warmup Iteration   5: 4442.408 ns/op
Iteration   1: 4428.225 ns/op
Iteration   2: 4425.490 ns/op
Iteration   3: 4413.552 ns/op
Iteration   4: 4407.171 ns/op
Iteration   5: 4398.816 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.branchless_baseline":
  4246.926 ±(99.9%) 131.431 ns/op [Average]
  (min, avg, max) = (4161.851, 4246.926, 4428.225), stdev = 122.940
  CI (99.9%): [4115.496, 4378.357] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.predictable_branch
# Parameters: (thresholdLimit = 4096)

# Run progress: 33.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 5059.285 ns/op
# Warmup Iteration   2: 5018.681 ns/op
# Warmup Iteration   3: 4993.518 ns/op
# Warmup Iteration   4: 4982.121 ns/op
# Warmup Iteration   5: 4975.920 ns/op
Iteration   1: 4982.911 ns/op
Iteration   2: 4974.104 ns/op
Iteration   3: 4968.318 ns/op
Iteration   4: 4955.978 ns/op
Iteration   5: 4956.753 ns/op

# Run progress: 44.44% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 4508.873 ns/op
# Warmup Iteration   2: 4509.446 ns/op
# Warmup Iteration   3: 5024.218 ns/op
# Warmup Iteration   4: 4995.329 ns/op
# Warmup Iteration   5: 4976.600 ns/op
Iteration   1: 4966.569 ns/op
Iteration   2: 4959.873 ns/op
Iteration   3: 4950.571 ns/op
Iteration   4: 4945.749 ns/op
Iteration   5: 4938.445 ns/op

# Run progress: 55.56% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 4966.266 ns/op
# Warmup Iteration   2: 4955.609 ns/op
# Warmup Iteration   3: 4946.180 ns/op
# Warmup Iteration   4: 4957.705 ns/op
# Warmup Iteration   5: 4946.253 ns/op
Iteration   1: 4938.367 ns/op
Iteration   2: 4938.899 ns/op
Iteration   3: 4942.098 ns/op
Iteration   4: 4935.652 ns/op
Iteration   5: 4936.979 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.predictable_branch":
  4952.751 ±(99.9%) 16.132 ns/op [Average]
  (min, avg, max) = (4935.652, 4952.751, 4982.911), stdev = 15.090
  CI (99.9%): [4936.619, 4968.883] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.unpredictable_branch
# Parameters: (thresholdLimit = 4096)

# Run progress: 66.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 8330.321 ns/op
# Warmup Iteration   2: 8320.765 ns/op
# Warmup Iteration   3: 8319.528 ns/op
# Warmup Iteration   4: 8318.421 ns/op
# Warmup Iteration   5: 8319.878 ns/op
Iteration   1: 8323.048 ns/op
Iteration   2: 8321.168 ns/op
Iteration   3: 8320.364 ns/op
Iteration   4: 8318.821 ns/op
Iteration   5: 8319.077 ns/op

# Run progress: 77.78% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 8328.905 ns/op
# Warmup Iteration   2: 8322.141 ns/op
# Warmup Iteration   3: 8318.465 ns/op
# Warmup Iteration   4: 8319.340 ns/op
# Warmup Iteration   5: 8317.661 ns/op
Iteration   1: 8318.647 ns/op
Iteration   2: 8317.375 ns/op
Iteration   3: 8321.038 ns/op
Iteration   4: 8320.265 ns/op
Iteration   5: 8321.571 ns/op

# Run progress: 88.89% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 8330.473 ns/op
# Warmup Iteration   2: 8322.412 ns/op
# Warmup Iteration   3: 8320.548 ns/op
# Warmup Iteration   4: 8327.879 ns/op
# Warmup Iteration   5: 8328.144 ns/op
Iteration   1: 8326.336 ns/op
Iteration   2: 8326.575 ns/op
Iteration   3: 8324.323 ns/op
Iteration   4: 8325.827 ns/op
Iteration   5: 8327.186 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.unpredictable_branch":
  8322.108 ±(99.9%) 3.457 ns/op [Average]
  (min, avg, max) = (8317.375, 8322.108, 8327.186), stdev = 3.233
  CI (99.9%): [8318.651, 8325.565] (assumes normal distribution)


# Run complete. Total time: 00:15:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (thresholdLimit)  Mode  Cnt     Score     Error  Units
IfConditionalBranchBenchmark.branchless_baseline               4096  avgt   15  4246.926 ± 131.431  ns/op
IfConditionalBranchBenchmark.predictable_branch                4096  avgt   15  4952.751 ±  16.132  ns/op
IfConditionalBranchBenchmark.unpredictable_branch              4096  avgt   15  8322.108 ±   3.457  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/IfConditionalBranchBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*NullChecksBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/NullChecksBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.0)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 2208.534 ns/op
# Warmup Iteration   2: 2187.097 ns/op
# Warmup Iteration   3: 2161.076 ns/op
# Warmup Iteration   4: 2153.221 ns/op
# Warmup Iteration   5: 2149.208 ns/op
Iteration   1: 2149.280 ns/op
Iteration   2: 2146.715 ns/op
Iteration   3: 2144.106 ns/op
Iteration   4: 2146.261 ns/op
Iteration   5: 2144.201 ns/op

# Run progress: 5.56% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 2155.467 ns/op
# Warmup Iteration   2: 2206.006 ns/op
# Warmup Iteration   3: 2197.707 ns/op
# Warmup Iteration   4: 2190.683 ns/op
# Warmup Iteration   5: 2190.981 ns/op
Iteration   1: 2187.494 ns/op
Iteration   2: 2186.317 ns/op
Iteration   3: 2185.672 ns/op
Iteration   4: 2182.901 ns/op
Iteration   5: 2182.833 ns/op

# Run progress: 11.11% complete, ETA 00:26:43
# Fork: 3 of 3
# Warmup Iteration   1: 1923.101 ns/op
# Warmup Iteration   2: 1951.078 ns/op
# Warmup Iteration   3: 1950.165 ns/op
# Warmup Iteration   4: 1956.182 ns/op
# Warmup Iteration   5: 1958.313 ns/op
Iteration   1: 1959.288 ns/op
Iteration   2: 1962.656 ns/op
Iteration   3: 1961.208 ns/op
Iteration   4: 1961.642 ns/op
Iteration   5: 1961.501 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check":
  2097.472 ±(99.9%) 108.040 ns/op [Average]
  (min, avg, max) = (1959.288, 2097.472, 2187.494), stdev = 101.060
  CI (99.9%): [1989.432, 2205.511] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.5)

# Run progress: 16.67% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 792340.197 ns/op
# Warmup Iteration   2: 840691.327 ns/op
# Warmup Iteration   3: 839454.730 ns/op
# Warmup Iteration   4: 838832.987 ns/op
# Warmup Iteration   5: 837284.876 ns/op
Iteration   1: 819325.367 ns/op
Iteration   2: 736860.308 ns/op
Iteration   3: 743956.257 ns/op
Iteration   4: 744928.119 ns/op
Iteration   5: 736528.267 ns/op

# Run progress: 22.22% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 764209.881 ns/op
# Warmup Iteration   2: 766815.260 ns/op
# Warmup Iteration   3: 760884.127 ns/op
# Warmup Iteration   4: 759811.194 ns/op
# Warmup Iteration   5: 756004.422 ns/op
Iteration   1: 760433.824 ns/op
Iteration   2: 759696.176 ns/op
Iteration   3: 761148.963 ns/op
Iteration   4: 746121.767 ns/op
Iteration   5: 712374.153 ns/op

# Run progress: 27.78% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 823561.014 ns/op
# Warmup Iteration   2: 816126.829 ns/op
# Warmup Iteration   3: 815071.839 ns/op
# Warmup Iteration   4: 800568.763 ns/op
# Warmup Iteration   5: 815531.445 ns/op
Iteration   1: 803624.350 ns/op
Iteration   2: 809934.536 ns/op
Iteration   3: 808190.744 ns/op
Iteration   4: 813827.957 ns/op
Iteration   5: 803715.065 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check":
  770711.057 ±(99.9%) 37644.753 ns/op [Average]
  (min, avg, max) = (712374.153, 770711.057, 819325.367), stdev = 35212.926
  CI (99.9%): [733066.304, 808355.810] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 1.0)

# Run progress: 33.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 1597160.128 ns/op
# Warmup Iteration   2: 1579197.665 ns/op
# Warmup Iteration   3: 1501468.896 ns/op
# Warmup Iteration   4: 1416273.569 ns/op
# Warmup Iteration   5: 1426882.025 ns/op
Iteration   1: 1432243.592 ns/op
Iteration   2: 1431889.930 ns/op
Iteration   3: 1435880.089 ns/op
Iteration   4: 1438541.264 ns/op
Iteration   5: 1371248.904 ns/op

# Run progress: 38.89% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 1455324.371 ns/op
# Warmup Iteration   2: 1467660.572 ns/op
# Warmup Iteration   3: 1612473.966 ns/op
# Warmup Iteration   4: 1603766.985 ns/op
# Warmup Iteration   5: 1599268.977 ns/op
Iteration   1: 1594083.726 ns/op
Iteration   2: 1481679.698 ns/op
Iteration   3: 1565569.613 ns/op
Iteration   4: 1564759.731 ns/op
Iteration   5: 1529187.893 ns/op

# Run progress: 44.44% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 1417709.556 ns/op
# Warmup Iteration   2: 1419095.675 ns/op
# Warmup Iteration   3: 1625363.810 ns/op
# Warmup Iteration   4: 1617959.593 ns/op
# Warmup Iteration   5: 1610701.789 ns/op
Iteration   1: 1604435.760 ns/op
Iteration   2: 1603310.067 ns/op
Iteration   3: 1603465.446 ns/op
Iteration   4: 1599608.347 ns/op
Iteration   5: 1574155.730 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check":
  1522003.986 ±(99.9%) 86978.152 ns/op [Average]
  (min, avg, max) = (1371248.904, 1522003.986, 1604435.760), stdev = 81359.418
  CI (99.9%): [1435025.834, 1608982.138] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.0)

# Run progress: 50.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 1973.039 ns/op
# Warmup Iteration   2: 1992.275 ns/op
# Warmup Iteration   3: 1980.955 ns/op
# Warmup Iteration   4: 1988.528 ns/op
# Warmup Iteration   5: 1990.357 ns/op
Iteration   1: 1989.612 ns/op
Iteration   2: 1990.504 ns/op
Iteration   3: 1993.152 ns/op
Iteration   4: 1991.568 ns/op
Iteration   5: 1992.341 ns/op

# Run progress: 55.56% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 1999.840 ns/op
# Warmup Iteration   2: 1999.963 ns/op
# Warmup Iteration   3: 1994.716 ns/op
# Warmup Iteration   4: 1992.155 ns/op
# Warmup Iteration   5: 1992.899 ns/op
Iteration   1: 1992.246 ns/op
Iteration   2: 1992.271 ns/op
Iteration   3: 1993.641 ns/op
Iteration   4: 1989.783 ns/op
Iteration   5: 1992.252 ns/op

# Run progress: 61.11% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2227.143 ns/op
# Warmup Iteration   2: 2214.332 ns/op
# Warmup Iteration   3: 2201.865 ns/op
# Warmup Iteration   4: 2193.164 ns/op
# Warmup Iteration   5: 2188.864 ns/op
Iteration   1: 2185.531 ns/op
Iteration   2: 2186.721 ns/op
Iteration   3: 2179.236 ns/op
Iteration   4: 2183.177 ns/op
Iteration   5: 2180.865 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check":
  2055.527 ±(99.9%) 99.850 ns/op [Average]
  (min, avg, max) = (1989.612, 2055.527, 2186.721), stdev = 93.400
  CI (99.9%): [1955.677, 2155.377] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.5)

# Run progress: 66.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 4185620.095 ns/op
# Warmup Iteration   2: 4174901.268 ns/op
# Warmup Iteration   3: 4176964.812 ns/op
# Warmup Iteration   4: 4167775.039 ns/op
# Warmup Iteration   5: 4173289.815 ns/op
Iteration   1: 4171506.140 ns/op
Iteration   2: 4166143.312 ns/op
Iteration   3: 4169918.514 ns/op
Iteration   4: 4167519.717 ns/op
Iteration   5: 4169147.553 ns/op

# Run progress: 72.22% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3646121.251 ns/op
# Warmup Iteration   2: 3652861.607 ns/op
# Warmup Iteration   3: 3668120.419 ns/op
# Warmup Iteration   4: 3669687.923 ns/op
# Warmup Iteration   5: 3672277.471 ns/op
Iteration   1: 3677183.539 ns/op
Iteration   2: 3692226.783 ns/op
Iteration   3: 3685365.173 ns/op
Iteration   4: 3694923.163 ns/op
Iteration   5: 3693125.694 ns/op

# Run progress: 77.78% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 4380976.709 ns/op
# Warmup Iteration   2: 3724926.512 ns/op
# Warmup Iteration   3: 3739918.601 ns/op
# Warmup Iteration   4: 4221363.257 ns/op
# Warmup Iteration   5: 4191404.571 ns/op
Iteration   1: 4162212.468 ns/op
Iteration   2: 4156426.474 ns/op
Iteration   3: 4144545.470 ns/op
Iteration   4: 4232583.446 ns/op
Iteration   5: 4226335.272 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check":
  4013944.181 ±(99.9%) 255844.784 ns/op [Average]
  (min, avg, max) = (3677183.539, 4013944.181, 4232583.446), stdev = 239317.370
  CI (99.9%): [3758099.397, 4269788.966] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 1.0)

# Run progress: 83.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 8085416.611 ns/op
# Warmup Iteration   2: 7172176.862 ns/op
# Warmup Iteration   3: 7209464.966 ns/op
# Warmup Iteration   4: 7239557.415 ns/op
# Warmup Iteration   5: 7267764.365 ns/op
Iteration   1: 7277949.645 ns/op
Iteration   2: 7275306.575 ns/op
Iteration   3: 7276524.130 ns/op
Iteration   4: 7289380.553 ns/op
Iteration   5: 7274431.639 ns/op

# Run progress: 88.89% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 7532018.419 ns/op
# Warmup Iteration   2: 7476724.340 ns/op
# Warmup Iteration   3: 7451384.950 ns/op
# Warmup Iteration   4: 7452798.270 ns/op
# Warmup Iteration   5: 7460933.636 ns/op
Iteration   1: 7447218.005 ns/op
Iteration   2: 7469698.764 ns/op
Iteration   3: 7464879.448 ns/op
Iteration   4: 7449263.962 ns/op
Iteration   5: 7479442.413 ns/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 8310440.098 ns/op
# Warmup Iteration   2: 8158662.042 ns/op
# Warmup Iteration   3: 8142255.722 ns/op
# Warmup Iteration   4: 8094317.762 ns/op
# Warmup Iteration   5: 8097927.490 ns/op
Iteration   1: 8078683.163 ns/op
Iteration   2: 8053551.997 ns/op
Iteration   3: 8069268.707 ns/op
Iteration   4: 8070167.687 ns/op
Iteration   5: 8066079.542 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check":
  7602789.749 ±(99.9%) 373114.098 ns/op [Average]
  (min, avg, max) = (7274431.639, 7602789.749, 8078683.163), stdev = 349011.159
  CI (99.9%): [7229675.651, 7975903.847] (assumes normal distribution)


# Run complete. Total time: 00:30:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                (size)  (upperNullThreshold)  Mode  Cnt        Score        Error  Units
NullChecksBenchmark.explicit_null_check    1024                   0.0  avgt   15     2097.472 ±    108.040  ns/op
NullChecksBenchmark.explicit_null_check    1024                   0.5  avgt   15   770711.057 ±  37644.753  ns/op
NullChecksBenchmark.explicit_null_check    1024                   1.0  avgt   15  1522003.986 ±  86978.152  ns/op
NullChecksBenchmark.implicit_null_check    1024                   0.0  avgt   15     2055.527 ±     99.850  ns/op
NullChecksBenchmark.implicit_null_check    1024                   0.5  avgt   15  4013944.181 ± 255844.784  ns/op
NullChecksBenchmark.implicit_null_check    1024                   1.0  avgt   15  7602789.749 ± 373114.098  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/NullChecksBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*CodeCacheBusterBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/CodeCacheBusterBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.CodeCacheBusterBenchmark.code_cache_buster

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 535.238 us/op
# Warmup Iteration   2: 430.453 us/op
# Warmup Iteration   3: 422.984 us/op
# Warmup Iteration   4: 385.985 us/op
# Warmup Iteration   5: 384.309 us/op
Iteration   1: 383.348 us/op
Iteration   2: 384.647 us/op
Iteration   3: 383.221 us/op
Iteration   4: 381.640 us/op
Iteration   5: 382.700 us/op

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 510.297 us/op
# Warmup Iteration   2: 411.557 us/op
# Warmup Iteration   3: 357.989 us/op
# Warmup Iteration   4: 316.793 us/op
# Warmup Iteration   5: 318.614 us/op
Iteration   1: 317.983 us/op
Iteration   2: 318.136 us/op
Iteration   3: 317.236 us/op
Iteration   4: 320.809 us/op
Iteration   5: 318.345 us/op

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 494.422 us/op
# Warmup Iteration   2: 413.147 us/op
# Warmup Iteration   3: 376.473 us/op
# Warmup Iteration   4: 357.044 us/op
# Warmup Iteration   5: 352.899 us/op
Iteration   1: 352.051 us/op
Iteration   2: 350.561 us/op
Iteration   3: 350.093 us/op
Iteration   4: 349.051 us/op
Iteration   5: 348.881 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.CodeCacheBusterBenchmark.code_cache_buster":
  350.580 ±(99.9%) 29.216 us/op [Average]
  (min, avg, max) = (317.236, 350.580, 384.647), stdev = 27.329
  CI (99.9%): [321.364, 379.796] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt    Score    Error  Units
CodeCacheBusterBenchmark.code_cache_buster  avgt   15  350.580 ± 29.216  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/CodeCacheBusterBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*MethodArgsBusterBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/MethodArgsBusterBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MethodArgsBusterBenchmark.method_args_buster

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 304.547 ns/op
# Warmup Iteration   2: 304.974 ns/op
# Warmup Iteration   3: 305.604 ns/op
# Warmup Iteration   4: 305.874 ns/op
# Warmup Iteration   5: 306.484 ns/op
Iteration   1: 306.093 ns/op
Iteration   2: 306.416 ns/op
Iteration   3: 306.328 ns/op
Iteration   4: 305.774 ns/op
Iteration   5: 305.592 ns/op

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 226.839 ns/op
# Warmup Iteration   2: 224.890 ns/op
# Warmup Iteration   3: 223.619 ns/op
# Warmup Iteration   4: 221.987 ns/op
# Warmup Iteration   5: 221.131 ns/op
Iteration   1: 220.883 ns/op
Iteration   2: 220.724 ns/op
Iteration   3: 220.677 ns/op
Iteration   4: 220.596 ns/op
Iteration   5: 220.507 ns/op

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 194.062 ns/op
# Warmup Iteration   2: 196.479 ns/op
# Warmup Iteration   3: 196.849 ns/op
# Warmup Iteration   4: 197.260 ns/op
# Warmup Iteration   5: 197.338 ns/op
Iteration   1: 199.043 ns/op
Iteration   2: 198.000 ns/op
Iteration   3: 197.768 ns/op
Iteration   4: 197.576 ns/op
Iteration   5: 198.052 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MethodArgsBusterBenchmark.method_args_buster":
  241.602 ±(99.9%) 51.445 ns/op [Average]
  (min, avg, max) = (197.576, 241.602, 306.416), stdev = 48.122
  CI (99.9%): [190.156, 293.047] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt    Score    Error  Units
MethodArgsBusterBenchmark.method_args_buster  avgt   15  241.602 ± 51.445  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/MethodArgsBusterBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*DeadCodeEliminationBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/DeadCodeEliminationBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.baseline
# Parameters: (circleRadius = 42, iterations = 32768)

# Run progress: 0.00% complete, ETA 00:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 1.014 ns/op
# Warmup Iteration   2: 1.014 ns/op
# Warmup Iteration   3: 1.013 ns/op
# Warmup Iteration   4: 1.014 ns/op
# Warmup Iteration   5: 1.013 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 1.014 ns/op
Iteration   3: 1.014 ns/op
Iteration   4: 1.014 ns/op
Iteration   5: 1.014 ns/op

# Run progress: 11.11% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 1.015 ns/op
# Warmup Iteration   2: 1.014 ns/op
# Warmup Iteration   3: 1.014 ns/op
# Warmup Iteration   4: 1.014 ns/op
# Warmup Iteration   5: 1.013 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 1.014 ns/op
Iteration   3: 1.013 ns/op
Iteration   4: 1.014 ns/op
Iteration   5: 1.014 ns/op

# Run progress: 22.22% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 1.014 ns/op
# Warmup Iteration   2: 1.013 ns/op
# Warmup Iteration   3: 1.013 ns/op
# Warmup Iteration   4: 1.013 ns/op
# Warmup Iteration   5: 1.013 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 1.013 ns/op
Iteration   3: 1.013 ns/op
Iteration   4: 1.014 ns/op
Iteration   5: 1.013 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.baseline":
  1.014 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (1.013, 1.014, 1.014), stdev = 0.001
  CI (99.9%): [1.013, 1.014] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_native_method_calls
# Parameters: (circleRadius = 42, iterations = 32768)

# Run progress: 33.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 158.448 ns/op
# Warmup Iteration   2: 158.337 ns/op
# Warmup Iteration   3: 158.335 ns/op
# Warmup Iteration   4: 158.403 ns/op
# Warmup Iteration   5: 158.458 ns/op
Iteration   1: 158.370 ns/op
Iteration   2: 158.367 ns/op
Iteration   3: 158.337 ns/op
Iteration   4: 158.351 ns/op
Iteration   5: 158.361 ns/op

# Run progress: 44.44% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 162.195 ns/op
# Warmup Iteration   2: 162.259 ns/op
# Warmup Iteration   3: 162.113 ns/op
# Warmup Iteration   4: 162.004 ns/op
# Warmup Iteration   5: 161.812 ns/op
Iteration   1: 161.762 ns/op
Iteration   2: 161.907 ns/op
Iteration   3: 161.953 ns/op
Iteration   4: 161.921 ns/op
Iteration   5: 161.860 ns/op

# Run progress: 55.56% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 158.487 ns/op
# Warmup Iteration   2: 165.513 ns/op
# Warmup Iteration   3: 165.505 ns/op
# Warmup Iteration   4: 165.343 ns/op
# Warmup Iteration   5: 165.164 ns/op
Iteration   1: 165.169 ns/op
Iteration   2: 164.912 ns/op
Iteration   3: 164.581 ns/op
Iteration   4: 165.062 ns/op
Iteration   5: 165.116 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_native_method_calls":
  161.735 ±(99.9%) 2.992 ns/op [Average]
  (min, avg, max) = (158.337, 161.735, 165.169), stdev = 2.799
  CI (99.9%): [158.743, 164.727] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_user_defined_method_calls
# Parameters: (circleRadius = 42, iterations = 32768)

# Run progress: 66.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 5237.635 ns/op
# Warmup Iteration   2: 5229.636 ns/op
# Warmup Iteration   3: 5230.011 ns/op
# Warmup Iteration   4: 5230.533 ns/op
# Warmup Iteration   5: 5231.978 ns/op
Iteration   1: 5230.726 ns/op
Iteration   2: 5230.546 ns/op
Iteration   3: 5230.168 ns/op
Iteration   4: 5231.147 ns/op
Iteration   5: 5230.695 ns/op

# Run progress: 77.78% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 5239.427 ns/op
# Warmup Iteration   2: 5230.698 ns/op
# Warmup Iteration   3: 5230.590 ns/op
# Warmup Iteration   4: 5228.830 ns/op
# Warmup Iteration   5: 5229.906 ns/op
Iteration   1: 5230.259 ns/op
Iteration   2: 5230.891 ns/op
Iteration   3: 5230.154 ns/op
Iteration   4: 5228.914 ns/op
Iteration   5: 5229.263 ns/op

# Run progress: 88.89% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 5235.365 ns/op
# Warmup Iteration   2: 5228.545 ns/op
# Warmup Iteration   3: 5228.844 ns/op
# Warmup Iteration   4: 5228.740 ns/op
# Warmup Iteration   5: 5231.999 ns/op
Iteration   1: 5229.020 ns/op
Iteration   2: 5229.096 ns/op
Iteration   3: 5228.481 ns/op
Iteration   4: 5229.001 ns/op
Iteration   5: 5228.114 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_user_defined_method_calls":
  5229.765 ±(99.9%) 1.033 ns/op [Average]
  (min, avg, max) = (5228.114, 5229.765, 5231.147), stdev = 0.966
  CI (99.9%): [5228.732, 5230.798] (assumes normal distribution)


# Run complete. Total time: 00:15:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (circleRadius)  (iterations)  Mode  Cnt     Score    Error  Units
DeadCodeEliminationBenchmark.baseline                                    42         32768  avgt   15     1.014 ±  0.001  ns/op
DeadCodeEliminationBenchmark.dead_native_method_calls                    42         32768  avgt   15   161.735 ±  2.992  ns/op
DeadCodeEliminationBenchmark.dead_user_defined_method_calls              42         32768  avgt   15  5229.765 ±  1.033  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/DeadCodeEliminationBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*CanonicalizeInductionVariableBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/CanonicalizeInductionVariableBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.baseline

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 7212.509 us/op
# Warmup Iteration   2: 7237.634 us/op
# Warmup Iteration   3: 7235.439 us/op
# Warmup Iteration   4: 7148.967 us/op
# Warmup Iteration   5: 6415.426 us/op
Iteration   1: 6395.836 us/op
Iteration   2: 6405.751 us/op
Iteration   3: 6407.033 us/op
Iteration   4: 6404.887 us/op
Iteration   5: 6405.917 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 7261.510 us/op
# Warmup Iteration   2: 7254.897 us/op
# Warmup Iteration   3: 7247.242 us/op
# Warmup Iteration   4: 7152.409 us/op
# Warmup Iteration   5: 6392.473 us/op
Iteration   1: 6380.043 us/op
Iteration   2: 6474.856 us/op
Iteration   3: 6469.976 us/op
Iteration   4: 6471.772 us/op
Iteration   5: 6472.930 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 6630.377 us/op
# Warmup Iteration   2: 6703.104 us/op
# Warmup Iteration   3: 6722.122 us/op
# Warmup Iteration   4: 6388.892 us/op
# Warmup Iteration   5: 5936.933 us/op
Iteration   1: 5940.004 us/op
Iteration   2: 5937.754 us/op
Iteration   3: 5939.247 us/op
Iteration   4: 5944.558 us/op
Iteration   5: 5945.160 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.baseline":
  6266.382 ±(99.9%) 256.445 us/op [Average]
  (min, avg, max) = (5937.754, 6266.382, 6474.856), stdev = 239.879
  CI (99.9%): [6009.937, 6522.827] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.canonicalize_induction_var

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 7118.968 us/op
# Warmup Iteration   2: 7084.447 us/op
# Warmup Iteration   3: 7073.572 us/op
# Warmup Iteration   4: 7059.365 us/op
# Warmup Iteration   5: 7059.170 us/op
Iteration   1: 7055.894 us/op
Iteration   2: 7051.331 us/op
Iteration   3: 7049.125 us/op
Iteration   4: 7037.675 us/op
Iteration   5: 7035.020 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 6487.363 us/op
# Warmup Iteration   2: 6497.838 us/op
# Warmup Iteration   3: 6496.700 us/op
# Warmup Iteration   4: 6492.449 us/op
# Warmup Iteration   5: 6496.994 us/op
Iteration   1: 6507.330 us/op
Iteration   2: 6504.628 us/op
Iteration   3: 6506.772 us/op
Iteration   4: 6519.244 us/op
Iteration   5: 6526.183 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 7115.774 us/op
# Warmup Iteration   2: 7081.384 us/op
# Warmup Iteration   3: 7068.704 us/op
# Warmup Iteration   4: 7054.923 us/op
# Warmup Iteration   5: 7058.815 us/op
Iteration   1: 7025.681 us/op
Iteration   2: 7022.432 us/op
Iteration   3: 7016.095 us/op
Iteration   4: 7034.242 us/op
Iteration   5: 7020.674 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.canonicalize_induction_var":
  6860.822 ±(99.9%) 272.603 us/op [Average]
  (min, avg, max) = (6504.628, 6860.822, 7055.894), stdev = 254.993
  CI (99.9%): [6588.219, 7133.425] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt     Score     Error  Units
CanonicalizeInductionVariableBenchmark.baseline                    avgt   15  6266.382 ± 256.445  us/op
CanonicalizeInductionVariableBenchmark.canonicalize_induction_var  avgt   15  6860.822 ± 272.603  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/CanonicalizeInductionVariableBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LoopFusionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LoopFusionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.baseline
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 394.728 us/op
# Warmup Iteration   2: 395.267 us/op
# Warmup Iteration   3: 396.172 us/op
# Warmup Iteration   4: 397.317 us/op
# Warmup Iteration   5: 399.381 us/op
Iteration   1: 396.995 us/op
Iteration   2: 396.724 us/op
Iteration   3: 396.784 us/op
Iteration   4: 396.423 us/op
Iteration   5: 396.385 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 401.403 us/op
# Warmup Iteration   2: 399.612 us/op
# Warmup Iteration   3: 399.442 us/op
# Warmup Iteration   4: 399.170 us/op
# Warmup Iteration   5: 401.363 us/op
Iteration   1: 399.782 us/op
Iteration   2: 399.636 us/op
Iteration   3: 399.755 us/op
Iteration   4: 399.790 us/op
Iteration   5: 399.575 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 371.653 us/op
# Warmup Iteration   2: 371.172 us/op
# Warmup Iteration   3: 371.279 us/op
# Warmup Iteration   4: 371.083 us/op
# Warmup Iteration   5: 371.922 us/op
Iteration   1: 371.004 us/op
Iteration   2: 371.006 us/op
Iteration   3: 370.985 us/op
Iteration   4: 371.080 us/op
Iteration   5: 371.023 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.baseline":
  389.130 ±(99.9%) 14.238 us/op [Average]
  (min, avg, max) = (370.985, 389.130, 399.790), stdev = 13.319
  CI (99.9%): [374.892, 403.368] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.loop_fusion
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 212.128 us/op
# Warmup Iteration   2: 211.335 us/op
# Warmup Iteration   3: 211.015 us/op
# Warmup Iteration   4: 210.442 us/op
# Warmup Iteration   5: 210.355 us/op
Iteration   1: 210.265 us/op
Iteration   2: 210.287 us/op
Iteration   3: 210.499 us/op
Iteration   4: 210.234 us/op
Iteration   5: 210.344 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 193.304 us/op
# Warmup Iteration   2: 192.387 us/op
# Warmup Iteration   3: 218.761 us/op
# Warmup Iteration   4: 216.876 us/op
# Warmup Iteration   5: 215.592 us/op
Iteration   1: 215.173 us/op
Iteration   2: 215.281 us/op
Iteration   3: 214.702 us/op
Iteration   4: 214.768 us/op
Iteration   5: 214.022 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 193.016 us/op
# Warmup Iteration   2: 192.883 us/op
# Warmup Iteration   3: 193.164 us/op
# Warmup Iteration   4: 193.540 us/op
# Warmup Iteration   5: 194.340 us/op
Iteration   1: 194.728 us/op
Iteration   2: 194.700 us/op
Iteration   3: 195.045 us/op
Iteration   4: 195.213 us/op
Iteration   5: 194.329 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.loop_fusion":
  206.639 ±(99.9%) 9.485 us/op [Average]
  (min, avg, max) = (194.329, 206.639, 215.281), stdev = 8.872
  CI (99.9%): [197.154, 216.124] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                        (size)  Mode  Cnt    Score    Error  Units
LoopFusionBenchmark.baseline     262144  avgt   15  389.130 ± 14.238  us/op
LoopFusionBenchmark.loop_fusion  262144  avgt   15  206.639 ±  9.485  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LoopFusionBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LoopInterchangeBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LoopInterchangeBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.loop
# Parameters: (size = 512)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 409.218 us/op
# Warmup Iteration   2: 402.701 us/op
# Warmup Iteration   3: 400.029 us/op
# Warmup Iteration   4: 398.452 us/op
# Warmup Iteration   5: 398.856 us/op
Iteration   1: 398.864 us/op
Iteration   2: 398.135 us/op
Iteration   3: 398.025 us/op
Iteration   4: 398.390 us/op
Iteration   5: 398.304 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 393.915 us/op
# Warmup Iteration   2: 393.633 us/op
# Warmup Iteration   3: 393.360 us/op
# Warmup Iteration   4: 392.760 us/op
# Warmup Iteration   5: 393.152 us/op
Iteration   1: 394.260 us/op
Iteration   2: 394.079 us/op
Iteration   3: 393.297 us/op
Iteration   4: 393.345 us/op
Iteration   5: 381.832 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 392.338 us/op
# Warmup Iteration   2: 392.326 us/op
# Warmup Iteration   3: 390.837 us/op
# Warmup Iteration   4: 390.456 us/op
# Warmup Iteration   5: 391.537 us/op
Iteration   1: 391.416 us/op
Iteration   2: 391.505 us/op
Iteration   3: 391.246 us/op
Iteration   4: 391.391 us/op
Iteration   5: 391.141 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.loop":
  393.682 ±(99.9%) 4.762 us/op [Average]
  (min, avg, max) = (381.832, 393.682, 398.864), stdev = 4.454
  CI (99.9%): [388.920, 398.444] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.manual_interchange
# Parameters: (size = 512)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 90.088 us/op
# Warmup Iteration   2: 89.889 us/op
# Warmup Iteration   3: 89.814 us/op
# Warmup Iteration   4: 89.874 us/op
# Warmup Iteration   5: 89.774 us/op
Iteration   1: 89.807 us/op
Iteration   2: 89.767 us/op
Iteration   3: 89.768 us/op
Iteration   4: 89.668 us/op
Iteration   5: 89.636 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 80.124 us/op
# Warmup Iteration   2: 80.423 us/op
# Warmup Iteration   3: 81.100 us/op
# Warmup Iteration   4: 81.360 us/op
# Warmup Iteration   5: 81.376 us/op
Iteration   1: 81.485 us/op
Iteration   2: 81.486 us/op
Iteration   3: 81.562 us/op
Iteration   4: 81.524 us/op
Iteration   5: 81.539 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 81.376 us/op
# Warmup Iteration   2: 81.463 us/op
# Warmup Iteration   3: 81.517 us/op
# Warmup Iteration   4: 81.478 us/op
# Warmup Iteration   5: 81.653 us/op
Iteration   1: 81.537 us/op
Iteration   2: 81.512 us/op
Iteration   3: 81.580 us/op
Iteration   4: 81.691 us/op
Iteration   5: 81.643 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.manual_interchange":
  84.280 ±(99.9%) 4.264 us/op [Average]
  (min, avg, max) = (81.485, 84.280, 89.807), stdev = 3.989
  CI (99.9%): [80.016, 88.545] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (size)  Mode  Cnt    Score   Error  Units
LoopInterchangeBenchmark.loop                   512  avgt   15  393.682 ± 4.762  us/op
LoopInterchangeBenchmark.manual_interchange     512  avgt   15   84.280 ± 4.264  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LoopInterchangeBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LoopInvariantCodeMotionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LoopInvariantCodeMotionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.loop_with_invariant_code
# Parameters: (iterations = 16384, value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 2811.818 us/op
# Warmup Iteration   2: 2809.010 us/op
# Warmup Iteration   3: 2807.807 us/op
# Warmup Iteration   4: 2808.481 us/op
# Warmup Iteration   5: 2807.360 us/op
Iteration   1: 2807.540 us/op
Iteration   2: 2807.110 us/op
Iteration   3: 2807.564 us/op
Iteration   4: 2807.272 us/op
Iteration   5: 3029.486 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3023.880 us/op
# Warmup Iteration   2: 2807.532 us/op
# Warmup Iteration   3: 2807.427 us/op
# Warmup Iteration   4: 2806.680 us/op
# Warmup Iteration   5: 2806.702 us/op
Iteration   1: 2808.840 us/op
Iteration   2: 2806.948 us/op
Iteration   3: 2806.965 us/op
Iteration   4: 2807.380 us/op
Iteration   5: 2806.964 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 2808.138 us/op
# Warmup Iteration   2: 3051.046 us/op
# Warmup Iteration   3: 3034.866 us/op
# Warmup Iteration   4: 3025.972 us/op
# Warmup Iteration   5: 3021.278 us/op
Iteration   1: 3020.697 us/op
Iteration   2: 3016.105 us/op
Iteration   3: 3015.105 us/op
Iteration   4: 3013.280 us/op
Iteration   5: 3014.813 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.loop_with_invariant_code":
  2891.738 ±(99.9%) 114.371 us/op [Average]
  (min, avg, max) = (2806.948, 2891.738, 3029.486), stdev = 106.982
  CI (99.9%): [2777.367, 3006.108] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.manual_hoisting_and_sinking
# Parameters: (iterations = 16384, value = 42)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 784.189 us/op
# Warmup Iteration   2: 783.044 us/op
# Warmup Iteration   3: 783.174 us/op
# Warmup Iteration   4: 783.153 us/op
# Warmup Iteration   5: 783.035 us/op
Iteration   1: 782.961 us/op
Iteration   2: 782.999 us/op
Iteration   3: 782.985 us/op
Iteration   4: 782.565 us/op
Iteration   5: 783.413 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 810.163 us/op
# Warmup Iteration   2: 824.062 us/op
# Warmup Iteration   3: 823.085 us/op
# Warmup Iteration   4: 822.527 us/op
# Warmup Iteration   5: 822.085 us/op
Iteration   1: 821.926 us/op
Iteration   2: 821.490 us/op
Iteration   3: 820.099 us/op
Iteration   4: 820.301 us/op
Iteration   5: 821.017 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 802.513 us/op
# Warmup Iteration   2: 803.350 us/op
# Warmup Iteration   3: 802.712 us/op
# Warmup Iteration   4: 803.861 us/op
# Warmup Iteration   5: 803.514 us/op
Iteration   1: 804.016 us/op
Iteration   2: 802.831 us/op
Iteration   3: 804.013 us/op
Iteration   4: 804.761 us/op
Iteration   5: 805.924 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.manual_hoisting_and_sinking":
  802.753 ±(99.9%) 17.221 us/op [Average]
  (min, avg, max) = (782.565, 802.753, 821.926), stdev = 16.108
  CI (99.9%): [785.533, 819.974] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (iterations)  (value)  Mode  Cnt     Score     Error  Units
LoopInvariantCodeMotionBenchmark.loop_with_invariant_code            16384       42  avgt   15  2891.738 ± 114.371  us/op
LoopInvariantCodeMotionBenchmark.manual_hoisting_and_sinking         16384       42  avgt   15   802.753 ±  17.221  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LoopInvariantCodeMotionBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LoopReductionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LoopReductionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.baseline
# Parameters: (iterations = 1048576, offset = 128)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.544 ns/op
# Warmup Iteration   2: 0.547 ns/op
# Warmup Iteration   3: 0.553 ns/op
# Warmup Iteration   4: 0.555 ns/op
# Warmup Iteration   5: 0.554 ns/op
Iteration   1: 0.556 ns/op
Iteration   2: 0.556 ns/op
Iteration   3: 0.555 ns/op
Iteration   4: 0.555 ns/op
Iteration   5: 0.553 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 0.549 ns/op
# Warmup Iteration   2: 0.548 ns/op
# Warmup Iteration   3: 0.555 ns/op
# Warmup Iteration   4: 0.555 ns/op
# Warmup Iteration   5: 0.556 ns/op
Iteration   1: 0.556 ns/op
Iteration   2: 0.554 ns/op
Iteration   3: 0.554 ns/op
Iteration   4: 0.555 ns/op
Iteration   5: 0.555 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 0.549 ns/op
# Warmup Iteration   2: 0.550 ns/op
# Warmup Iteration   3: 0.555 ns/op
# Warmup Iteration   4: 0.555 ns/op
# Warmup Iteration   5: 0.555 ns/op
Iteration   1: 0.557 ns/op
Iteration   2: 0.554 ns/op
Iteration   3: 0.556 ns/op
Iteration   4: 0.557 ns/op
Iteration   5: 0.554 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.baseline":
  0.555 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.553, 0.555, 0.557), stdev = 0.001
  CI (99.9%): [0.554, 0.556] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.loop_reduction
# Parameters: (iterations = 1048576, offset = 128)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.372 ns/op
# Warmup Iteration   2: 2.391 ns/op
# Warmup Iteration   3: 2.218 ns/op
# Warmup Iteration   4: 2.207 ns/op
# Warmup Iteration   5: 2.200 ns/op
Iteration   1: 2.199 ns/op
Iteration   2: 2.197 ns/op
Iteration   3: 2.192 ns/op
Iteration   4: 2.187 ns/op
Iteration   5: 2.193 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.368 ns/op
# Warmup Iteration   2: 2.402 ns/op
# Warmup Iteration   3: 2.242 ns/op
# Warmup Iteration   4: 2.240 ns/op
# Warmup Iteration   5: 2.236 ns/op
Iteration   1: 2.237 ns/op
Iteration   2: 2.232 ns/op
Iteration   3: 2.230 ns/op
Iteration   4: 2.232 ns/op
Iteration   5: 2.231 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.352 ns/op
# Warmup Iteration   2: 2.393 ns/op
# Warmup Iteration   3: 2.227 ns/op
# Warmup Iteration   4: 2.227 ns/op
# Warmup Iteration   5: 2.223 ns/op
Iteration   1: 2.222 ns/op
Iteration   2: 2.224 ns/op
Iteration   3: 2.222 ns/op
Iteration   4: 2.220 ns/op
Iteration   5: 2.216 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.loop_reduction":
  2.216 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (2.187, 2.216, 2.237), stdev = 0.017
  CI (99.9%): [2.197, 2.234] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (iterations)  (offset)  Mode  Cnt  Score   Error  Units
LoopReductionBenchmark.baseline             1048576       128  avgt   15  0.555 ± 0.001  ns/op
LoopReductionBenchmark.loop_reduction       1048576       128  avgt   15  2.216 ± 0.018  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LoopReductionBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LoopUnswitchBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LoopUnswitchBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.baseline
# Parameters: (magicNumber = 64, size = 262144)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 424.528 us/op
# Warmup Iteration   2: 426.087 us/op
# Warmup Iteration   3: 417.686 us/op
# Warmup Iteration   4: 418.649 us/op
# Warmup Iteration   5: 418.782 us/op
Iteration   1: 418.454 us/op
Iteration   2: 387.974 us/op
Iteration   3: 388.023 us/op
Iteration   4: 388.001 us/op
Iteration   5: 388.224 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 382.856 us/op
# Warmup Iteration   2: 382.205 us/op
# Warmup Iteration   3: 382.696 us/op
# Warmup Iteration   4: 383.040 us/op
# Warmup Iteration   5: 383.802 us/op
Iteration   1: 383.965 us/op
Iteration   2: 384.234 us/op
Iteration   3: 383.684 us/op
Iteration   4: 384.193 us/op
Iteration   5: 386.061 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 437.820 us/op
# Warmup Iteration   2: 432.296 us/op
# Warmup Iteration   3: 428.700 us/op
# Warmup Iteration   4: 427.629 us/op
# Warmup Iteration   5: 427.194 us/op
Iteration   1: 427.075 us/op
Iteration   2: 426.628 us/op
Iteration   3: 426.610 us/op
Iteration   4: 425.845 us/op
Iteration   5: 425.889 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.baseline":
  401.657 ±(99.9%) 21.333 us/op [Average]
  (min, avg, max) = (383.684, 401.657, 427.075), stdev = 19.954
  CI (99.9%): [380.325, 422.990] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.loop_unswitch
# Parameters: (magicNumber = 64, size = 262144)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 1119.195 us/op
# Warmup Iteration   2: 1125.727 us/op
# Warmup Iteration   3: 1131.232 us/op
# Warmup Iteration   4: 1134.323 us/op
# Warmup Iteration   5: 1135.671 us/op
Iteration   1: 1138.707 us/op
Iteration   2: 1138.877 us/op
Iteration   3: 1139.573 us/op
Iteration   4: 1140.127 us/op
Iteration   5: 1140.246 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 1276.754 us/op
# Warmup Iteration   2: 1261.102 us/op
# Warmup Iteration   3: 1257.077 us/op
# Warmup Iteration   4: 1254.719 us/op
# Warmup Iteration   5: 1253.159 us/op
Iteration   1: 1252.647 us/op
Iteration   2: 1250.278 us/op
Iteration   3: 1250.074 us/op
Iteration   4: 1247.584 us/op
Iteration   5: 1248.364 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 1272.059 us/op
# Warmup Iteration   2: 1270.912 us/op
# Warmup Iteration   3: 1147.525 us/op
# Warmup Iteration   4: 1153.604 us/op
# Warmup Iteration   5: 1154.695 us/op
Iteration   1: 1155.006 us/op
Iteration   2: 1156.085 us/op
Iteration   3: 1157.010 us/op
Iteration   4: 1158.849 us/op
Iteration   5: 1160.653 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.loop_unswitch":
  1182.272 ±(99.9%) 53.482 us/op [Average]
  (min, avg, max) = (1138.707, 1182.272, 1252.647), stdev = 50.027
  CI (99.9%): [1128.790, 1235.754] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            (magicNumber)  (size)  Mode  Cnt     Score    Error  Units
LoopUnswitchBenchmark.baseline                  64  262144  avgt   15   401.657 ± 21.333  us/op
LoopUnswitchBenchmark.loop_unswitch             64  262144  avgt   15  1182.272 ± 53.482  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LoopUnswitchBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*ScalarEvolutionAndLoopOptimizationBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ScalarEvolutionAndLoopOptimizationBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.reduction_formula
# Parameters: (size = 16384)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.788 ns/op
# Warmup Iteration   2: 3.170 ns/op
# Warmup Iteration   3: 2.867 ns/op
# Warmup Iteration   4: 2.857 ns/op
# Warmup Iteration   5: 2.840 ns/op
Iteration   1: 2.831 ns/op
Iteration   2: 2.829 ns/op
Iteration   3: 2.827 ns/op
Iteration   4: 2.823 ns/op
Iteration   5: 2.825 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.083 ns/op
# Warmup Iteration   2: 3.100 ns/op
# Warmup Iteration   3: 2.825 ns/op
# Warmup Iteration   4: 2.829 ns/op
# Warmup Iteration   5: 2.831 ns/op
Iteration   1: 2.837 ns/op
Iteration   2: 2.829 ns/op
Iteration   3: 2.830 ns/op
Iteration   4: 2.831 ns/op
Iteration   5: 2.829 ns/op

# Run progress: 33.33% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 3.032 ns/op
# Warmup Iteration   2: 3.051 ns/op
# Warmup Iteration   3: 2.783 ns/op
# Warmup Iteration   4: 2.787 ns/op
# Warmup Iteration   5: 2.786 ns/op
Iteration   1: 2.786 ns/op
Iteration   2: 2.782 ns/op
Iteration   3: 2.785 ns/op
Iteration   4: 2.780 ns/op
Iteration   5: 2.781 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.reduction_formula":
  2.814 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (2.780, 2.814, 2.837), stdev = 0.023
  CI (99.9%): [2.789, 2.838] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.sum_from_0_to_N
# Parameters: (size = 16384)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 4415.724 ns/op
# Warmup Iteration   2: 4416.463 ns/op
# Warmup Iteration   3: 4412.825 ns/op
# Warmup Iteration   4: 4413.631 ns/op
# Warmup Iteration   5: 4413.376 ns/op
Iteration   1: 4413.127 ns/op
Iteration   2: 4412.191 ns/op
Iteration   3: 4412.223 ns/op
Iteration   4: 4412.442 ns/op
Iteration   5: 4413.417 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 4415.837 ns/op
# Warmup Iteration   2: 4415.272 ns/op
# Warmup Iteration   3: 4412.000 ns/op
# Warmup Iteration   4: 4411.799 ns/op
# Warmup Iteration   5: 4412.491 ns/op
Iteration   1: 4413.922 ns/op
Iteration   2: 4412.086 ns/op
Iteration   3: 4411.790 ns/op
Iteration   4: 4411.885 ns/op
Iteration   5: 4412.131 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 4415.681 ns/op
# Warmup Iteration   2: 4416.178 ns/op
# Warmup Iteration   3: 4413.533 ns/op
# Warmup Iteration   4: 4412.862 ns/op
# Warmup Iteration   5: 4413.391 ns/op
Iteration   1: 4413.331 ns/op
Iteration   2: 4412.781 ns/op
Iteration   3: 4414.388 ns/op
Iteration   4: 4412.768 ns/op
Iteration   5: 4413.311 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.sum_from_0_to_N":
  4412.786 ±(99.9%) 0.831 ns/op [Average]
  (min, avg, max) = (4411.790, 4412.786, 4414.388), stdev = 0.777
  CI (99.9%): [4411.955, 4413.617] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (size)  Mode  Cnt     Score   Error  Units
ScalarEvolutionAndLoopOptimizationBenchmark.reduction_formula   16384  avgt   15     2.814 ± 0.024  ns/op
ScalarEvolutionAndLoopOptimizationBenchmark.sum_from_0_to_N     16384  avgt   15  4412.786 ± 0.831  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/ScalarEvolutionAndLoopOptimizationBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*StraightenCodeBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/StraightenCodeBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_int
# Parameters: (size = 65536)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 260.633 us/op
# Warmup Iteration   2: 261.239 us/op
# Warmup Iteration   3: 259.858 us/op
# Warmup Iteration   4: 253.848 us/op
# Warmup Iteration   5: 254.035 us/op
Iteration   1: 254.020 us/op
Iteration   2: 253.442 us/op
Iteration   3: 253.449 us/op
Iteration   4: 253.471 us/op
Iteration   5: 253.469 us/op

# Run progress: 5.56% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 245.623 us/op
# Warmup Iteration   2: 245.406 us/op
# Warmup Iteration   3: 244.193 us/op
# Warmup Iteration   4: 241.380 us/op
# Warmup Iteration   5: 241.396 us/op
Iteration   1: 241.527 us/op
Iteration   2: 241.472 us/op
Iteration   3: 241.366 us/op
Iteration   4: 241.400 us/op
Iteration   5: 241.392 us/op

# Run progress: 11.11% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 266.076 us/op
# Warmup Iteration   2: 265.124 us/op
# Warmup Iteration   3: 263.533 us/op
# Warmup Iteration   4: 255.939 us/op
# Warmup Iteration   5: 255.395 us/op
Iteration   1: 256.020 us/op
Iteration   2: 255.427 us/op
Iteration   3: 255.100 us/op
Iteration   4: 255.592 us/op
Iteration   5: 255.056 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_int":
  250.147 ±(99.9%) 6.877 us/op [Average]
  (min, avg, max) = (241.366, 250.147, 256.020), stdev = 6.433
  CI (99.9%): [243.270, 257.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_long
# Parameters: (size = 65536)

# Run progress: 16.67% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 249.662 us/op
# Warmup Iteration   2: 248.669 us/op
# Warmup Iteration   3: 250.331 us/op
# Warmup Iteration   4: 261.943 us/op
# Warmup Iteration   5: 261.902 us/op
Iteration   1: 256.707 us/op
Iteration   2: 257.031 us/op
Iteration   3: 257.384 us/op
Iteration   4: 257.090 us/op
Iteration   5: 257.228 us/op

# Run progress: 22.22% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 260.779 us/op
# Warmup Iteration   2: 259.804 us/op
# Warmup Iteration   3: 260.319 us/op
# Warmup Iteration   4: 260.572 us/op
# Warmup Iteration   5: 260.294 us/op
Iteration   1: 260.687 us/op
Iteration   2: 260.662 us/op
Iteration   3: 260.494 us/op
Iteration   4: 260.395 us/op
Iteration   5: 260.262 us/op

# Run progress: 27.78% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 240.000 us/op
# Warmup Iteration   2: 239.748 us/op
# Warmup Iteration   3: 241.650 us/op
# Warmup Iteration   4: 241.641 us/op
# Warmup Iteration   5: 241.646 us/op
Iteration   1: 241.651 us/op
Iteration   2: 241.756 us/op
Iteration   3: 241.691 us/op
Iteration   4: 241.652 us/op
Iteration   5: 241.635 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_long":
  253.088 ±(99.9%) 9.063 us/op [Average]
  (min, avg, max) = (241.635, 253.088, 260.687), stdev = 8.478
  CI (99.9%): [244.025, 262.151] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_int
# Parameters: (size = 65536)

# Run progress: 33.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 239.426 us/op
# Warmup Iteration   2: 239.418 us/op
# Warmup Iteration   3: 247.996 us/op
# Warmup Iteration   4: 264.586 us/op
# Warmup Iteration   5: 264.693 us/op
Iteration   1: 264.718 us/op
Iteration   2: 264.722 us/op
Iteration   3: 264.777 us/op
Iteration   4: 264.726 us/op
Iteration   5: 264.764 us/op

# Run progress: 38.89% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 236.760 us/op
# Warmup Iteration   2: 236.388 us/op
# Warmup Iteration   3: 243.664 us/op
# Warmup Iteration   4: 261.533 us/op
# Warmup Iteration   5: 261.447 us/op
Iteration   1: 261.719 us/op
Iteration   2: 262.781 us/op
Iteration   3: 261.787 us/op
Iteration   4: 261.872 us/op
Iteration   5: 262.012 us/op

# Run progress: 44.44% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 239.679 us/op
# Warmup Iteration   2: 239.112 us/op
# Warmup Iteration   3: 245.298 us/op
# Warmup Iteration   4: 265.873 us/op
# Warmup Iteration   5: 266.518 us/op
Iteration   1: 265.627 us/op
Iteration   2: 266.671 us/op
Iteration   3: 266.240 us/op
Iteration   4: 265.852 us/op
Iteration   5: 265.952 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_int":
  264.281 ±(99.9%) 1.888 us/op [Average]
  (min, avg, max) = (261.719, 264.281, 266.671), stdev = 1.766
  CI (99.9%): [262.393, 266.169] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_long
# Parameters: (size = 65536)

# Run progress: 50.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 253.297 us/op
# Warmup Iteration   2: 228.695 us/op
# Warmup Iteration   3: 227.754 us/op
# Warmup Iteration   4: 223.245 us/op
# Warmup Iteration   5: 223.214 us/op
Iteration   1: 223.230 us/op
Iteration   2: 223.212 us/op
Iteration   3: 223.660 us/op
Iteration   4: 223.302 us/op
Iteration   5: 223.301 us/op

# Run progress: 55.56% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 235.018 us/op
# Warmup Iteration   2: 216.649 us/op
# Warmup Iteration   3: 220.929 us/op
# Warmup Iteration   4: 223.258 us/op
# Warmup Iteration   5: 223.498 us/op
Iteration   1: 223.240 us/op
Iteration   2: 223.357 us/op
Iteration   3: 223.554 us/op
Iteration   4: 223.228 us/op
Iteration   5: 223.212 us/op

# Run progress: 61.11% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 247.854 us/op
# Warmup Iteration   2: 246.746 us/op
# Warmup Iteration   3: 244.817 us/op
# Warmup Iteration   4: 239.225 us/op
# Warmup Iteration   5: 239.222 us/op
Iteration   1: 238.738 us/op
Iteration   2: 239.541 us/op
Iteration   3: 239.070 us/op
Iteration   4: 238.912 us/op
Iteration   5: 238.923 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_long":
  228.565 ±(99.9%) 8.196 us/op [Average]
  (min, avg, max) = (223.212, 228.565, 239.541), stdev = 7.667
  CI (99.9%): [220.369, 236.762] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_int
# Parameters: (size = 65536)

# Run progress: 66.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 229.071 us/op
# Warmup Iteration   2: 229.987 us/op
# Warmup Iteration   3: 247.498 us/op
# Warmup Iteration   4: 228.852 us/op
# Warmup Iteration   5: 228.097 us/op
Iteration   1: 227.357 us/op
Iteration   2: 227.326 us/op
Iteration   3: 227.342 us/op
Iteration   4: 227.341 us/op
Iteration   5: 227.588 us/op

# Run progress: 72.22% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 252.089 us/op
# Warmup Iteration   2: 249.676 us/op
# Warmup Iteration   3: 250.844 us/op
# Warmup Iteration   4: 246.617 us/op
# Warmup Iteration   5: 246.137 us/op
Iteration   1: 245.892 us/op
Iteration   2: 245.568 us/op
Iteration   3: 245.494 us/op
Iteration   4: 245.301 us/op
Iteration   5: 245.569 us/op

# Run progress: 77.78% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 230.115 us/op
# Warmup Iteration   2: 230.114 us/op
# Warmup Iteration   3: 245.989 us/op
# Warmup Iteration   4: 227.588 us/op
# Warmup Iteration   5: 227.626 us/op
Iteration   1: 227.610 us/op
Iteration   2: 227.704 us/op
Iteration   3: 227.689 us/op
Iteration   4: 227.644 us/op
Iteration   5: 227.628 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_int":
  233.537 ±(99.9%) 9.413 us/op [Average]
  (min, avg, max) = (227.326, 233.537, 245.892), stdev = 8.805
  CI (99.9%): [224.123, 242.950] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_long
# Parameters: (size = 65536)

# Run progress: 83.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 103.405 us/op
# Warmup Iteration   2: 108.493 us/op
# Warmup Iteration   3: 104.958 us/op
# Warmup Iteration   4: 104.775 us/op
# Warmup Iteration   5: 104.551 us/op
Iteration   1: 104.612 us/op
Iteration   2: 104.471 us/op
Iteration   3: 104.372 us/op
Iteration   4: 104.385 us/op
Iteration   5: 104.392 us/op

# Run progress: 88.89% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 90.860 us/op
# Warmup Iteration   2: 95.919 us/op
# Warmup Iteration   3: 94.832 us/op
# Warmup Iteration   4: 95.014 us/op
# Warmup Iteration   5: 95.059 us/op
Iteration   1: 95.054 us/op
Iteration   2: 95.048 us/op
Iteration   3: 95.044 us/op
Iteration   4: 95.050 us/op
Iteration   5: 95.024 us/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 105.787 us/op
# Warmup Iteration   2: 96.384 us/op
# Warmup Iteration   3: 94.529 us/op
# Warmup Iteration   4: 94.771 us/op
# Warmup Iteration   5: 94.811 us/op
Iteration   1: 94.830 us/op
Iteration   2: 94.965 us/op
Iteration   3: 94.833 us/op
Iteration   4: 94.892 us/op
Iteration   5: 94.919 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_long":
  98.126 ±(99.9%) 4.947 us/op [Average]
  (min, avg, max) = (94.830, 98.126, 104.612), stdev = 4.627
  CI (99.9%): [93.180, 103.073] (assumes normal distribution)


# Run complete. Total time: 00:30:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  (size)  Mode  Cnt    Score   Error  Units
StraightenCodeBenchmark.straighten_1_int    65536  avgt   15  250.147 ± 6.877  us/op
StraightenCodeBenchmark.straighten_1_long   65536  avgt   15  253.088 ± 9.063  us/op
StraightenCodeBenchmark.straighten_2_int    65536  avgt   15  264.281 ± 1.888  us/op
StraightenCodeBenchmark.straighten_2_long   65536  avgt   15  228.565 ± 8.196  us/op
StraightenCodeBenchmark.straighten_3_int    65536  avgt   15  233.537 ± 9.413  us/op
StraightenCodeBenchmark.straighten_3_long   65536  avgt   15   98.126 ± 4.947  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/StraightenCodeBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*StrengthReductionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/StrengthReductionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.addition
# Parameters: (heavyComputation = true, value = 179426549)

# Run progress: 0.00% complete, ETA 00:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 10.851 ns/op
# Warmup Iteration   2: 10.732 ns/op
# Warmup Iteration   3: 10.440 ns/op
# Warmup Iteration   4: 10.369 ns/op
# Warmup Iteration   5: 10.332 ns/op
Iteration   1: 10.325 ns/op
Iteration   2: 10.315 ns/op
Iteration   3: 10.312 ns/op
Iteration   4: 10.320 ns/op
Iteration   5: 10.314 ns/op

# Run progress: 11.11% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 9.920 ns/op
# Warmup Iteration   2: 9.915 ns/op
# Warmup Iteration   3: 9.786 ns/op
# Warmup Iteration   4: 9.783 ns/op
# Warmup Iteration   5: 9.787 ns/op
Iteration   1: 9.785 ns/op
Iteration   2: 9.787 ns/op
Iteration   3: 9.786 ns/op
Iteration   4: 9.784 ns/op
Iteration   5: 9.768 ns/op

# Run progress: 22.22% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 9.916 ns/op
# Warmup Iteration   2: 9.913 ns/op
# Warmup Iteration   3: 9.776 ns/op
# Warmup Iteration   4: 9.784 ns/op
# Warmup Iteration   5: 9.772 ns/op
Iteration   1: 9.781 ns/op
Iteration   2: 9.772 ns/op
Iteration   3: 9.766 ns/op
Iteration   4: 9.784 ns/op
Iteration   5: 9.781 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.addition":
  9.959 ±(99.9%) 0.281 ns/op [Average]
  (min, avg, max) = (9.766, 9.959, 10.325), stdev = 0.263
  CI (99.9%): [9.678, 10.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.multiplication
# Parameters: (heavyComputation = true, value = 179426549)

# Run progress: 33.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 2.519 ns/op
# Warmup Iteration   2: 2.508 ns/op
# Warmup Iteration   3: 2.168 ns/op
# Warmup Iteration   4: 2.164 ns/op
# Warmup Iteration   5: 2.163 ns/op
Iteration   1: 2.158 ns/op
Iteration   2: 2.164 ns/op
Iteration   3: 2.157 ns/op
Iteration   4: 2.158 ns/op
Iteration   5: 2.160 ns/op

# Run progress: 44.44% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.222 ns/op
# Warmup Iteration   2: 2.251 ns/op
# Warmup Iteration   3: 1.963 ns/op
# Warmup Iteration   4: 1.963 ns/op
# Warmup Iteration   5: 1.967 ns/op
Iteration   1: 1.969 ns/op
Iteration   2: 1.967 ns/op
Iteration   3: 1.969 ns/op
Iteration   4: 1.969 ns/op
Iteration   5: 1.967 ns/op

# Run progress: 55.56% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.263 ns/op
# Warmup Iteration   2: 2.581 ns/op
# Warmup Iteration   3: 2.221 ns/op
# Warmup Iteration   4: 2.214 ns/op
# Warmup Iteration   5: 2.205 ns/op
Iteration   1: 2.198 ns/op
Iteration   2: 2.199 ns/op
Iteration   3: 2.194 ns/op
Iteration   4: 2.192 ns/op
Iteration   5: 2.193 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.multiplication":
  2.108 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (1.967, 2.108, 2.199), stdev = 0.103
  CI (99.9%): [1.998, 2.218] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.shift
# Parameters: (heavyComputation = true, value = 179426549)

# Run progress: 66.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.464 ns/op
# Warmup Iteration   2: 2.467 ns/op
# Warmup Iteration   3: 2.153 ns/op
# Warmup Iteration   4: 2.152 ns/op
# Warmup Iteration   5: 2.152 ns/op
Iteration   1: 2.152 ns/op
Iteration   2: 2.151 ns/op
Iteration   3: 2.151 ns/op
Iteration   4: 2.151 ns/op
Iteration   5: 2.152 ns/op

# Run progress: 77.78% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.527 ns/op
# Warmup Iteration   2: 2.524 ns/op
# Warmup Iteration   3: 2.194 ns/op
# Warmup Iteration   4: 2.192 ns/op
# Warmup Iteration   5: 2.193 ns/op
Iteration   1: 2.195 ns/op
Iteration   2: 2.193 ns/op
Iteration   3: 2.190 ns/op
Iteration   4: 2.188 ns/op
Iteration   5: 2.185 ns/op

# Run progress: 88.89% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.465 ns/op
# Warmup Iteration   2: 2.467 ns/op
# Warmup Iteration   3: 2.145 ns/op
# Warmup Iteration   4: 2.146 ns/op
# Warmup Iteration   5: 2.145 ns/op
Iteration   1: 2.143 ns/op
Iteration   2: 2.145 ns/op
Iteration   3: 2.143 ns/op
Iteration   4: 2.141 ns/op
Iteration   5: 2.142 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.shift":
  2.161 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (2.141, 2.161, 2.195), stdev = 0.022
  CI (99.9%): [2.138, 2.185] (assumes normal distribution)


# Run complete. Total time: 00:15:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  (heavyComputation)    (value)  Mode  Cnt  Score   Error  Units
StrengthReductionBenchmark.addition                      true  179426549  avgt   15  9.959 ± 0.281  ns/op
StrengthReductionBenchmark.multiplication                true  179426549  avgt   15  2.108 ± 0.110  ns/op
StrengthReductionBenchmark.shift                         true  179426549  avgt   15  2.161 ± 0.023  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/StrengthReductionBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*TailRecursionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/TailRecursionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -Xss20M
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_baseline
# Parameters: (param = 32768)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 18.143 us/op
# Warmup Iteration   2: 18.338 us/op
# Warmup Iteration   3: 17.881 us/op
# Warmup Iteration   4: 17.905 us/op
# Warmup Iteration   5: 17.911 us/op
Iteration   1: 17.922 us/op
Iteration   2: 17.940 us/op
Iteration   3: 17.961 us/op
Iteration   4: 17.971 us/op
Iteration   5: 17.960 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 18.416 us/op
# Warmup Iteration   2: 18.530 us/op
# Warmup Iteration   3: 17.973 us/op
# Warmup Iteration   4: 17.974 us/op
# Warmup Iteration   5: 17.962 us/op
Iteration   1: 17.964 us/op
Iteration   2: 17.960 us/op
Iteration   3: 17.965 us/op
Iteration   4: 17.955 us/op
Iteration   5: 17.959 us/op

# Run progress: 33.33% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 20.481 us/op
# Warmup Iteration   2: 20.026 us/op
# Warmup Iteration   3: 19.666 us/op
# Warmup Iteration   4: 19.625 us/op
# Warmup Iteration   5: 19.592 us/op
Iteration   1: 19.573 us/op
Iteration   2: 19.569 us/op
Iteration   3: 19.565 us/op
Iteration   4: 19.545 us/op
Iteration   5: 19.555 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_baseline":
  18.491 ±(99.9%) 0.838 us/op [Average]
  (min, avg, max) = (17.922, 18.491, 19.573), stdev = 0.784
  CI (99.9%): [17.653, 19.329] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -Xss20M
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_tail_recursive
# Parameters: (param = 32768)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 65.686 us/op
# Warmup Iteration   2: 65.727 us/op
# Warmup Iteration   3: 65.736 us/op
# Warmup Iteration   4: 65.724 us/op
# Warmup Iteration   5: 65.695 us/op
Iteration   1: 65.700 us/op
Iteration   2: 65.702 us/op
Iteration   3: 65.701 us/op
Iteration   4: 65.716 us/op
Iteration   5: 65.708 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 63.778 us/op
# Warmup Iteration   2: 63.652 us/op
# Warmup Iteration   3: 63.626 us/op
# Warmup Iteration   4: 63.616 us/op
# Warmup Iteration   5: 63.400 us/op
Iteration   1: 63.886 us/op
Iteration   2: 61.883 us/op
Iteration   3: 61.888 us/op
Iteration   4: 61.889 us/op
Iteration   5: 61.879 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 66.499 us/op
# Warmup Iteration   2: 64.853 us/op
# Warmup Iteration   3: 64.864 us/op
# Warmup Iteration   4: 64.830 us/op
# Warmup Iteration   5: 64.817 us/op
Iteration   1: 65.591 us/op
Iteration   2: 64.838 us/op
Iteration   3: 64.065 us/op
Iteration   4: 62.760 us/op
Iteration   5: 62.759 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_tail_recursive":
  63.998 ±(99.9%) 1.779 us/op [Average]
  (min, avg, max) = (61.879, 63.998, 65.716), stdev = 1.664
  CI (99.9%): [62.219, 65.777] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (param)  Mode  Cnt   Score   Error  Units
TailRecursionBenchmark.fibonacci_baseline          32768  avgt   15  18.491 ± 0.838  us/op
TailRecursionBenchmark.fibonacci_tail_recursive    32768  avgt   15  63.998 ± 1.779  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/TailRecursionBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LockCoarseningBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LockCoarseningBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.423 ns/op
# Warmup Iteration   2: 4.326 ns/op
# Warmup Iteration   3: 3.913 ns/op
# Warmup Iteration   4: 3.901 ns/op
# Warmup Iteration   5: 3.899 ns/op
Iteration   1: 3.895 ns/op
Iteration   2: 3.887 ns/op
Iteration   3: 3.892 ns/op
Iteration   4: 3.893 ns/op
Iteration   5: 3.886 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 4.455 ns/op
# Warmup Iteration   2: 4.362 ns/op
# Warmup Iteration   3: 3.964 ns/op
# Warmup Iteration   4: 3.963 ns/op
# Warmup Iteration   5: 3.958 ns/op
Iteration   1: 3.953 ns/op
Iteration   2: 3.953 ns/op
Iteration   3: 3.951 ns/op
Iteration   4: 3.950 ns/op
Iteration   5: 3.954 ns/op

# Run progress: 33.33% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 4.437 ns/op
# Warmup Iteration   2: 4.350 ns/op
# Warmup Iteration   3: 3.956 ns/op
# Warmup Iteration   4: 3.956 ns/op
# Warmup Iteration   5: 3.953 ns/op
Iteration   1: 3.951 ns/op
Iteration   2: 3.951 ns/op
Iteration   3: 3.951 ns/op
Iteration   4: 3.951 ns/op
Iteration   5: 3.950 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_baseline":
  3.931 ±(99.9%) 0.032 ns/op [Average]
  (min, avg, max) = (3.886, 3.931, 3.954), stdev = 0.030
  CI (99.9%): [3.899, 3.963] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_coarsening_10x
# Parameters: (value = 42)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.439 ns/op
# Warmup Iteration   2: 4.351 ns/op
# Warmup Iteration   3: 4.409 ns/op
# Warmup Iteration   4: 4.374 ns/op
# Warmup Iteration   5: 4.353 ns/op
Iteration   1: 4.335 ns/op
Iteration   2: 4.324 ns/op
Iteration   3: 4.316 ns/op
Iteration   4: 4.313 ns/op
Iteration   5: 4.312 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 4.249 ns/op
# Warmup Iteration   2: 4.209 ns/op
# Warmup Iteration   3: 3.839 ns/op
# Warmup Iteration   4: 3.842 ns/op
# Warmup Iteration   5: 3.843 ns/op
Iteration   1: 3.843 ns/op
Iteration   2: 3.843 ns/op
Iteration   3: 3.850 ns/op
Iteration   4: 3.843 ns/op
Iteration   5: 3.844 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 4.326 ns/op
# Warmup Iteration   2: 4.248 ns/op
# Warmup Iteration   3: 3.852 ns/op
# Warmup Iteration   4: 3.855 ns/op
# Warmup Iteration   5: 3.849 ns/op
Iteration   1: 3.855 ns/op
Iteration   2: 3.864 ns/op
Iteration   3: 3.866 ns/op
Iteration   4: 3.864 ns/op
Iteration   5: 3.862 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_coarsening_10x":
  4.009 ±(99.9%) 0.244 ns/op [Average]
  (min, avg, max) = (3.843, 4.009, 4.335), stdev = 0.228
  CI (99.9%): [3.765, 4.253] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (value)  Mode  Cnt  Score   Error  Units
LockCoarseningBenchmark.lock_baseline             42  avgt   15  3.931 ± 0.032  ns/op
LockCoarseningBenchmark.lock_coarsening_10x       42  avgt   15  4.009 ± 0.244  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LockCoarseningBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LockElisionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LockElisionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.241 ns/op
# Warmup Iteration   2: 3.248 ns/op
# Warmup Iteration   3: 3.083 ns/op
# Warmup Iteration   4: 3.072 ns/op
# Warmup Iteration   5: 3.069 ns/op
Iteration   1: 3.065 ns/op
Iteration   2: 3.063 ns/op
Iteration   3: 3.062 ns/op
Iteration   4: 3.058 ns/op
Iteration   5: 3.055 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.159 ns/op
# Warmup Iteration   2: 2.877 ns/op
# Warmup Iteration   3: 2.758 ns/op
# Warmup Iteration   4: 2.771 ns/op
# Warmup Iteration   5: 2.793 ns/op
Iteration   1: 2.777 ns/op
Iteration   2: 2.788 ns/op
Iteration   3: 2.795 ns/op
Iteration   4: 2.794 ns/op
Iteration   5: 2.796 ns/op

# Run progress: 33.33% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 3.288 ns/op
# Warmup Iteration   2: 3.312 ns/op
# Warmup Iteration   3: 3.123 ns/op
# Warmup Iteration   4: 3.115 ns/op
# Warmup Iteration   5: 3.124 ns/op
Iteration   1: 3.099 ns/op
Iteration   2: 3.098 ns/op
Iteration   3: 3.095 ns/op
Iteration   4: 3.094 ns/op
Iteration   5: 3.091 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_baseline":
  2.982 ±(99.9%) 0.151 ns/op [Average]
  (min, avg, max) = (2.777, 2.982, 3.099), stdev = 0.141
  CI (99.9%): [2.831, 3.133] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_elision_10x
# Parameters: (value = 42)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.199 ns/op
# Warmup Iteration   2: 3.251 ns/op
# Warmup Iteration   3: 3.094 ns/op
# Warmup Iteration   4: 3.094 ns/op
# Warmup Iteration   5: 3.113 ns/op
Iteration   1: 3.100 ns/op
Iteration   2: 3.094 ns/op
Iteration   3: 3.094 ns/op
Iteration   4: 3.094 ns/op
Iteration   5: 3.092 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.811 ns/op
# Warmup Iteration   2: 3.213 ns/op
# Warmup Iteration   3: 3.055 ns/op
# Warmup Iteration   4: 3.054 ns/op
# Warmup Iteration   5: 3.067 ns/op
Iteration   1: 3.055 ns/op
Iteration   2: 3.049 ns/op
Iteration   3: 3.049 ns/op
Iteration   4: 3.047 ns/op
Iteration   5: 3.046 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.817 ns/op
# Warmup Iteration   2: 2.880 ns/op
# Warmup Iteration   3: 2.752 ns/op
# Warmup Iteration   4: 2.754 ns/op
# Warmup Iteration   5: 2.755 ns/op
Iteration   1: 2.758 ns/op
Iteration   2: 2.760 ns/op
Iteration   3: 2.765 ns/op
Iteration   4: 2.765 ns/op
Iteration   5: 2.768 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_elision_10x":
  2.969 ±(99.9%) 0.162 ns/op [Average]
  (min, avg, max) = (2.758, 2.969, 3.100), stdev = 0.152
  CI (99.9%): [2.807, 3.132] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (value)  Mode  Cnt  Score   Error  Units
LockElisionBenchmark.lock_baseline          42  avgt   15  2.982 ± 0.151  ns/op
LockElisionBenchmark.lock_elision_10x       42  avgt   15  2.969 ± 0.162  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LockElisionBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*RecursiveLockBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/RecursiveLockBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.326 ns/op
# Warmup Iteration   2: 4.243 ns/op
# Warmup Iteration   3: 3.857 ns/op
# Warmup Iteration   4: 3.854 ns/op
# Warmup Iteration   5: 3.850 ns/op
Iteration   1: 3.858 ns/op
Iteration   2: 3.852 ns/op
Iteration   3: 3.860 ns/op
Iteration   4: 3.857 ns/op
Iteration   5: 3.853 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 4.969 ns/op
# Warmup Iteration   2: 4.827 ns/op
# Warmup Iteration   3: 4.357 ns/op
# Warmup Iteration   4: 4.335 ns/op
# Warmup Iteration   5: 4.322 ns/op
Iteration   1: 4.315 ns/op
Iteration   2: 4.309 ns/op
Iteration   3: 4.309 ns/op
Iteration   4: 4.306 ns/op
Iteration   5: 4.304 ns/op

# Run progress: 33.33% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 4.728 ns/op
# Warmup Iteration   2: 4.653 ns/op
# Warmup Iteration   3: 4.230 ns/op
# Warmup Iteration   4: 4.234 ns/op
# Warmup Iteration   5: 4.232 ns/op
Iteration   1: 4.234 ns/op
Iteration   2: 4.231 ns/op
Iteration   3: 4.229 ns/op
Iteration   4: 4.224 ns/op
Iteration   5: 4.218 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_baseline":
  4.131 ±(99.9%) 0.218 ns/op [Average]
  (min, avg, max) = (3.852, 4.131, 4.315), stdev = 0.204
  CI (99.9%): [3.913, 4.349] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_recursive_10x
# Parameters: (value = 42)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 288.595 ns/op
# Warmup Iteration   2: 287.197 ns/op
# Warmup Iteration   3: 294.213 ns/op
# Warmup Iteration   4: 292.469 ns/op
# Warmup Iteration   5: 293.065 ns/op
Iteration   1: 293.465 ns/op
Iteration   2: 293.087 ns/op
Iteration   3: 295.101 ns/op
Iteration   4: 294.746 ns/op
Iteration   5: 294.788 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 293.549 ns/op
# Warmup Iteration   2: 290.432 ns/op
# Warmup Iteration   3: 325.550 ns/op
# Warmup Iteration   4: 323.111 ns/op
# Warmup Iteration   5: 323.047 ns/op
Iteration   1: 323.130 ns/op
Iteration   2: 321.556 ns/op
Iteration   3: 320.708 ns/op
Iteration   4: 319.203 ns/op
Iteration   5: 287.641 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 326.864 ns/op
# Warmup Iteration   2: 321.086 ns/op
# Warmup Iteration   3: 324.246 ns/op
# Warmup Iteration   4: 323.667 ns/op
# Warmup Iteration   5: 322.521 ns/op
Iteration   1: 322.197 ns/op
Iteration   2: 322.994 ns/op
Iteration   3: 322.352 ns/op
Iteration   4: 323.039 ns/op
Iteration   5: 322.086 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_recursive_10x":
  310.406 ±(99.9%) 15.739 ns/op [Average]
  (min, avg, max) = (287.641, 310.406, 323.130), stdev = 14.723
  CI (99.9%): [294.667, 326.145] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  (value)  Mode  Cnt    Score    Error  Units
RecursiveLockBenchmark.lock_baseline            42  avgt   15    4.131 ±  0.218  ns/op
RecursiveLockBenchmark.lock_recursive_10x       42  avgt   15  310.406 ± 15.739  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/RecursiveLockBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*LocksBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/LocksBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_lock

# Run progress: 0.00% complete, ETA 00:35:00
# Fork: 1 of 3
# Warmup Iteration   1: 11021.075 ±(99.9%) 0.424 ns/op
# Warmup Iteration   2: 11261.331 ±(99.9%) 7.599 ns/op
# Warmup Iteration   3: 11183.134 ±(99.9%) 0.994 ns/op
# Warmup Iteration   4: 11286.534 ±(99.9%) 0.982 ns/op
# Warmup Iteration   5: 11322.863 ±(99.9%) 0.386 ns/op
Iteration   1: 11349.505 ±(99.9%) 0.113 ns/op
Iteration   2: 11304.917 ±(99.9%) 0.223 ns/op
Iteration   3: 11484.543 ±(99.9%) 0.987 ns/op
Iteration   4: 11534.968 ±(99.9%) 0.799 ns/op
Iteration   5: 11449.687 ±(99.9%) 0.187 ns/op

# Run progress: 4.76% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 11369.756 ±(99.9%) 0.997 ns/op
# Warmup Iteration   2: 11612.215 ±(99.9%) 0.295 ns/op
# Warmup Iteration   3: 11511.533 ±(99.9%) 0.440 ns/op
# Warmup Iteration   4: 11523.643 ±(99.9%) 0.114 ns/op
# Warmup Iteration   5: 11227.463 ±(99.9%) 0.584 ns/op
Iteration   1: 11230.020 ±(99.9%) 0.213 ns/op
Iteration   2: 11314.927 ±(99.9%) 0.235 ns/op
Iteration   3: 11544.311 ±(99.9%) 0.103 ns/op
Iteration   4: 11415.682 ±(99.9%) 0.202 ns/op
Iteration   5: 11350.887 ±(99.9%) 0.301 ns/op

# Run progress: 9.52% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 11282.991 ±(99.9%) 0.479 ns/op
# Warmup Iteration   2: 11361.180 ±(99.9%) 0.578 ns/op
# Warmup Iteration   3: 11445.078 ±(99.9%) 0.139 ns/op
# Warmup Iteration   4: 11780.851 ±(99.9%) 0.236 ns/op
# Warmup Iteration   5: 11620.507 ±(99.9%) 0.245 ns/op
Iteration   1: 11539.351 ±(99.9%) 0.142 ns/op
Iteration   2: 11667.255 ±(99.9%) 0.238 ns/op
Iteration   3: 11548.360 ±(99.9%) 0.127 ns/op
Iteration   4: 11540.225 ±(99.9%) 0.174 ns/op
Iteration   5: 11648.325 ±(99.9%) 0.066 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_lock":
  11461.531 ±(99.9%) 138.928 ns/op [Average]
  (min, avg, max) = (11230.020, 11461.531, 11667.255), stdev = 129.953
  CI (99.9%): [11322.603, 11600.459] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_read_write_lock

# Run progress: 14.29% complete, ETA 00:30:05
# Fork: 1 of 3
# Warmup Iteration   1: 23262.891 ±(99.9%) 8.302 ns/op
# Warmup Iteration   2: 23117.822 ±(99.9%) 0.767 ns/op
# Warmup Iteration   3: 22821.973 ±(99.9%) 1.045 ns/op
# Warmup Iteration   4: 22670.127 ±(99.9%) 0.648 ns/op
# Warmup Iteration   5: 22803.925 ±(99.9%) 8.915 ns/op
Iteration   1: 23179.286 ±(99.9%) 0.938 ns/op
Iteration   2: 23559.040 ±(99.9%) 0.436 ns/op
Iteration   3: 23004.849 ±(99.9%) 0.684 ns/op
Iteration   4: 22912.003 ±(99.9%) 6.751 ns/op
Iteration   5: 22848.647 ±(99.9%) 0.641 ns/op

# Run progress: 19.05% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 22823.968 ±(99.9%) 2.496 ns/op
# Warmup Iteration   2: 22693.312 ±(99.9%) 0.494 ns/op
# Warmup Iteration   3: 22756.860 ±(99.9%) 0.203 ns/op
# Warmup Iteration   4: 22799.560 ±(99.9%) 0.486 ns/op
# Warmup Iteration   5: 23300.306 ±(99.9%) 1.043 ns/op
Iteration   1: 22862.099 ±(99.9%) 1.454 ns/op
Iteration   2: 23031.585 ±(99.9%) 0.594 ns/op
Iteration   3: 23222.183 ±(99.9%) 0.581 ns/op
Iteration   4: 22797.185 ±(99.9%) 0.364 ns/op
Iteration   5: 22626.933 ±(99.9%) 0.280 ns/op

# Run progress: 23.81% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 23605.820 ±(99.9%) 3.568 ns/op
# Warmup Iteration   2: 23515.484 ±(99.9%) 0.638 ns/op
# Warmup Iteration   3: 23703.644 ±(99.9%) 0.853 ns/op
# Warmup Iteration   4: 23999.378 ±(99.9%) 0.753 ns/op
# Warmup Iteration   5: 23241.227 ±(99.9%) 2.715 ns/op
Iteration   1: 23650.189 ±(99.9%) 13.093 ns/op
Iteration   2: 23971.995 ±(99.9%) 1.134 ns/op
Iteration   3: 23754.297 ±(99.9%) 0.560 ns/op
Iteration   4: 22836.110 ±(99.9%) 0.656 ns/op
Iteration   5: 23493.314 ±(99.9%) 0.631 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_read_write_lock":
  23183.314 ±(99.9%) 435.913 ns/op [Average]
  (min, avg, max) = (22626.933, 23183.314, 23971.995), stdev = 407.753
  CI (99.9%): [22747.401, 23619.227] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_semaphore

# Run progress: 28.57% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 723.558 ±(99.9%) 788.724 ns/op
# Warmup Iteration   2: 727.259 ±(99.9%) 804.190 ns/op
# Warmup Iteration   3: 722.032 ±(99.9%) 808.581 ns/op
# Warmup Iteration   4: 722.942 ±(99.9%) 814.553 ns/op
# Warmup Iteration   5: 724.045 ±(99.9%) 841.515 ns/op
Iteration   1: 718.493 ±(99.9%) 873.517 ns/op
Iteration   2: 718.503 ±(99.9%) 881.321 ns/op
Iteration   3: 723.323 ±(99.9%) 814.180 ns/op
Iteration   4: 723.776 ±(99.9%) 815.733 ns/op
Iteration   5: 724.051 ±(99.9%) 817.524 ns/op

# Run progress: 33.33% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 688.804 ±(99.9%) 672.497 ns/op
# Warmup Iteration   2: 689.332 ±(99.9%) 651.767 ns/op
# Warmup Iteration   3: 685.467 ±(99.9%) 625.405 ns/op
# Warmup Iteration   4: 688.540 ±(99.9%) 639.785 ns/op
# Warmup Iteration   5: 689.047 ±(99.9%) 642.460 ns/op
Iteration   1: 689.729 ±(99.9%) 643.736 ns/op
Iteration   2: 696.472 ±(99.9%) 773.366 ns/op
Iteration   3: 698.314 ±(99.9%) 716.370 ns/op
Iteration   4: 695.792 ±(99.9%) 788.961 ns/op
Iteration   5: 696.956 ±(99.9%) 791.910 ns/op

# Run progress: 38.10% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 756.757 ±(99.9%) 574.300 ns/op
# Warmup Iteration   2: 759.153 ±(99.9%) 640.304 ns/op
# Warmup Iteration   3: 754.711 ±(99.9%) 624.326 ns/op
# Warmup Iteration   4: 754.506 ±(99.9%) 610.476 ns/op
# Warmup Iteration   5: 754.751 ±(99.9%) 611.280 ns/op
Iteration   1: 753.957 ±(99.9%) 612.700 ns/op
Iteration   2: 760.950 ±(99.9%) 488.127 ns/op
Iteration   3: 763.110 ±(99.9%) 573.764 ns/op
Iteration   4: 760.540 ±(99.9%) 492.636 ns/op
Iteration   5: 760.960 ±(99.9%) 486.798 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_semaphore":
  725.662 ±(99.9%) 29.461 ns/op [Average]
  (min, avg, max) = (689.729, 725.662, 763.110), stdev = 27.558
  CI (99.9%): [696.201, 755.123] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_lock

# Run progress: 42.86% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 222.080 ±(99.9%) 59.779 ns/op
# Warmup Iteration   2: 239.400 ±(99.9%) 90.972 ns/op
# Warmup Iteration   3: 224.950 ±(99.9%) 21.535 ns/op
# Warmup Iteration   4: 216.307 ±(99.9%) 38.813 ns/op
# Warmup Iteration   5: 220.170 ±(99.9%) 87.133 ns/op
Iteration   1: 220.662 ±(99.9%) 174.260 ns/op
Iteration   2: 219.166 ±(99.9%) 65.548 ns/op
Iteration   3: 234.717 ±(99.9%) 76.160 ns/op
Iteration   4: 226.122 ±(99.9%) 78.918 ns/op
Iteration   5: 219.637 ±(99.9%) 129.497 ns/op

# Run progress: 47.62% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 220.149 ±(99.9%) 11.562 ns/op
# Warmup Iteration   2: 231.393 ±(99.9%) 24.891 ns/op
# Warmup Iteration   3: 223.395 ±(99.9%) 12.514 ns/op
# Warmup Iteration   4: 222.923 ±(99.9%) 196.482 ns/op
# Warmup Iteration   5: 214.717 ±(99.9%) 142.150 ns/op
Iteration   1: 212.385 ±(99.9%) 40.888 ns/op
Iteration   2: 210.549 ±(99.9%) 45.780 ns/op
Iteration   3: 213.296 ±(99.9%) 55.235 ns/op
Iteration   4: 213.629 ±(99.9%) 91.515 ns/op
Iteration   5: 216.961 ±(99.9%) 114.661 ns/op

# Run progress: 52.38% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 222.836 ±(99.9%) 164.833 ns/op
# Warmup Iteration   2: 242.613 ±(99.9%) 67.215 ns/op
# Warmup Iteration   3: 222.983 ±(99.9%) 56.108 ns/op
# Warmup Iteration   4: 221.879 ±(99.9%) 27.413 ns/op
# Warmup Iteration   5: 222.798 ±(99.9%) 47.575 ns/op
Iteration   1: 222.721 ±(99.9%) 54.991 ns/op
Iteration   2: 221.500 ±(99.9%) 38.089 ns/op
Iteration   3: 225.933 ±(99.9%) 77.703 ns/op
Iteration   4: 224.770 ±(99.9%) 120.985 ns/op
Iteration   5: 217.425 ±(99.9%) 112.382 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_lock":
  219.965 ±(99.9%) 6.831 ns/op [Average]
  (min, avg, max) = (210.549, 219.965, 234.717), stdev = 6.390
  CI (99.9%): [213.134, 226.796] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_read_write_lock

# Run progress: 57.14% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2063.958 ±(99.9%) 194.032 ns/op
# Warmup Iteration   2: 2132.145 ±(99.9%) 223.422 ns/op
# Warmup Iteration   3: 2132.803 ±(99.9%) 318.110 ns/op
# Warmup Iteration   4: 2028.676 ±(99.9%) 219.447 ns/op
# Warmup Iteration   5: 2023.875 ±(99.9%) 61.176 ns/op
Iteration   1: 2003.894 ±(99.9%) 132.277 ns/op
Iteration   2: 2056.522 ±(99.9%) 391.935 ns/op
Iteration   3: 2023.134 ±(99.9%) 235.680 ns/op
Iteration   4: 2108.905 ±(99.9%) 255.846 ns/op
Iteration   5: 2117.637 ±(99.9%) 271.034 ns/op

# Run progress: 61.90% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 2146.022 ±(99.9%) 235.379 ns/op
# Warmup Iteration   2: 2127.529 ±(99.9%) 124.943 ns/op
# Warmup Iteration   3: 2080.478 ±(99.9%) 255.817 ns/op
# Warmup Iteration   4: 2140.878 ±(99.9%) 201.157 ns/op
# Warmup Iteration   5: 2104.211 ±(99.9%) 413.177 ns/op
Iteration   1: 2083.496 ±(99.9%) 133.068 ns/op
Iteration   2: 2091.335 ±(99.9%) 257.142 ns/op
Iteration   3: 2046.775 ±(99.9%) 379.288 ns/op
Iteration   4: 2097.683 ±(99.9%) 209.695 ns/op
Iteration   5: 2042.757 ±(99.9%) 260.088 ns/op

# Run progress: 66.67% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2125.605 ±(99.9%) 20.122 ns/op
# Warmup Iteration   2: 2115.453 ±(99.9%) 207.170 ns/op
# Warmup Iteration   3: 2094.769 ±(99.9%) 107.914 ns/op
# Warmup Iteration   4: 2084.700 ±(99.9%) 147.406 ns/op
# Warmup Iteration   5: 2114.038 ±(99.9%) 59.186 ns/op
Iteration   1: 2181.006 ±(99.9%) 163.241 ns/op
Iteration   2: 2098.996 ±(99.9%) 318.951 ns/op
Iteration   3: 2075.866 ±(99.9%) 86.875 ns/op
Iteration   4: 2053.929 ±(99.9%) 194.451 ns/op
Iteration   5: 2083.286 ±(99.9%) 284.756 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_read_write_lock":
  2077.681 ±(99.9%) 46.038 ns/op [Average]
  (min, avg, max) = (2003.894, 2077.681, 2181.006), stdev = 43.064
  CI (99.9%): [2031.643, 2123.720] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.semaphore

# Run progress: 71.43% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 668.511 ±(99.9%) 260.511 ns/op
# Warmup Iteration   2: 667.608 ±(99.9%) 197.146 ns/op
# Warmup Iteration   3: 670.454 ±(99.9%) 179.963 ns/op
# Warmup Iteration   4: 670.547 ±(99.9%) 180.623 ns/op
# Warmup Iteration   5: 671.923 ±(99.9%) 181.677 ns/op
Iteration   1: 670.793 ±(99.9%) 184.287 ns/op
Iteration   2: 675.820 ±(99.9%) 269.858 ns/op
Iteration   3: 676.124 ±(99.9%) 271.534 ns/op
Iteration   4: 677.249 ±(99.9%) 268.285 ns/op
Iteration   5: 678.286 ±(99.9%) 270.639 ns/op

# Run progress: 76.19% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 674.718 ±(99.9%) 342.228 ns/op
# Warmup Iteration   2: 664.424 ±(99.9%) 275.883 ns/op
# Warmup Iteration   3: 663.051 ±(99.9%) 254.315 ns/op
# Warmup Iteration   4: 668.914 ±(99.9%) 350.830 ns/op
# Warmup Iteration   5: 674.606 ±(99.9%) 331.311 ns/op
Iteration   1: 672.145 ±(99.9%) 308.258 ns/op
Iteration   2: 672.952 ±(99.9%) 313.081 ns/op
Iteration   3: 673.107 ±(99.9%) 313.023 ns/op
Iteration   4: 673.763 ±(99.9%) 312.904 ns/op
Iteration   5: 672.840 ±(99.9%) 314.844 ns/op

# Run progress: 80.95% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 651.224 ±(99.9%) 511.941 ns/op
# Warmup Iteration   2: 647.906 ±(99.9%) 421.454 ns/op
# Warmup Iteration   3: 653.263 ±(99.9%) 493.852 ns/op
# Warmup Iteration   4: 649.694 ±(99.9%) 525.405 ns/op
# Warmup Iteration   5: 644.085 ±(99.9%) 466.897 ns/op
Iteration   1: 648.153 ±(99.9%) 486.325 ns/op
Iteration   2: 645.004 ±(99.9%) 459.738 ns/op
Iteration   3: 648.125 ±(99.9%) 519.683 ns/op
Iteration   4: 647.059 ±(99.9%) 527.807 ns/op
Iteration   5: 649.682 ±(99.9%) 494.501 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.semaphore":
  665.407 ±(99.9%) 14.118 ns/op [Average]
  (min, avg, max) = (645.004, 665.407, 678.286), stdev = 13.206
  CI (99.9%): [651.289, 679.525] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.synchronized

# Run progress: 85.71% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 474.965 ±(99.9%) 842.612 ns/op
# Warmup Iteration   2: 506.380 ±(99.9%) 89.676 ns/op
# Warmup Iteration   3: 502.725 ±(99.9%) 108.002 ns/op
# Warmup Iteration   4: 505.682 ±(99.9%) 187.583 ns/op
# Warmup Iteration   5: 500.292 ±(99.9%) 115.153 ns/op
Iteration   1: 505.576 ±(99.9%) 75.460 ns/op
Iteration   2: 502.239 ±(99.9%) 151.935 ns/op
Iteration   3: 507.900 ±(99.9%) 235.323 ns/op
Iteration   4: 493.916 ±(99.9%) 161.025 ns/op
Iteration   5: 504.674 ±(99.9%) 230.876 ns/op

# Run progress: 90.48% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 512.856 ±(99.9%) 178.896 ns/op
# Warmup Iteration   2: 496.035 ±(99.9%) 160.155 ns/op
# Warmup Iteration   3: 495.415 ±(99.9%) 77.472 ns/op
# Warmup Iteration   4: 506.633 ±(99.9%) 299.669 ns/op
# Warmup Iteration   5: 502.800 ±(99.9%) 173.790 ns/op
Iteration   1: 494.408 ±(99.9%) 65.302 ns/op
Iteration   2: 505.092 ±(99.9%) 164.017 ns/op
Iteration   3: 510.875 ±(99.9%) 249.078 ns/op
Iteration   4: 506.625 ±(99.9%) 96.699 ns/op
Iteration   5: 507.229 ±(99.9%) 132.411 ns/op

# Run progress: 95.24% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 493.512 ±(99.9%) 164.356 ns/op
# Warmup Iteration   2: 506.864 ±(99.9%) 106.239 ns/op
# Warmup Iteration   3: 506.804 ±(99.9%) 115.880 ns/op
# Warmup Iteration   4: 504.563 ±(99.9%) 35.500 ns/op
# Warmup Iteration   5: 489.252 ±(99.9%) 142.309 ns/op
Iteration   1: 496.645 ±(99.9%) 292.209 ns/op
Iteration   2: 494.630 ±(99.9%) 297.347 ns/op
Iteration   3: 485.364 ±(99.9%) 132.272 ns/op
Iteration   4: 487.273 ±(99.9%) 126.306 ns/op
Iteration   5: 492.071 ±(99.9%) 170.075 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.synchronized":
  499.635 ±(99.9%) 8.601 ns/op [Average]
  (min, avg, max) = (485.364, 499.635, 510.875), stdev = 8.045
  CI (99.9%): [491.034, 508.235] (assumes normal distribution)


# Run complete. Total time: 00:35:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt      Score     Error  Units
LocksBenchmark.fair_reentrant_lock             avgt   15  11461.531 ± 138.928  ns/op
LocksBenchmark.fair_reentrant_read_write_lock  avgt   15  23183.314 ± 435.913  ns/op
LocksBenchmark.fair_semaphore                  avgt   15    725.662 ±  29.461  ns/op
LocksBenchmark.reentrant_lock                  avgt   15    219.965 ±   6.831  ns/op
LocksBenchmark.reentrant_read_write_lock       avgt   15   2077.681 ±  46.038  ns/op
LocksBenchmark.semaphore                       avgt   15    665.407 ±  14.118  ns/op
LocksBenchmark.synchronized                    avgt   15    499.635 ±   8.601  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/LocksBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*StoreAfterStoreBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/StoreAfterStoreBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_non_zero_volatile_stores

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 16.462 ns/op
# Warmup Iteration   2: 17.001 ns/op
# Warmup Iteration   3: 16.084 ns/op
# Warmup Iteration   4: 15.381 ns/op
# Warmup Iteration   5: 16.022 ns/op
Iteration   1: 16.031 ns/op
Iteration   2: 15.082 ns/op
Iteration   3: 15.685 ns/op
Iteration   4: 14.904 ns/op
Iteration   5: 15.554 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 16.659 ns/op
# Warmup Iteration   2: 16.060 ns/op
# Warmup Iteration   3: 15.936 ns/op
# Warmup Iteration   4: 15.839 ns/op
# Warmup Iteration   5: 14.921 ns/op
Iteration   1: 15.663 ns/op
Iteration   2: 15.283 ns/op
Iteration   3: 15.287 ns/op
Iteration   4: 15.410 ns/op
Iteration   5: 15.496 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 15.594 ns/op
# Warmup Iteration   2: 15.515 ns/op
# Warmup Iteration   3: 16.127 ns/op
# Warmup Iteration   4: 15.144 ns/op
# Warmup Iteration   5: 14.980 ns/op
Iteration   1: 14.755 ns/op
Iteration   2: 15.538 ns/op
Iteration   3: 15.133 ns/op
Iteration   4: 15.621 ns/op
Iteration   5: 15.196 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_non_zero_volatile_stores":
  15.376 ±(99.9%) 0.355 ns/op [Average]
  (min, avg, max) = (14.755, 15.376, 16.031), stdev = 0.332
  CI (99.9%): [15.021, 15.731] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_zero_volatile_stores

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 15.425 ns/op
# Warmup Iteration   2: 15.098 ns/op
# Warmup Iteration   3: 14.391 ns/op
# Warmup Iteration   4: 13.806 ns/op
# Warmup Iteration   5: 14.164 ns/op
Iteration   1: 14.290 ns/op
Iteration   2: 14.122 ns/op
Iteration   3: 14.411 ns/op
Iteration   4: 14.766 ns/op
Iteration   5: 14.463 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 15.387 ns/op
# Warmup Iteration   2: 14.414 ns/op
# Warmup Iteration   3: 13.616 ns/op
# Warmup Iteration   4: 13.923 ns/op
# Warmup Iteration   5: 14.014 ns/op
Iteration   1: 14.127 ns/op
Iteration   2: 14.429 ns/op
Iteration   3: 14.006 ns/op
Iteration   4: 14.075 ns/op
Iteration   5: 14.385 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 15.280 ns/op
# Warmup Iteration   2: 14.682 ns/op
# Warmup Iteration   3: 14.883 ns/op
# Warmup Iteration   4: 14.074 ns/op
# Warmup Iteration   5: 13.432 ns/op
Iteration   1: 13.586 ns/op
Iteration   2: 13.650 ns/op
Iteration   3: 14.142 ns/op
Iteration   4: 13.544 ns/op
Iteration   5: 14.571 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_zero_volatile_stores":
  14.171 ±(99.9%) 0.387 ns/op [Average]
  (min, avg, max) = (13.544, 14.171, 14.766), stdev = 0.362
  CI (99.9%): [13.784, 14.558] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt   Score   Error  Units
StoreAfterStoreBenchmark.redundant_non_zero_volatile_stores  avgt   15  15.376 ± 0.355  ns/op
StoreAfterStoreBenchmark.redundant_zero_volatile_stores      avgt   15  14.171 ± 0.387  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/StoreAfterStoreBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*PostAllocationStoresBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/PostAllocationStoresBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.no_store

# Run progress: 0.00% complete, ETA 00:20:00
# Fork: 1 of 3
# Warmup Iteration   1: 17.003 ns/op
# Warmup Iteration   2: 16.622 ns/op
# Warmup Iteration   3: 16.350 ns/op
# Warmup Iteration   4: 16.377 ns/op
# Warmup Iteration   5: 16.393 ns/op
Iteration   1: 16.376 ns/op
Iteration   2: 16.452 ns/op
Iteration   3: 16.481 ns/op
Iteration   4: 16.414 ns/op
Iteration   5: 16.348 ns/op

# Run progress: 8.33% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 17.004 ns/op
# Warmup Iteration   2: 16.622 ns/op
# Warmup Iteration   3: 16.419 ns/op
# Warmup Iteration   4: 16.374 ns/op
# Warmup Iteration   5: 16.386 ns/op
Iteration   1: 16.397 ns/op
Iteration   2: 16.379 ns/op
Iteration   3: 16.320 ns/op
Iteration   4: 16.339 ns/op
Iteration   5: 16.421 ns/op

# Run progress: 16.67% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 17.027 ns/op
# Warmup Iteration   2: 16.624 ns/op
# Warmup Iteration   3: 16.383 ns/op
# Warmup Iteration   4: 16.404 ns/op
# Warmup Iteration   5: 16.417 ns/op
Iteration   1: 16.379 ns/op
Iteration   2: 16.366 ns/op
Iteration   3: 16.433 ns/op
Iteration   4: 16.331 ns/op
Iteration   5: 16.365 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.no_store":
  16.387 ±(99.9%) 0.049 ns/op [Average]
  (min, avg, max) = (16.320, 16.387, 16.481), stdev = 0.046
  CI (99.9%): [16.337, 16.436] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.non_null_or_zero_store

# Run progress: 25.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 17.604 ns/op
# Warmup Iteration   2: 17.261 ns/op
# Warmup Iteration   3: 17.125 ns/op
# Warmup Iteration   4: 17.117 ns/op
# Warmup Iteration   5: 17.137 ns/op
Iteration   1: 17.110 ns/op
Iteration   2: 17.122 ns/op
Iteration   3: 17.149 ns/op
Iteration   4: 17.164 ns/op
Iteration   5: 17.124 ns/op

# Run progress: 33.33% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 17.727 ns/op
# Warmup Iteration   2: 17.210 ns/op
# Warmup Iteration   3: 17.007 ns/op
# Warmup Iteration   4: 17.124 ns/op
# Warmup Iteration   5: 17.092 ns/op
Iteration   1: 17.103 ns/op
Iteration   2: 17.097 ns/op
Iteration   3: 17.108 ns/op
Iteration   4: 17.131 ns/op
Iteration   5: 17.061 ns/op

# Run progress: 41.67% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 17.628 ns/op
# Warmup Iteration   2: 17.204 ns/op
# Warmup Iteration   3: 17.063 ns/op
# Warmup Iteration   4: 17.085 ns/op
# Warmup Iteration   5: 16.990 ns/op
Iteration   1: 17.136 ns/op
Iteration   2: 17.060 ns/op
Iteration   3: 17.076 ns/op
Iteration   4: 17.062 ns/op
Iteration   5: 17.044 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.non_null_or_zero_store":
  17.103 ±(99.9%) 0.038 ns/op [Average]
  (min, avg, max) = (17.044, 17.103, 17.164), stdev = 0.036
  CI (99.9%): [17.065, 17.142] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_store

# Run progress: 50.00% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 17.179 ns/op
# Warmup Iteration   2: 16.638 ns/op
# Warmup Iteration   3: 16.368 ns/op
# Warmup Iteration   4: 16.399 ns/op
# Warmup Iteration   5: 16.453 ns/op
Iteration   1: 16.423 ns/op
Iteration   2: 16.468 ns/op
Iteration   3: 16.400 ns/op
Iteration   4: 16.426 ns/op
Iteration   5: 16.455 ns/op

# Run progress: 58.33% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 17.094 ns/op
# Warmup Iteration   2: 16.621 ns/op
# Warmup Iteration   3: 16.463 ns/op
# Warmup Iteration   4: 16.429 ns/op
# Warmup Iteration   5: 16.485 ns/op
Iteration   1: 16.414 ns/op
Iteration   2: 16.408 ns/op
Iteration   3: 16.428 ns/op
Iteration   4: 16.504 ns/op
Iteration   5: 16.416 ns/op

# Run progress: 66.67% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 17.092 ns/op
# Warmup Iteration   2: 16.638 ns/op
# Warmup Iteration   3: 16.433 ns/op
# Warmup Iteration   4: 16.379 ns/op
# Warmup Iteration   5: 16.418 ns/op
Iteration   1: 16.392 ns/op
Iteration   2: 16.378 ns/op
Iteration   3: 16.400 ns/op
Iteration   4: 16.407 ns/op
Iteration   5: 16.451 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_store":
  16.425 ±(99.9%) 0.035 ns/op [Average]
  (min, avg, max) = (16.378, 16.425, 16.504), stdev = 0.033
  CI (99.9%): [16.390, 16.460] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_volatile_store

# Run progress: 75.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 38.125 ns/op
# Warmup Iteration   2: 36.049 ns/op
# Warmup Iteration   3: 34.945 ns/op
# Warmup Iteration   4: 34.961 ns/op
# Warmup Iteration   5: 34.608 ns/op
Iteration   1: 35.946 ns/op
Iteration   2: 36.075 ns/op
Iteration   3: 35.529 ns/op
Iteration   4: 34.659 ns/op
Iteration   5: 35.381 ns/op

# Run progress: 83.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 36.804 ns/op
# Warmup Iteration   2: 36.867 ns/op
# Warmup Iteration   3: 34.673 ns/op
# Warmup Iteration   4: 37.251 ns/op
# Warmup Iteration   5: 34.039 ns/op
Iteration   1: 37.746 ns/op
Iteration   2: 37.509 ns/op
Iteration   3: 36.193 ns/op
Iteration   4: 34.844 ns/op
Iteration   5: 34.216 ns/op

# Run progress: 91.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 36.919 ns/op
# Warmup Iteration   2: 36.762 ns/op
# Warmup Iteration   3: 36.750 ns/op
# Warmup Iteration   4: 35.023 ns/op
# Warmup Iteration   5: 35.432 ns/op
Iteration   1: 34.876 ns/op
Iteration   2: 36.008 ns/op
Iteration   3: 35.599 ns/op
Iteration   4: 36.482 ns/op
Iteration   5: 35.824 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_volatile_store":
  35.792 ±(99.9%) 1.043 ns/op [Average]
  (min, avg, max) = (34.216, 35.792, 37.746), stdev = 0.976
  CI (99.9%): [34.749, 36.836] (assumes normal distribution)


# Run complete. Total time: 00:20:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt   Score   Error  Units
PostAllocationStoresBenchmark.no_store                               avgt   15  16.387 ± 0.049  ns/op
PostAllocationStoresBenchmark.non_null_or_zero_store                 avgt   15  17.103 ± 0.038  ns/op
PostAllocationStoresBenchmark.redundant_null_or_zero_store           avgt   15  16.425 ± 0.035  ns/op
PostAllocationStoresBenchmark.redundant_null_or_zero_volatile_store  avgt   15  35.792 ± 1.043  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/PostAllocationStoresBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*ExceptionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ExceptionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception
# Parameters: (stackDepth = 1)

# Run progress: 0.00% complete, ETA 00:45:00
# Fork: 1 of 3
# Warmup Iteration   1: 1290.423 ns/op
# Warmup Iteration   2: 1097.405 ns/op
# Warmup Iteration   3: 1102.263 ns/op
# Warmup Iteration   4: 1102.618 ns/op
# Warmup Iteration   5: 1104.897 ns/op
Iteration   1: 1106.386 ns/op
Iteration   2: 1105.662 ns/op
Iteration   3: 1107.758 ns/op
Iteration   4: 1104.190 ns/op
Iteration   5: 1108.845 ns/op

# Run progress: 3.70% complete, ETA 00:43:27
# Fork: 2 of 3
# Warmup Iteration   1: 1262.253 ns/op
# Warmup Iteration   2: 1112.408 ns/op
# Warmup Iteration   3: 1209.866 ns/op
# Warmup Iteration   4: 1294.189 ns/op
# Warmup Iteration   5: 1282.269 ns/op
Iteration   1: 1145.812 ns/op
Iteration   2: 1117.678 ns/op
Iteration   3: 1116.658 ns/op
Iteration   4: 1119.462 ns/op
Iteration   5: 1125.222 ns/op

# Run progress: 7.41% complete, ETA 00:41:46
# Fork: 3 of 3
# Warmup Iteration   1: 1150.631 ns/op
# Warmup Iteration   2: 1192.223 ns/op
# Warmup Iteration   3: 1283.555 ns/op
# Warmup Iteration   4: 1290.582 ns/op
# Warmup Iteration   5: 1281.471 ns/op
Iteration   1: 1275.059 ns/op
Iteration   2: 1270.155 ns/op
Iteration   3: 1265.859 ns/op
Iteration   4: 1262.872 ns/op
Iteration   5: 1265.081 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception":
  1166.447 ±(99.9%) 80.099 ns/op [Average]
  (min, avg, max) = (1104.190, 1166.447, 1275.059), stdev = 74.925
  CI (99.9%): [1086.348, 1246.546] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception
# Parameters: (stackDepth = 64)

# Run progress: 11.11% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 3954.422 ns/op
# Warmup Iteration   2: 3565.573 ns/op
# Warmup Iteration   3: 3533.794 ns/op
# Warmup Iteration   4: 3542.215 ns/op
# Warmup Iteration   5: 3864.277 ns/op
Iteration   1: 3842.954 ns/op
Iteration   2: 3836.508 ns/op
Iteration   3: 3875.669 ns/op
Iteration   4: 3850.508 ns/op
Iteration   5: 3819.784 ns/op

# Run progress: 14.81% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 3655.350 ns/op
# Warmup Iteration   2: 3735.526 ns/op
# Warmup Iteration   3: 3661.207 ns/op
# Warmup Iteration   4: 3666.996 ns/op
# Warmup Iteration   5: 3674.373 ns/op
Iteration   1: 3675.423 ns/op
Iteration   2: 3674.468 ns/op
Iteration   3: 3679.316 ns/op
Iteration   4: 3678.994 ns/op
Iteration   5: 3849.045 ns/op

# Run progress: 18.52% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 3701.911 ns/op
# Warmup Iteration   2: 3949.540 ns/op
# Warmup Iteration   3: 4043.887 ns/op
# Warmup Iteration   4: 3977.809 ns/op
# Warmup Iteration   5: 3604.517 ns/op
Iteration   1: 3550.786 ns/op
Iteration   2: 3689.647 ns/op
Iteration   3: 3999.511 ns/op
Iteration   4: 3968.396 ns/op
Iteration   5: 3954.973 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception":
  3796.399 ±(99.9%) 140.266 ns/op [Average]
  (min, avg, max) = (3550.786, 3796.399, 3999.511), stdev = 131.205
  CI (99.9%): [3656.133, 3936.665] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception
# Parameters: (stackDepth = 128)

# Run progress: 22.22% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 6213.424 ns/op
# Warmup Iteration   2: 6208.476 ns/op
# Warmup Iteration   3: 6490.596 ns/op
# Warmup Iteration   4: 6032.793 ns/op
# Warmup Iteration   5: 6064.072 ns/op
Iteration   1: 6077.992 ns/op
Iteration   2: 6087.600 ns/op
Iteration   3: 6525.978 ns/op
Iteration   4: 6246.018 ns/op
Iteration   5: 6255.427 ns/op

# Run progress: 25.93% complete, ETA 00:33:24
# Fork: 2 of 3
# Warmup Iteration   1: 6969.797 ns/op
# Warmup Iteration   2: 6784.506 ns/op
# Warmup Iteration   3: 6794.288 ns/op
# Warmup Iteration   4: 6788.956 ns/op
# Warmup Iteration   5: 6758.741 ns/op
Iteration   1: 6749.792 ns/op
Iteration   2: 6739.863 ns/op
Iteration   3: 6737.270 ns/op
Iteration   4: 6744.441 ns/op
Iteration   5: 6744.810 ns/op

# Run progress: 29.63% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 5828.247 ns/op
# Warmup Iteration   2: 6650.142 ns/op
# Warmup Iteration   3: 6252.694 ns/op
# Warmup Iteration   4: 6029.703 ns/op
# Warmup Iteration   5: 6055.641 ns/op
Iteration   1: 6051.453 ns/op
Iteration   2: 6050.217 ns/op
Iteration   3: 6052.370 ns/op
Iteration   4: 6053.512 ns/op
Iteration   5: 6054.602 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception":
  6344.756 ±(99.9%) 339.172 ns/op [Average]
  (min, avg, max) = (6050.217, 6344.756, 6749.792), stdev = 317.261
  CI (99.9%): [6005.585, 6683.928] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace
# Parameters: (stackDepth = 1)

# Run progress: 33.33% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 10.642 ns/op
# Warmup Iteration   2: 10.594 ns/op
# Warmup Iteration   3: 10.138 ns/op
# Warmup Iteration   4: 9.785 ns/op
# Warmup Iteration   5: 9.773 ns/op
Iteration   1: 9.859 ns/op
Iteration   2: 9.940 ns/op
Iteration   3: 9.469 ns/op
Iteration   4: 9.503 ns/op
Iteration   5: 9.589 ns/op

# Run progress: 37.04% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 10.624 ns/op
# Warmup Iteration   2: 10.999 ns/op
# Warmup Iteration   3: 10.004 ns/op
# Warmup Iteration   4: 9.490 ns/op
# Warmup Iteration   5: 9.785 ns/op
Iteration   1: 9.596 ns/op
Iteration   2: 9.642 ns/op
Iteration   3: 9.731 ns/op
Iteration   4: 9.953 ns/op
Iteration   5: 9.812 ns/op

# Run progress: 40.74% complete, ETA 00:26:43
# Fork: 3 of 3
# Warmup Iteration   1: 10.638 ns/op
# Warmup Iteration   2: 10.913 ns/op
# Warmup Iteration   3: 9.977 ns/op
# Warmup Iteration   4: 9.940 ns/op
# Warmup Iteration   5: 9.171 ns/op
Iteration   1: 9.514 ns/op
Iteration   2: 9.603 ns/op
Iteration   3: 10.299 ns/op
Iteration   4: 9.515 ns/op
Iteration   5: 9.789 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace":
  9.721 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (9.469, 9.721, 10.299), stdev = 0.226
  CI (99.9%): [9.479, 9.963] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace
# Parameters: (stackDepth = 64)

# Run progress: 44.44% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 99.932 ns/op
# Warmup Iteration   2: 92.580 ns/op
# Warmup Iteration   3: 86.881 ns/op
# Warmup Iteration   4: 87.459 ns/op
# Warmup Iteration   5: 87.362 ns/op
Iteration   1: 87.243 ns/op
Iteration   2: 85.180 ns/op
Iteration   3: 85.705 ns/op
Iteration   4: 85.820 ns/op
Iteration   5: 85.981 ns/op

# Run progress: 48.15% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 88.409 ns/op
# Warmup Iteration   2: 98.001 ns/op
# Warmup Iteration   3: 90.660 ns/op
# Warmup Iteration   4: 89.222 ns/op
# Warmup Iteration   5: 85.515 ns/op
Iteration   1: 85.691 ns/op
Iteration   2: 97.565 ns/op
Iteration   3: 97.010 ns/op
Iteration   4: 96.424 ns/op
Iteration   5: 96.030 ns/op

# Run progress: 51.85% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 86.453 ns/op
# Warmup Iteration   2: 98.265 ns/op
# Warmup Iteration   3: 96.514 ns/op
# Warmup Iteration   4: 87.168 ns/op
# Warmup Iteration   5: 87.460 ns/op
Iteration   1: 87.258 ns/op
Iteration   2: 87.445 ns/op
Iteration   3: 87.561 ns/op
Iteration   4: 87.723 ns/op
Iteration   5: 87.727 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace":
  89.358 ±(99.9%) 5.027 ns/op [Average]
  (min, avg, max) = (85.180, 89.358, 97.565), stdev = 4.703
  CI (99.9%): [84.330, 94.385] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace
# Parameters: (stackDepth = 128)

# Run progress: 55.56% complete, ETA 00:20:02
# Fork: 1 of 3
# Warmup Iteration   1: 149.478 ns/op
# Warmup Iteration   2: 148.057 ns/op
# Warmup Iteration   3: 146.877 ns/op
# Warmup Iteration   4: 146.963 ns/op
# Warmup Iteration   5: 146.562 ns/op
Iteration   1: 146.655 ns/op
Iteration   2: 146.823 ns/op
Iteration   3: 147.070 ns/op
Iteration   4: 147.120 ns/op
Iteration   5: 146.880 ns/op

# Run progress: 59.26% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 156.153 ns/op
# Warmup Iteration   2: 147.808 ns/op
# Warmup Iteration   3: 143.798 ns/op
# Warmup Iteration   4: 158.860 ns/op
# Warmup Iteration   5: 161.358 ns/op
Iteration   1: 160.682 ns/op
Iteration   2: 160.028 ns/op
Iteration   3: 159.625 ns/op
Iteration   4: 159.390 ns/op
Iteration   5: 159.273 ns/op

# Run progress: 62.96% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 162.271 ns/op
# Warmup Iteration   2: 146.000 ns/op
# Warmup Iteration   3: 143.036 ns/op
# Warmup Iteration   4: 142.070 ns/op
# Warmup Iteration   5: 142.483 ns/op
Iteration   1: 143.710 ns/op
Iteration   2: 143.266 ns/op
Iteration   3: 143.629 ns/op
Iteration   4: 143.843 ns/op
Iteration   5: 144.130 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace":
  150.142 ±(99.9%) 7.703 ns/op [Average]
  (min, avg, max) = (143.266, 150.142, 160.682), stdev = 7.206
  CI (99.9%): [142.438, 157.845] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace
# Parameters: (stackDepth = 1)

# Run progress: 66.67% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 23103.582 ns/op
# Warmup Iteration   2: 22674.232 ns/op
# Warmup Iteration   3: 22472.354 ns/op
# Warmup Iteration   4: 22384.377 ns/op
# Warmup Iteration   5: 22402.155 ns/op
Iteration   1: 22318.045 ns/op
Iteration   2: 22326.916 ns/op
Iteration   3: 22328.450 ns/op
Iteration   4: 22335.397 ns/op
Iteration   5: 20268.619 ns/op

# Run progress: 70.37% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 22526.676 ns/op
# Warmup Iteration   2: 20364.049 ns/op
# Warmup Iteration   3: 20397.946 ns/op
# Warmup Iteration   4: 20423.033 ns/op
# Warmup Iteration   5: 20423.105 ns/op
Iteration   1: 20452.248 ns/op
Iteration   2: 20453.324 ns/op
Iteration   3: 20446.349 ns/op
Iteration   4: 20446.562 ns/op
Iteration   5: 20471.362 ns/op

# Run progress: 74.07% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 20114.089 ns/op
# Warmup Iteration   2: 22106.314 ns/op
# Warmup Iteration   3: 19861.870 ns/op
# Warmup Iteration   4: 19880.464 ns/op
# Warmup Iteration   5: 19865.395 ns/op
Iteration   1: 19901.507 ns/op
Iteration   2: 19882.210 ns/op
Iteration   3: 19964.414 ns/op
Iteration   4: 19949.928 ns/op
Iteration   5: 19944.112 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace":
  20765.963 ±(99.9%) 1068.932 ns/op [Average]
  (min, avg, max) = (19882.210, 20765.963, 22335.397), stdev = 999.880
  CI (99.9%): [19697.031, 21834.895] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace
# Parameters: (stackDepth = 64)

# Run progress: 77.78% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 86017.035 ns/op
# Warmup Iteration   2: 82061.262 ns/op
# Warmup Iteration   3: 82458.535 ns/op
# Warmup Iteration   4: 82343.820 ns/op
# Warmup Iteration   5: 82095.292 ns/op
Iteration   1: 82191.594 ns/op
Iteration   2: 82378.347 ns/op
Iteration   3: 82317.689 ns/op
Iteration   4: 82271.944 ns/op
Iteration   5: 82283.682 ns/op

# Run progress: 81.48% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 95985.161 ns/op
# Warmup Iteration   2: 81752.632 ns/op
# Warmup Iteration   3: 82099.896 ns/op
# Warmup Iteration   4: 82424.200 ns/op
# Warmup Iteration   5: 82560.978 ns/op
Iteration   1: 82658.090 ns/op
Iteration   2: 82665.643 ns/op
Iteration   3: 82717.089 ns/op
Iteration   4: 82758.529 ns/op
Iteration   5: 82774.444 ns/op

# Run progress: 85.19% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 94916.752 ns/op
# Warmup Iteration   2: 82098.179 ns/op
# Warmup Iteration   3: 82453.777 ns/op
# Warmup Iteration   4: 83928.863 ns/op
# Warmup Iteration   5: 95314.073 ns/op
Iteration   1: 94433.899 ns/op
Iteration   2: 93909.736 ns/op
Iteration   3: 93578.575 ns/op
Iteration   4: 93424.560 ns/op
Iteration   5: 93392.826 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace":
  86250.443 ±(99.9%) 5875.186 ns/op [Average]
  (min, avg, max) = (82191.594, 86250.443, 94433.899), stdev = 5495.653
  CI (99.9%): [80375.257, 92125.630] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace
# Parameters: (stackDepth = 128)

# Run progress: 88.89% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 144699.515 ns/op
# Warmup Iteration   2: 166181.825 ns/op
# Warmup Iteration   3: 164981.688 ns/op
# Warmup Iteration   4: 164104.971 ns/op
# Warmup Iteration   5: 163796.452 ns/op
Iteration   1: 163521.094 ns/op
Iteration   2: 163436.188 ns/op
Iteration   3: 163162.414 ns/op
Iteration   4: 162977.681 ns/op
Iteration   5: 163289.011 ns/op

# Run progress: 92.59% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 146054.422 ns/op
# Warmup Iteration   2: 163282.741 ns/op
# Warmup Iteration   3: 145816.752 ns/op
# Warmup Iteration   4: 146181.348 ns/op
# Warmup Iteration   5: 146330.732 ns/op
Iteration   1: 146610.026 ns/op
Iteration   2: 147386.876 ns/op
Iteration   3: 146940.024 ns/op
Iteration   4: 154917.673 ns/op
Iteration   5: 168572.626 ns/op

# Run progress: 96.30% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 150067.343 ns/op
# Warmup Iteration   2: 161527.796 ns/op
# Warmup Iteration   3: 160783.236 ns/op
# Warmup Iteration   4: 161505.115 ns/op
# Warmup Iteration   5: 147682.859 ns/op
Iteration   1: 148263.963 ns/op
Iteration   2: 148200.606 ns/op
Iteration   3: 148645.932 ns/op
Iteration   4: 148841.861 ns/op
Iteration   5: 153689.029 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace":
  155230.334 ±(99.9%) 8529.152 ns/op [Average]
  (min, avg, max) = (146610.026, 155230.334, 168572.626), stdev = 7978.174
  CI (99.9%): [146701.182, 163759.485] (assumes normal distribution)


# Run complete. Total time: 00:45:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (stackDepth)  Mode  Cnt       Score      Error  Units
ExceptionBenchmark.create_exception                                            1  avgt   15    1166.447 ±   80.099  ns/op
ExceptionBenchmark.create_exception                                           64  avgt   15    3796.399 ±  140.266  ns/op
ExceptionBenchmark.create_exception                                          128  avgt   15    6344.756 ±  339.172  ns/op
ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace             1  avgt   15       9.721 ±    0.242  ns/op
ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace            64  avgt   15      89.358 ±    5.027  ns/op
ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace           128  avgt   15     150.142 ±    7.703  ns/op
ExceptionBenchmark.get_stack_trace                                             1  avgt   15   20765.963 ± 1068.932  ns/op
ExceptionBenchmark.get_stack_trace                                            64  avgt   15   86250.443 ± 5875.186  ns/op
ExceptionBenchmark.get_stack_trace                                           128  avgt   15  155230.334 ± 8529.152  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/ExceptionBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*DoubleMathBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/DoubleMathBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.abs
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.515 ns/op
# Warmup Iteration   2: 0.517 ns/op
# Warmup Iteration   3: 0.516 ns/op
# Warmup Iteration   4: 0.517 ns/op
# Warmup Iteration   5: 0.518 ns/op
Iteration   1: 0.518 ns/op
Iteration   2: 0.518 ns/op
Iteration   3: 0.518 ns/op
Iteration   4: 0.519 ns/op
Iteration   5: 0.520 ns/op

# Run progress: 2.38% complete, ETA 01:08:32
# Fork: 2 of 3
# Warmup Iteration   1: 0.525 ns/op
# Warmup Iteration   2: 0.523 ns/op
# Warmup Iteration   3: 0.523 ns/op
# Warmup Iteration   4: 0.523 ns/op
# Warmup Iteration   5: 0.522 ns/op
Iteration   1: 0.523 ns/op
Iteration   2: 0.523 ns/op
Iteration   3: 0.524 ns/op
Iteration   4: 0.524 ns/op
Iteration   5: 0.524 ns/op

# Run progress: 4.76% complete, ETA 01:06:51
# Fork: 3 of 3
# Warmup Iteration   1: 0.601 ns/op
# Warmup Iteration   2: 0.591 ns/op
# Warmup Iteration   3: 0.587 ns/op
# Warmup Iteration   4: 0.585 ns/op
# Warmup Iteration   5: 0.586 ns/op
Iteration   1: 0.583 ns/op
Iteration   2: 0.583 ns/op
Iteration   3: 0.584 ns/op
Iteration   4: 0.583 ns/op
Iteration   5: 0.582 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.abs":
  0.542 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (0.518, 0.542, 0.584), stdev = 0.030
  CI (99.9%): [0.509, 0.574] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.ceil
# Parameters: (size = 262144)

# Run progress: 7.14% complete, ETA 01:05:10
# Fork: 1 of 3
# Warmup Iteration   1: 2.125 ns/op
# Warmup Iteration   2: 2.177 ns/op
# Warmup Iteration   3: 2.169 ns/op
# Warmup Iteration   4: 2.161 ns/op
# Warmup Iteration   5: 2.158 ns/op
Iteration   1: 2.157 ns/op
Iteration   2: 2.381 ns/op
Iteration   3: 2.142 ns/op
Iteration   4: 2.146 ns/op
Iteration   5: 2.150 ns/op

# Run progress: 9.52% complete, ETA 01:03:30
# Fork: 2 of 3
# Warmup Iteration   1: 1.948 ns/op
# Warmup Iteration   2: 1.957 ns/op
# Warmup Iteration   3: 1.959 ns/op
# Warmup Iteration   4: 1.963 ns/op
# Warmup Iteration   5: 1.965 ns/op
Iteration   1: 2.050 ns/op
Iteration   2: 1.953 ns/op
Iteration   3: 1.954 ns/op
Iteration   4: 1.959 ns/op
Iteration   5: 1.959 ns/op

# Run progress: 11.90% complete, ETA 01:01:50
# Fork: 3 of 3
# Warmup Iteration   1: 2.137 ns/op
# Warmup Iteration   2: 2.121 ns/op
# Warmup Iteration   3: 2.117 ns/op
# Warmup Iteration   4: 2.114 ns/op
# Warmup Iteration   5: 2.113 ns/op
Iteration   1: 2.109 ns/op
Iteration   2: 2.369 ns/op
Iteration   3: 2.097 ns/op
Iteration   4: 2.099 ns/op
Iteration   5: 2.099 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.ceil":
  2.108 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (1.953, 2.108, 2.381), stdev = 0.132
  CI (99.9%): [1.967, 2.250] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.cos
# Parameters: (size = 262144)

# Run progress: 14.29% complete, ETA 01:00:10
# Fork: 1 of 3
# Warmup Iteration   1: 28.320 ns/op
# Warmup Iteration   2: 28.272 ns/op
# Warmup Iteration   3: 28.288 ns/op
# Warmup Iteration   4: 28.322 ns/op
# Warmup Iteration   5: 28.308 ns/op
Iteration   1: 28.321 ns/op
Iteration   2: 28.249 ns/op
Iteration   3: 28.248 ns/op
Iteration   4: 28.309 ns/op
Iteration   5: 28.330 ns/op

# Run progress: 16.67% complete, ETA 00:58:29
# Fork: 2 of 3
# Warmup Iteration   1: 28.405 ns/op
# Warmup Iteration   2: 28.377 ns/op
# Warmup Iteration   3: 28.337 ns/op
# Warmup Iteration   4: 28.355 ns/op
# Warmup Iteration   5: 28.316 ns/op
Iteration   1: 28.321 ns/op
Iteration   2: 28.325 ns/op
Iteration   3: 28.348 ns/op
Iteration   4: 28.333 ns/op
Iteration   5: 28.305 ns/op

# Run progress: 19.05% complete, ETA 00:56:49
# Fork: 3 of 3
# Warmup Iteration   1: 27.723 ns/op
# Warmup Iteration   2: 27.731 ns/op
# Warmup Iteration   3: 27.761 ns/op
# Warmup Iteration   4: 27.765 ns/op
# Warmup Iteration   5: 27.755 ns/op
Iteration   1: 27.777 ns/op
Iteration   2: 27.753 ns/op
Iteration   3: 27.792 ns/op
Iteration   4: 27.822 ns/op
Iteration   5: 27.826 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.cos":
  28.137 ±(99.9%) 0.271 ns/op [Average]
  (min, avg, max) = (27.753, 28.137, 28.348), stdev = 0.253
  CI (99.9%): [27.866, 28.408] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.exp
# Parameters: (size = 262144)

# Run progress: 21.43% complete, ETA 00:55:09
# Fork: 1 of 3
# Warmup Iteration   1: 3.614 ns/op
# Warmup Iteration   2: 3.618 ns/op
# Warmup Iteration   3: 3.632 ns/op
# Warmup Iteration   4: 3.650 ns/op
# Warmup Iteration   5: 3.650 ns/op
Iteration   1: 3.660 ns/op
Iteration   2: 3.658 ns/op
Iteration   3: 3.666 ns/op
Iteration   4: 3.661 ns/op
Iteration   5: 3.663 ns/op

# Run progress: 23.81% complete, ETA 00:53:29
# Fork: 2 of 3
# Warmup Iteration   1: 4.116 ns/op
# Warmup Iteration   2: 3.612 ns/op
# Warmup Iteration   3: 3.626 ns/op
# Warmup Iteration   4: 3.633 ns/op
# Warmup Iteration   5: 3.634 ns/op
Iteration   1: 3.645 ns/op
Iteration   2: 3.653 ns/op
Iteration   3: 3.654 ns/op
Iteration   4: 3.658 ns/op
Iteration   5: 3.665 ns/op

# Run progress: 26.19% complete, ETA 00:51:48
# Fork: 3 of 3
# Warmup Iteration   1: 4.200 ns/op
# Warmup Iteration   2: 4.154 ns/op
# Warmup Iteration   3: 4.136 ns/op
# Warmup Iteration   4: 4.117 ns/op
# Warmup Iteration   5: 4.119 ns/op
Iteration   1: 4.113 ns/op
Iteration   2: 4.207 ns/op
Iteration   3: 4.191 ns/op
Iteration   4: 4.184 ns/op
Iteration   5: 4.183 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.exp":
  3.831 ±(99.9%) 0.271 ns/op [Average]
  (min, avg, max) = (3.645, 3.831, 4.207), stdev = 0.253
  CI (99.9%): [3.560, 4.101] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.floor
# Parameters: (size = 262144)

# Run progress: 28.57% complete, ETA 00:50:08
# Fork: 1 of 3
# Warmup Iteration   1: 1.923 ns/op
# Warmup Iteration   2: 1.928 ns/op
# Warmup Iteration   3: 1.933 ns/op
# Warmup Iteration   4: 1.935 ns/op
# Warmup Iteration   5: 1.934 ns/op
Iteration   1: 2.051 ns/op
Iteration   2: 1.973 ns/op
Iteration   3: 1.975 ns/op
Iteration   4: 1.973 ns/op
Iteration   5: 1.974 ns/op

# Run progress: 30.95% complete, ETA 00:48:28
# Fork: 2 of 3
# Warmup Iteration   1: 2.129 ns/op
# Warmup Iteration   2: 2.108 ns/op
# Warmup Iteration   3: 2.100 ns/op
# Warmup Iteration   4: 2.095 ns/op
# Warmup Iteration   5: 2.092 ns/op
Iteration   1: 2.091 ns/op
Iteration   2: 2.376 ns/op
Iteration   3: 2.126 ns/op
Iteration   4: 2.128 ns/op
Iteration   5: 2.126 ns/op

# Run progress: 33.33% complete, ETA 00:46:47
# Fork: 3 of 3
# Warmup Iteration   1: 2.092 ns/op
# Warmup Iteration   2: 1.930 ns/op
# Warmup Iteration   3: 1.935 ns/op
# Warmup Iteration   4: 1.936 ns/op
# Warmup Iteration   5: 1.936 ns/op
Iteration   1: 2.027 ns/op
Iteration   2: 1.975 ns/op
Iteration   3: 1.976 ns/op
Iteration   4: 1.977 ns/op
Iteration   5: 1.981 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.floor":
  2.048 ±(99.9%) 0.118 ns/op [Average]
  (min, avg, max) = (1.973, 2.048, 2.376), stdev = 0.110
  CI (99.9%): [1.930, 2.167] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.fma
# Parameters: (size = 262144)

# Run progress: 35.71% complete, ETA 00:45:07
# Fork: 1 of 3
# Warmup Iteration   1: 0.777 ns/op
# Warmup Iteration   2: 0.776 ns/op
# Warmup Iteration   3: 0.776 ns/op
# Warmup Iteration   4: 0.778 ns/op
# Warmup Iteration   5: 0.779 ns/op
Iteration   1: 0.780 ns/op
Iteration   2: 0.780 ns/op
Iteration   3: 0.779 ns/op
Iteration   4: 0.820 ns/op
Iteration   5: 0.814 ns/op

# Run progress: 38.10% complete, ETA 00:43:27
# Fork: 2 of 3
# Warmup Iteration   1: 0.838 ns/op
# Warmup Iteration   2: 0.764 ns/op
# Warmup Iteration   3: 0.760 ns/op
# Warmup Iteration   4: 0.758 ns/op
# Warmup Iteration   5: 0.760 ns/op
Iteration   1: 0.762 ns/op
Iteration   2: 0.763 ns/op
Iteration   3: 0.765 ns/op
Iteration   4: 0.765 ns/op
Iteration   5: 0.765 ns/op

# Run progress: 40.48% complete, ETA 00:41:46
# Fork: 3 of 3
# Warmup Iteration   1: 0.815 ns/op
# Warmup Iteration   2: 0.839 ns/op
# Warmup Iteration   3: 0.831 ns/op
# Warmup Iteration   4: 0.825 ns/op
# Warmup Iteration   5: 0.823 ns/op
Iteration   1: 0.825 ns/op
Iteration   2: 0.825 ns/op
Iteration   3: 0.824 ns/op
Iteration   4: 0.824 ns/op
Iteration   5: 0.825 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.fma":
  0.794 ±(99.9%) 0.030 ns/op [Average]
  (min, avg, max) = (0.762, 0.794, 0.825), stdev = 0.028
  CI (99.9%): [0.764, 0.824] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log
# Parameters: (size = 262144)

# Run progress: 42.86% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 7.523 ns/op
# Warmup Iteration   2: 8.558 ns/op
# Warmup Iteration   3: 8.447 ns/op
# Warmup Iteration   4: 8.371 ns/op
# Warmup Iteration   5: 8.361 ns/op
Iteration   1: 8.345 ns/op
Iteration   2: 8.329 ns/op
Iteration   3: 8.316 ns/op
Iteration   4: 8.298 ns/op
Iteration   5: 8.289 ns/op

# Run progress: 45.24% complete, ETA 00:38:26
# Fork: 2 of 3
# Warmup Iteration   1: 7.453 ns/op
# Warmup Iteration   2: 7.490 ns/op
# Warmup Iteration   3: 7.520 ns/op
# Warmup Iteration   4: 7.538 ns/op
# Warmup Iteration   5: 7.528 ns/op
Iteration   1: 7.553 ns/op
Iteration   2: 7.561 ns/op
Iteration   3: 7.564 ns/op
Iteration   4: 7.561 ns/op
Iteration   5: 7.562 ns/op

# Run progress: 47.62% complete, ETA 00:36:46
# Fork: 3 of 3
# Warmup Iteration   1: 7.584 ns/op
# Warmup Iteration   2: 7.582 ns/op
# Warmup Iteration   3: 7.585 ns/op
# Warmup Iteration   4: 7.578 ns/op
# Warmup Iteration   5: 7.570 ns/op
Iteration   1: 7.572 ns/op
Iteration   2: 7.582 ns/op
Iteration   3: 7.586 ns/op
Iteration   4: 7.573 ns/op
Iteration   5: 7.570 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log":
  7.817 ±(99.9%) 0.390 ns/op [Average]
  (min, avg, max) = (7.553, 7.817, 8.345), stdev = 0.365
  CI (99.9%): [7.428, 8.207] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log10
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 9.390 ns/op
# Warmup Iteration   2: 9.272 ns/op
# Warmup Iteration   3: 9.232 ns/op
# Warmup Iteration   4: 9.213 ns/op
# Warmup Iteration   5: 9.201 ns/op
Iteration   1: 9.188 ns/op
Iteration   2: 9.177 ns/op
Iteration   3: 9.164 ns/op
Iteration   4: 9.142 ns/op
Iteration   5: 9.142 ns/op

# Run progress: 52.38% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 8.979 ns/op
# Warmup Iteration   2: 8.986 ns/op
# Warmup Iteration   3: 8.965 ns/op
# Warmup Iteration   4: 8.964 ns/op
# Warmup Iteration   5: 8.945 ns/op
Iteration   1: 8.957 ns/op
Iteration   2: 8.957 ns/op
Iteration   3: 8.969 ns/op
Iteration   4: 8.947 ns/op
Iteration   5: 8.934 ns/op

# Run progress: 54.76% complete, ETA 00:31:45
# Fork: 3 of 3
# Warmup Iteration   1: 9.140 ns/op
# Warmup Iteration   2: 9.100 ns/op
# Warmup Iteration   3: 9.087 ns/op
# Warmup Iteration   4: 9.102 ns/op
# Warmup Iteration   5: 9.087 ns/op
Iteration   1: 9.071 ns/op
Iteration   2: 9.061 ns/op
Iteration   3: 9.053 ns/op
Iteration   4: 9.058 ns/op
Iteration   5: 9.055 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log10":
  9.058 ±(99.9%) 0.096 ns/op [Average]
  (min, avg, max) = (8.934, 9.058, 9.188), stdev = 0.090
  CI (99.9%): [8.963, 9.154] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.max
# Parameters: (size = 262144)

# Run progress: 57.14% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 5.377 ns/op
# Warmup Iteration   2: 5.369 ns/op
# Warmup Iteration   3: 5.366 ns/op
# Warmup Iteration   4: 5.360 ns/op
# Warmup Iteration   5: 5.354 ns/op
Iteration   1: 5.368 ns/op
Iteration   2: 5.381 ns/op
Iteration   3: 5.372 ns/op
Iteration   4: 5.366 ns/op
Iteration   5: 5.368 ns/op

# Run progress: 59.52% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 4.801 ns/op
# Warmup Iteration   2: 5.408 ns/op
# Warmup Iteration   3: 5.394 ns/op
# Warmup Iteration   4: 5.367 ns/op
# Warmup Iteration   5: 5.353 ns/op
Iteration   1: 5.358 ns/op
Iteration   2: 5.352 ns/op
Iteration   3: 5.361 ns/op
Iteration   4: 5.354 ns/op
Iteration   5: 5.344 ns/op

# Run progress: 61.90% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 5.257 ns/op
# Warmup Iteration   2: 5.255 ns/op
# Warmup Iteration   3: 5.250 ns/op
# Warmup Iteration   4: 5.246 ns/op
# Warmup Iteration   5: 5.252 ns/op
Iteration   1: 5.246 ns/op
Iteration   2: 5.255 ns/op
Iteration   3: 5.263 ns/op
Iteration   4: 5.261 ns/op
Iteration   5: 5.271 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.max":
  5.328 ±(99.9%) 0.055 ns/op [Average]
  (min, avg, max) = (5.246, 5.328, 5.381), stdev = 0.051
  CI (99.9%): [5.273, 5.383] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.min
# Parameters: (size = 262144)

# Run progress: 64.29% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 5.378 ns/op
# Warmup Iteration   2: 5.354 ns/op
# Warmup Iteration   3: 5.345 ns/op
# Warmup Iteration   4: 5.366 ns/op
# Warmup Iteration   5: 5.367 ns/op
Iteration   1: 5.360 ns/op
Iteration   2: 5.349 ns/op
Iteration   3: 5.343 ns/op
Iteration   4: 5.342 ns/op
Iteration   5: 5.341 ns/op

# Run progress: 66.67% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 4.805 ns/op
# Warmup Iteration   2: 4.853 ns/op
# Warmup Iteration   3: 4.866 ns/op
# Warmup Iteration   4: 4.874 ns/op
# Warmup Iteration   5: 4.876 ns/op
Iteration   1: 4.878 ns/op
Iteration   2: 4.877 ns/op
Iteration   3: 4.888 ns/op
Iteration   4: 4.885 ns/op
Iteration   5: 4.883 ns/op

# Run progress: 69.05% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 5.467 ns/op
# Warmup Iteration   2: 5.419 ns/op
# Warmup Iteration   3: 5.394 ns/op
# Warmup Iteration   4: 5.385 ns/op
# Warmup Iteration   5: 5.376 ns/op
Iteration   1: 5.359 ns/op
Iteration   2: 5.366 ns/op
Iteration   3: 5.354 ns/op
Iteration   4: 5.347 ns/op
Iteration   5: 5.344 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.min":
  5.194 ±(99.9%) 0.245 ns/op [Average]
  (min, avg, max) = (4.877, 5.194, 5.366), stdev = 0.229
  CI (99.9%): [4.950, 5.439] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.pow
# Parameters: (size = 262144)

# Run progress: 71.43% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 12.288 ns/op
# Warmup Iteration   2: 13.768 ns/op
# Warmup Iteration   3: 13.731 ns/op
# Warmup Iteration   4: 13.715 ns/op
# Warmup Iteration   5: 13.676 ns/op
Iteration   1: 13.687 ns/op
Iteration   2: 13.665 ns/op
Iteration   3: 13.646 ns/op
Iteration   4: 13.645 ns/op
Iteration   5: 13.647 ns/op

# Run progress: 73.81% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 13.677 ns/op
# Warmup Iteration   2: 13.660 ns/op
# Warmup Iteration   3: 13.639 ns/op
# Warmup Iteration   4: 13.631 ns/op
# Warmup Iteration   5: 13.655 ns/op
Iteration   1: 13.659 ns/op
Iteration   2: 13.646 ns/op
Iteration   3: 13.657 ns/op
Iteration   4: 13.639 ns/op
Iteration   5: 13.642 ns/op

# Run progress: 76.19% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 13.655 ns/op
# Warmup Iteration   2: 13.646 ns/op
# Warmup Iteration   3: 13.642 ns/op
# Warmup Iteration   4: 13.659 ns/op
# Warmup Iteration   5: 13.666 ns/op
Iteration   1: 13.646 ns/op
Iteration   2: 13.618 ns/op
Iteration   3: 13.629 ns/op
Iteration   4: 13.633 ns/op
Iteration   5: 13.642 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.pow":
  13.647 ±(99.9%) 0.017 ns/op [Average]
  (min, avg, max) = (13.618, 13.647, 13.687), stdev = 0.016
  CI (99.9%): [13.629, 13.664] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.round
# Parameters: (size = 262144)

# Run progress: 78.57% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 1.763 ns/op
# Warmup Iteration   2: 1.829 ns/op
# Warmup Iteration   3: 1.839 ns/op
# Warmup Iteration   4: 1.827 ns/op
# Warmup Iteration   5: 1.830 ns/op
Iteration   1: 1.899 ns/op
Iteration   2: 2.167 ns/op
Iteration   3: 2.166 ns/op
Iteration   4: 2.165 ns/op
Iteration   5: 2.168 ns/op

# Run progress: 80.95% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 1.853 ns/op
# Warmup Iteration   2: 1.855 ns/op
# Warmup Iteration   3: 1.853 ns/op
# Warmup Iteration   4: 1.830 ns/op
# Warmup Iteration   5: 1.835 ns/op
Iteration   1: 1.891 ns/op
Iteration   2: 2.159 ns/op
Iteration   3: 2.164 ns/op
Iteration   4: 2.164 ns/op
Iteration   5: 2.168 ns/op

# Run progress: 83.33% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.025 ns/op
# Warmup Iteration   2: 2.011 ns/op
# Warmup Iteration   3: 2.005 ns/op
# Warmup Iteration   4: 1.998 ns/op
# Warmup Iteration   5: 1.986 ns/op
Iteration   1: 2.000 ns/op
Iteration   2: 2.324 ns/op
Iteration   3: 2.320 ns/op
Iteration   4: 2.323 ns/op
Iteration   5: 2.322 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.round":
  2.160 ±(99.9%) 0.149 ns/op [Average]
  (min, avg, max) = (1.891, 2.160, 2.324), stdev = 0.139
  CI (99.9%): [2.011, 2.309] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sin
# Parameters: (size = 262144)

# Run progress: 85.71% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 27.997 ns/op
# Warmup Iteration   2: 28.018 ns/op
# Warmup Iteration   3: 28.002 ns/op
# Warmup Iteration   4: 28.005 ns/op
# Warmup Iteration   5: 28.006 ns/op
Iteration   1: 28.021 ns/op
Iteration   2: 28.055 ns/op
Iteration   3: 28.030 ns/op
Iteration   4: 28.027 ns/op
Iteration   5: 27.986 ns/op

# Run progress: 88.10% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 28.550 ns/op
# Warmup Iteration   2: 28.522 ns/op
# Warmup Iteration   3: 28.480 ns/op
# Warmup Iteration   4: 28.461 ns/op
# Warmup Iteration   5: 28.475 ns/op
Iteration   1: 28.484 ns/op
Iteration   2: 28.435 ns/op
Iteration   3: 28.434 ns/op
Iteration   4: 28.432 ns/op
Iteration   5: 28.444 ns/op

# Run progress: 90.48% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 27.939 ns/op
# Warmup Iteration   2: 27.939 ns/op
# Warmup Iteration   3: 27.939 ns/op
# Warmup Iteration   4: 27.945 ns/op
# Warmup Iteration   5: 27.918 ns/op
Iteration   1: 27.935 ns/op
Iteration   2: 27.939 ns/op
Iteration   3: 27.935 ns/op
Iteration   4: 27.938 ns/op
Iteration   5: 27.960 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sin":
  28.137 ±(99.9%) 0.245 ns/op [Average]
  (min, avg, max) = (27.935, 28.137, 28.484), stdev = 0.229
  CI (99.9%): [27.892, 28.382] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sqrt
# Parameters: (size = 262144)

# Run progress: 92.86% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.796 ns/op
# Warmup Iteration   2: 0.798 ns/op
# Warmup Iteration   3: 0.800 ns/op
# Warmup Iteration   4: 0.801 ns/op
# Warmup Iteration   5: 0.801 ns/op
Iteration   1: 0.801 ns/op
Iteration   2: 0.802 ns/op
Iteration   3: 0.802 ns/op
Iteration   4: 0.803 ns/op
Iteration   5: 0.802 ns/op

# Run progress: 95.24% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 0.764 ns/op
# Warmup Iteration   2: 0.762 ns/op
# Warmup Iteration   3: 0.762 ns/op
# Warmup Iteration   4: 0.762 ns/op
# Warmup Iteration   5: 0.762 ns/op
Iteration   1: 0.762 ns/op
Iteration   2: 0.762 ns/op
Iteration   3: 0.762 ns/op
Iteration   4: 0.762 ns/op
Iteration   5: 0.762 ns/op

# Run progress: 97.62% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 0.763 ns/op
# Warmup Iteration   2: 0.817 ns/op
# Warmup Iteration   3: 0.814 ns/op
# Warmup Iteration   4: 0.810 ns/op
# Warmup Iteration   5: 0.807 ns/op
Iteration   1: 0.807 ns/op
Iteration   2: 0.807 ns/op
Iteration   3: 0.806 ns/op
Iteration   4: 0.805 ns/op
Iteration   5: 0.806 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sqrt":
  0.790 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (0.762, 0.790, 0.807), stdev = 0.021
  CI (99.9%): [0.768, 0.812] (assumes normal distribution)


# Run complete. Total time: 01:10:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                  (size)  Mode  Cnt   Score   Error  Units
DoubleMathBenchmark.abs    262144  avgt   15   0.542 ± 0.033  ns/op
DoubleMathBenchmark.ceil   262144  avgt   15   2.108 ± 0.141  ns/op
DoubleMathBenchmark.cos    262144  avgt   15  28.137 ± 0.271  ns/op
DoubleMathBenchmark.exp    262144  avgt   15   3.831 ± 0.271  ns/op
DoubleMathBenchmark.floor  262144  avgt   15   2.048 ± 0.118  ns/op
DoubleMathBenchmark.fma    262144  avgt   15   0.794 ± 0.030  ns/op
DoubleMathBenchmark.log    262144  avgt   15   7.817 ± 0.390  ns/op
DoubleMathBenchmark.log10  262144  avgt   15   9.058 ± 0.096  ns/op
DoubleMathBenchmark.max    262144  avgt   15   5.328 ± 0.055  ns/op
DoubleMathBenchmark.min    262144  avgt   15   5.194 ± 0.245  ns/op
DoubleMathBenchmark.pow    262144  avgt   15  13.647 ± 0.017  ns/op
DoubleMathBenchmark.round  262144  avgt   15   2.160 ± 0.149  ns/op
DoubleMathBenchmark.sin    262144  avgt   15  28.137 ± 0.245  ns/op
DoubleMathBenchmark.sqrt   262144  avgt   15   0.790 ± 0.022  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/DoubleMathBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*VectorizationPatternsSingleIntArrayBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/VectorizationPatternsSingleIntArrayBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.add_const_to_each_array_element
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 25.254 us/op
# Warmup Iteration   2: 25.665 us/op
# Warmup Iteration   3: 25.867 us/op
# Warmup Iteration   4: 25.994 us/op
# Warmup Iteration   5: 26.136 us/op
Iteration   1: 26.130 us/op
Iteration   2: 26.255 us/op
Iteration   3: 26.280 us/op
Iteration   4: 26.293 us/op
Iteration   5: 26.276 us/op

# Run progress: 2.78% complete, ETA 00:58:29
# Fork: 2 of 3
# Warmup Iteration   1: 26.026 us/op
# Warmup Iteration   2: 30.924 us/op
# Warmup Iteration   3: 30.631 us/op
# Warmup Iteration   4: 30.433 us/op
# Warmup Iteration   5: 30.280 us/op
Iteration   1: 30.068 us/op
Iteration   2: 30.097 us/op
Iteration   3: 30.086 us/op
Iteration   4: 29.962 us/op
Iteration   5: 30.058 us/op

# Run progress: 5.56% complete, ETA 00:56:49
# Fork: 3 of 3
# Warmup Iteration   1: 29.758 us/op
# Warmup Iteration   2: 29.744 us/op
# Warmup Iteration   3: 29.996 us/op
# Warmup Iteration   4: 29.959 us/op
# Warmup Iteration   5: 30.011 us/op
Iteration   1: 29.878 us/op
Iteration   2: 29.928 us/op
Iteration   3: 29.938 us/op
Iteration   4: 29.965 us/op
Iteration   5: 29.959 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.add_const_to_each_array_element":
  28.745 ±(99.9%) 1.956 us/op [Average]
  (min, avg, max) = (26.130, 28.745, 30.097), stdev = 1.830
  CI (99.9%): [26.789, 30.701] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.increment_arrays_elements_backward_iterator
# Parameters: (size = 262144)

# Run progress: 8.33% complete, ETA 00:55:08
# Fork: 1 of 3
# Warmup Iteration   1: 25.231 us/op
# Warmup Iteration   2: 25.665 us/op
# Warmup Iteration   3: 25.941 us/op
# Warmup Iteration   4: 26.120 us/op
# Warmup Iteration   5: 26.195 us/op
Iteration   1: 26.272 us/op
Iteration   2: 26.310 us/op
Iteration   3: 26.339 us/op
Iteration   4: 26.352 us/op
Iteration   5: 26.377 us/op

# Run progress: 11.11% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: 29.686 us/op
# Warmup Iteration   2: 29.300 us/op
# Warmup Iteration   3: 29.399 us/op
# Warmup Iteration   4: 29.271 us/op
# Warmup Iteration   5: 29.131 us/op
Iteration   1: 29.139 us/op
Iteration   2: 29.016 us/op
Iteration   3: 29.015 us/op
Iteration   4: 29.114 us/op
Iteration   5: 29.076 us/op

# Run progress: 13.89% complete, ETA 00:51:48
# Fork: 3 of 3
# Warmup Iteration   1: 29.969 us/op
# Warmup Iteration   2: 29.888 us/op
# Warmup Iteration   3: 30.156 us/op
# Warmup Iteration   4: 30.098 us/op
# Warmup Iteration   5: 30.142 us/op
Iteration   1: 30.124 us/op
Iteration   2: 30.111 us/op
Iteration   3: 30.054 us/op
Iteration   4: 30.046 us/op
Iteration   5: 30.015 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.increment_arrays_elements_backward_iterator":
  28.491 ±(99.9%) 1.750 us/op [Average]
  (min, avg, max) = (26.272, 28.491, 30.124), stdev = 1.637
  CI (99.9%): [26.740, 30.241] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.mod_each_array_element_by_const
# Parameters: (size = 262144)

# Run progress: 16.67% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 234.410 us/op
# Warmup Iteration   2: 228.874 us/op
# Warmup Iteration   3: 228.421 us/op
# Warmup Iteration   4: 229.738 us/op
# Warmup Iteration   5: 229.195 us/op
Iteration   1: 229.080 us/op
Iteration   2: 229.199 us/op
Iteration   3: 228.797 us/op
Iteration   4: 229.046 us/op
Iteration   5: 228.553 us/op

# Run progress: 19.44% complete, ETA 00:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 264.293 us/op
# Warmup Iteration   2: 261.385 us/op
# Warmup Iteration   3: 259.046 us/op
# Warmup Iteration   4: 257.909 us/op
# Warmup Iteration   5: 256.963 us/op
Iteration   1: 256.488 us/op
Iteration   2: 256.536 us/op
Iteration   3: 256.117 us/op
Iteration   4: 255.577 us/op
Iteration   5: 255.403 us/op

# Run progress: 22.22% complete, ETA 00:46:47
# Fork: 3 of 3
# Warmup Iteration   1: 250.963 us/op
# Warmup Iteration   2: 249.932 us/op
# Warmup Iteration   3: 249.130 us/op
# Warmup Iteration   4: 249.270 us/op
# Warmup Iteration   5: 249.203 us/op
Iteration   1: 249.168 us/op
Iteration   2: 249.514 us/op
Iteration   3: 249.287 us/op
Iteration   4: 249.600 us/op
Iteration   5: 249.074 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.mod_each_array_element_by_const":
  244.763 ±(99.9%) 12.754 us/op [Average]
  (min, avg, max) = (228.553, 244.763, 256.536), stdev = 11.930
  CI (99.9%): [232.009, 257.516] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.multiply_each_array_element_by_const
# Parameters: (size = 262144)

# Run progress: 25.00% complete, ETA 00:45:06
# Fork: 1 of 3
# Warmup Iteration   1: 25.973 us/op
# Warmup Iteration   2: 26.447 us/op
# Warmup Iteration   3: 26.600 us/op
# Warmup Iteration   4: 26.792 us/op
# Warmup Iteration   5: 26.952 us/op
Iteration   1: 26.992 us/op
Iteration   2: 27.053 us/op
Iteration   3: 27.069 us/op
Iteration   4: 31.783 us/op
Iteration   5: 26.629 us/op

# Run progress: 27.78% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: 27.173 us/op
# Warmup Iteration   2: 27.198 us/op
# Warmup Iteration   3: 27.161 us/op
# Warmup Iteration   4: 27.205 us/op
# Warmup Iteration   5: 27.190 us/op
Iteration   1: 27.193 us/op
Iteration   2: 27.245 us/op
Iteration   3: 27.250 us/op
Iteration   4: 27.234 us/op
Iteration   5: 27.232 us/op

# Run progress: 30.56% complete, ETA 00:41:46
# Fork: 3 of 3
# Warmup Iteration   1: 30.788 us/op
# Warmup Iteration   2: 30.421 us/op
# Warmup Iteration   3: 30.054 us/op
# Warmup Iteration   4: 29.973 us/op
# Warmup Iteration   5: 29.955 us/op
Iteration   1: 29.906 us/op
Iteration   2: 29.884 us/op
Iteration   3: 29.881 us/op
Iteration   4: 29.825 us/op
Iteration   5: 29.825 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.multiply_each_array_element_by_const":
  28.333 ±(99.9%) 1.753 us/op [Average]
  (min, avg, max) = (26.629, 28.333, 31.783), stdev = 1.640
  CI (99.9%): [26.580, 30.086] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.saves_induction_variable_to_each_array_element
# Parameters: (size = 262144)

# Run progress: 33.33% complete, ETA 00:40:05
# Fork: 1 of 3
# Warmup Iteration   1: 90.330 us/op
# Warmup Iteration   2: 89.456 us/op
# Warmup Iteration   3: 88.971 us/op
# Warmup Iteration   4: 88.737 us/op
# Warmup Iteration   5: 88.643 us/op
Iteration   1: 88.267 us/op
Iteration   2: 88.158 us/op
Iteration   3: 88.003 us/op
Iteration   4: 88.015 us/op
Iteration   5: 88.055 us/op

# Run progress: 36.11% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 79.134 us/op
# Warmup Iteration   2: 79.004 us/op
# Warmup Iteration   3: 78.966 us/op
# Warmup Iteration   4: 78.976 us/op
# Warmup Iteration   5: 79.015 us/op
Iteration   1: 78.994 us/op
Iteration   2: 79.304 us/op
Iteration   3: 79.566 us/op
Iteration   4: 79.500 us/op
Iteration   5: 79.514 us/op

# Run progress: 38.89% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 90.713 us/op
# Warmup Iteration   2: 89.458 us/op
# Warmup Iteration   3: 89.118 us/op
# Warmup Iteration   4: 88.586 us/op
# Warmup Iteration   5: 88.151 us/op
Iteration   1: 88.121 us/op
Iteration   2: 87.963 us/op
Iteration   3: 87.805 us/op
Iteration   4: 87.864 us/op
Iteration   5: 87.894 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.saves_induction_variable_to_each_array_element":
  85.135 ±(99.9%) 4.510 us/op [Average]
  (min, avg, max) = (78.994, 85.135, 88.267), stdev = 4.219
  CI (99.9%): [80.625, 89.645] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.shl_each_array_element_by_const
# Parameters: (size = 262144)

# Run progress: 41.67% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 21.272 us/op
# Warmup Iteration   2: 21.396 us/op
# Warmup Iteration   3: 21.538 us/op
# Warmup Iteration   4: 21.664 us/op
# Warmup Iteration   5: 21.720 us/op
Iteration   1: 21.731 us/op
Iteration   2: 21.773 us/op
Iteration   3: 21.763 us/op
Iteration   4: 21.794 us/op
Iteration   5: 21.820 us/op

# Run progress: 44.44% complete, ETA 00:33:24
# Fork: 2 of 3
# Warmup Iteration   1: 24.404 us/op
# Warmup Iteration   2: 24.767 us/op
# Warmup Iteration   3: 25.148 us/op
# Warmup Iteration   4: 24.957 us/op
# Warmup Iteration   5: 24.854 us/op
Iteration   1: 24.816 us/op
Iteration   2: 24.829 us/op
Iteration   3: 24.836 us/op
Iteration   4: 21.370 us/op
Iteration   5: 21.736 us/op

# Run progress: 47.22% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 21.839 us/op
# Warmup Iteration   2: 21.812 us/op
# Warmup Iteration   3: 21.848 us/op
# Warmup Iteration   4: 21.837 us/op
# Warmup Iteration   5: 21.884 us/op
Iteration   1: 21.856 us/op
Iteration   2: 21.864 us/op
Iteration   3: 21.874 us/op
Iteration   4: 21.926 us/op
Iteration   5: 21.925 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.shl_each_array_element_by_const":
  22.394 ±(99.9%) 1.353 us/op [Average]
  (min, avg, max) = (21.370, 22.394, 24.836), stdev = 1.266
  CI (99.9%): [21.041, 23.747] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 67.179 us/op
# Warmup Iteration   2: 66.816 us/op
# Warmup Iteration   3: 66.574 us/op
# Warmup Iteration   4: 66.559 us/op
# Warmup Iteration   5: 66.784 us/op
Iteration   1: 66.553 us/op
Iteration   2: 66.548 us/op
Iteration   3: 66.563 us/op
Iteration   4: 66.551 us/op
Iteration   5: 66.558 us/op

# Run progress: 52.78% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 66.725 us/op
# Warmup Iteration   2: 66.567 us/op
# Warmup Iteration   3: 66.587 us/op
# Warmup Iteration   4: 66.538 us/op
# Warmup Iteration   5: 66.553 us/op
Iteration   1: 66.587 us/op
Iteration   2: 66.571 us/op
Iteration   3: 66.553 us/op
Iteration   4: 66.565 us/op
Iteration   5: 66.541 us/op

# Run progress: 55.56% complete, ETA 00:26:43
# Fork: 3 of 3
# Warmup Iteration   1: 73.648 us/op
# Warmup Iteration   2: 72.812 us/op
# Warmup Iteration   3: 72.598 us/op
# Warmup Iteration   4: 72.382 us/op
# Warmup Iteration   5: 72.304 us/op
Iteration   1: 72.084 us/op
Iteration   2: 72.010 us/op
Iteration   3: 71.974 us/op
Iteration   4: 71.969 us/op
Iteration   5: 71.940 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements":
  68.371 ±(99.9%) 2.836 us/op [Average]
  (min, avg, max) = (66.541, 68.371, 72.084), stdev = 2.653
  CI (99.9%): [65.535, 71.207] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_adding_a_const
# Parameters: (size = 262144)

# Run progress: 58.33% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 74.999 us/op
# Warmup Iteration   2: 74.859 us/op
# Warmup Iteration   3: 74.847 us/op
# Warmup Iteration   4: 74.852 us/op
# Warmup Iteration   5: 74.872 us/op
Iteration   1: 74.852 us/op
Iteration   2: 74.863 us/op
Iteration   3: 74.857 us/op
Iteration   4: 74.856 us/op
Iteration   5: 74.874 us/op

# Run progress: 61.11% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 81.601 us/op
# Warmup Iteration   2: 81.133 us/op
# Warmup Iteration   3: 80.930 us/op
# Warmup Iteration   4: 80.820 us/op
# Warmup Iteration   5: 80.672 us/op
Iteration   1: 80.623 us/op
Iteration   2: 80.703 us/op
Iteration   3: 80.675 us/op
Iteration   4: 80.649 us/op
Iteration   5: 80.570 us/op

# Run progress: 63.89% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 78.313 us/op
# Warmup Iteration   2: 78.547 us/op
# Warmup Iteration   3: 78.605 us/op
# Warmup Iteration   4: 78.656 us/op
# Warmup Iteration   5: 80.921 us/op
Iteration   1: 79.633 us/op
Iteration   2: 79.102 us/op
Iteration   3: 78.870 us/op
Iteration   4: 78.767 us/op
Iteration   5: 78.821 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_adding_a_const":
  78.181 ±(99.9%) 2.705 us/op [Average]
  (min, avg, max) = (74.852, 78.181, 80.703), stdev = 2.530
  CI (99.9%): [75.476, 80.886] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_shifting_and_masking
# Parameters: (size = 262144)

# Run progress: 66.67% complete, ETA 00:20:02
# Fork: 1 of 3
# Warmup Iteration   1: 57.518 us/op
# Warmup Iteration   2: 61.516 us/op
# Warmup Iteration   3: 55.499 us/op
# Warmup Iteration   4: 55.585 us/op
# Warmup Iteration   5: 55.757 us/op
Iteration   1: 55.863 us/op
Iteration   2: 55.936 us/op
Iteration   3: 55.880 us/op
Iteration   4: 55.970 us/op
Iteration   5: 55.954 us/op

# Run progress: 69.44% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 65.551 us/op
# Warmup Iteration   2: 67.676 us/op
# Warmup Iteration   3: 62.013 us/op
# Warmup Iteration   4: 61.750 us/op
# Warmup Iteration   5: 61.656 us/op
Iteration   1: 61.604 us/op
Iteration   2: 61.497 us/op
Iteration   3: 61.420 us/op
Iteration   4: 61.272 us/op
Iteration   5: 61.235 us/op

# Run progress: 72.22% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 57.519 us/op
# Warmup Iteration   2: 67.338 us/op
# Warmup Iteration   3: 61.719 us/op
# Warmup Iteration   4: 61.533 us/op
# Warmup Iteration   5: 61.362 us/op
Iteration   1: 61.308 us/op
Iteration   2: 61.293 us/op
Iteration   3: 61.135 us/op
Iteration   4: 61.139 us/op
Iteration   5: 61.229 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_shifting_and_masking":
  59.516 ±(99.9%) 2.816 us/op [Average]
  (min, avg, max) = (55.863, 59.516, 61.604), stdev = 2.634
  CI (99.9%): [56.699, 62.332] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_long_stride
# Parameters: (size = 262144)

# Run progress: 75.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 149.800 us/op
# Warmup Iteration   2: 158.172 us/op
# Warmup Iteration   3: 162.330 us/op
# Warmup Iteration   4: 161.834 us/op
# Warmup Iteration   5: 161.341 us/op
Iteration   1: 161.223 us/op
Iteration   2: 161.026 us/op
Iteration   3: 161.251 us/op
Iteration   4: 161.152 us/op
Iteration   5: 161.340 us/op

# Run progress: 77.78% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 161.654 us/op
# Warmup Iteration   2: 157.463 us/op
# Warmup Iteration   3: 161.305 us/op
# Warmup Iteration   4: 161.289 us/op
# Warmup Iteration   5: 161.219 us/op
Iteration   1: 161.217 us/op
Iteration   2: 161.238 us/op
Iteration   3: 161.155 us/op
Iteration   4: 160.994 us/op
Iteration   5: 161.029 us/op

# Run progress: 80.56% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 164.048 us/op
# Warmup Iteration   2: 160.775 us/op
# Warmup Iteration   3: 163.699 us/op
# Warmup Iteration   4: 162.474 us/op
# Warmup Iteration   5: 164.151 us/op
Iteration   1: 164.065 us/op
Iteration   2: 163.966 us/op
Iteration   3: 163.748 us/op
Iteration   4: 163.741 us/op
Iteration   5: 163.590 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_long_stride":
  162.049 ±(99.9%) 1.395 us/op [Average]
  (min, avg, max) = (160.994, 162.049, 164.065), stdev = 1.305
  CI (99.9%): [160.654, 163.444] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_matching_a_predicate
# Parameters: (size = 262144)

# Run progress: 83.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 103.041 us/op
# Warmup Iteration   2: 73.976 us/op
# Warmup Iteration   3: 89.136 us/op
# Warmup Iteration   4: 89.325 us/op
# Warmup Iteration   5: 89.503 us/op
Iteration   1: 89.680 us/op
Iteration   2: 89.776 us/op
Iteration   3: 89.733 us/op
Iteration   4: 89.947 us/op
Iteration   5: 89.863 us/op

# Run progress: 86.11% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 120.466 us/op
# Warmup Iteration   2: 89.954 us/op
# Warmup Iteration   3: 99.897 us/op
# Warmup Iteration   4: 99.521 us/op
# Warmup Iteration   5: 99.470 us/op
Iteration   1: 99.124 us/op
Iteration   2: 99.383 us/op
Iteration   3: 98.887 us/op
Iteration   4: 99.095 us/op
Iteration   5: 99.092 us/op

# Run progress: 88.89% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 119.801 us/op
# Warmup Iteration   2: 90.232 us/op
# Warmup Iteration   3: 101.118 us/op
# Warmup Iteration   4: 101.024 us/op
# Warmup Iteration   5: 101.002 us/op
Iteration   1: 100.981 us/op
Iteration   2: 100.993 us/op
Iteration   3: 100.942 us/op
Iteration   4: 101.015 us/op
Iteration   5: 100.849 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_matching_a_predicate":
  96.624 ±(99.9%) 5.405 us/op [Average]
  (min, avg, max) = (89.680, 96.624, 101.015), stdev = 5.056
  CI (99.9%): [91.219, 102.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_even_array_elements
# Parameters: (size = 262144)

# Run progress: 91.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 140.773 us/op
# Warmup Iteration   2: 142.131 us/op
# Warmup Iteration   3: 143.508 us/op
# Warmup Iteration   4: 143.284 us/op
# Warmup Iteration   5: 143.535 us/op
Iteration   1: 143.441 us/op
Iteration   2: 143.274 us/op
Iteration   3: 143.205 us/op
Iteration   4: 143.408 us/op
Iteration   5: 143.396 us/op

# Run progress: 94.44% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 142.139 us/op
# Warmup Iteration   2: 142.899 us/op
# Warmup Iteration   3: 143.628 us/op
# Warmup Iteration   4: 143.719 us/op
# Warmup Iteration   5: 143.564 us/op
Iteration   1: 143.457 us/op
Iteration   2: 143.554 us/op
Iteration   3: 143.526 us/op
Iteration   4: 143.426 us/op
Iteration   5: 143.183 us/op

# Run progress: 97.22% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 133.354 us/op
# Warmup Iteration   2: 133.103 us/op
# Warmup Iteration   3: 133.076 us/op
# Warmup Iteration   4: 133.052 us/op
# Warmup Iteration   5: 133.029 us/op
Iteration   1: 133.033 us/op
Iteration   2: 133.038 us/op
Iteration   3: 133.056 us/op
Iteration   4: 133.069 us/op
Iteration   5: 133.037 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_even_array_elements":
  139.940 ±(99.9%) 5.395 us/op [Average]
  (min, avg, max) = (133.033, 139.940, 143.554), stdev = 5.047
  CI (99.9%): [134.545, 145.335] (assumes normal distribution)


# Run complete. Total time: 01:00:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       (size)  Mode  Cnt    Score    Error  Units
VectorizationPatternsSingleIntArrayBenchmark.add_const_to_each_array_element                    262144  avgt   15   28.745 ±  1.956  us/op
VectorizationPatternsSingleIntArrayBenchmark.increment_arrays_elements_backward_iterator        262144  avgt   15   28.491 ±  1.750  us/op
VectorizationPatternsSingleIntArrayBenchmark.mod_each_array_element_by_const                    262144  avgt   15  244.763 ± 12.754  us/op
VectorizationPatternsSingleIntArrayBenchmark.multiply_each_array_element_by_const               262144  avgt   15   28.333 ±  1.753  us/op
VectorizationPatternsSingleIntArrayBenchmark.saves_induction_variable_to_each_array_element     262144  avgt   15   85.135 ±  4.510  us/op
VectorizationPatternsSingleIntArrayBenchmark.shl_each_array_element_by_const                    262144  avgt   15   22.394 ±  1.353  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements                          262144  avgt   15   68.371 ±  2.836  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_adding_a_const        262144  avgt   15   78.181 ±  2.705  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_shifting_and_masking  262144  avgt   15   59.516 ±  2.816  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_long_stride              262144  avgt   15  162.049 ±  1.395  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_matching_a_predicate     262144  avgt   15   96.624 ±  5.405  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_even_array_elements                     262144  avgt   15  139.940 ±  5.395  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/VectorizationPatternsSingleIntArrayBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*VectorizationPatternsMultipleFloatArraysBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/VectorizationPatternsMultipleFloatArraysBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 52.483 us/op
# Warmup Iteration   2: 53.389 us/op
# Warmup Iteration   3: 53.738 us/op
# Warmup Iteration   4: 53.902 us/op
# Warmup Iteration   5: 54.105 us/op
Iteration   1: 54.252 us/op
Iteration   2: 54.244 us/op
Iteration   3: 54.295 us/op
Iteration   4: 54.470 us/op
Iteration   5: 54.439 us/op

# Run progress: 2.38% complete, ETA 01:08:32
# Fork: 2 of 3
# Warmup Iteration   1: 54.806 us/op
# Warmup Iteration   2: 54.727 us/op
# Warmup Iteration   3: 54.717 us/op
# Warmup Iteration   4: 54.659 us/op
# Warmup Iteration   5: 54.668 us/op
Iteration   1: 54.854 us/op
Iteration   2: 54.933 us/op
Iteration   3: 54.880 us/op
Iteration   4: 54.963 us/op
Iteration   5: 54.862 us/op

# Run progress: 4.76% complete, ETA 01:06:50
# Fork: 3 of 3
# Warmup Iteration   1: 61.976 us/op
# Warmup Iteration   2: 61.118 us/op
# Warmup Iteration   3: 60.607 us/op
# Warmup Iteration   4: 60.291 us/op
# Warmup Iteration   5: 60.122 us/op
Iteration   1: 60.116 us/op
Iteration   2: 60.039 us/op
Iteration   3: 60.027 us/op
Iteration   4: 60.053 us/op
Iteration   5: 59.756 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements":
  56.412 ±(99.9%) 2.819 us/op [Average]
  (min, avg, max) = (54.244, 56.412, 60.116), stdev = 2.637
  CI (99.9%): [53.593, 59.231] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_inc_index_access
# Parameters: (size = 262144)

# Run progress: 7.14% complete, ETA 01:05:10
# Fork: 1 of 3
# Warmup Iteration   1: 124.966 us/op
# Warmup Iteration   2: 123.823 us/op
# Warmup Iteration   3: 122.542 us/op
# Warmup Iteration   4: 122.576 us/op
# Warmup Iteration   5: 122.051 us/op
Iteration   1: 121.804 us/op
Iteration   2: 121.755 us/op
Iteration   3: 121.627 us/op
Iteration   4: 121.486 us/op
Iteration   5: 121.490 us/op

# Run progress: 9.52% complete, ETA 01:03:30
# Fork: 2 of 3
# Warmup Iteration   1: 108.046 us/op
# Warmup Iteration   2: 108.677 us/op
# Warmup Iteration   3: 108.978 us/op
# Warmup Iteration   4: 109.236 us/op
# Warmup Iteration   5: 109.633 us/op
Iteration   1: 109.616 us/op
Iteration   2: 109.634 us/op
Iteration   3: 109.776 us/op
Iteration   4: 109.969 us/op
Iteration   5: 109.621 us/op

# Run progress: 11.90% complete, ETA 01:01:50
# Fork: 3 of 3
# Warmup Iteration   1: 108.071 us/op
# Warmup Iteration   2: 107.935 us/op
# Warmup Iteration   3: 107.543 us/op
# Warmup Iteration   4: 107.547 us/op
# Warmup Iteration   5: 107.488 us/op
Iteration   1: 107.590 us/op
Iteration   2: 107.800 us/op
Iteration   3: 107.759 us/op
Iteration   4: 107.699 us/op
Iteration   5: 107.663 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_inc_index_access":
  113.019 ±(99.9%) 6.802 us/op [Average]
  (min, avg, max) = (107.590, 113.019, 121.804), stdev = 6.363
  CI (99.9%): [106.217, 119.822] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_modulo_index_access
# Parameters: (size = 262144)

# Run progress: 14.29% complete, ETA 01:00:09
# Fork: 1 of 3
# Warmup Iteration   1: 182.862 us/op
# Warmup Iteration   2: 181.611 us/op
# Warmup Iteration   3: 181.059 us/op
# Warmup Iteration   4: 180.703 us/op
# Warmup Iteration   5: 180.175 us/op
Iteration   1: 179.766 us/op
Iteration   2: 179.461 us/op
Iteration   3: 179.227 us/op
Iteration   4: 179.019 us/op
Iteration   5: 179.136 us/op

# Run progress: 16.67% complete, ETA 00:58:29
# Fork: 2 of 3
# Warmup Iteration   1: 196.640 us/op
# Warmup Iteration   2: 194.537 us/op
# Warmup Iteration   3: 193.590 us/op
# Warmup Iteration   4: 193.287 us/op
# Warmup Iteration   5: 192.870 us/op
Iteration   1: 192.766 us/op
Iteration   2: 192.248 us/op
Iteration   3: 192.064 us/op
Iteration   4: 191.965 us/op
Iteration   5: 191.765 us/op

# Run progress: 19.05% complete, ETA 00:56:48
# Fork: 3 of 3
# Warmup Iteration   1: 191.836 us/op
# Warmup Iteration   2: 191.878 us/op
# Warmup Iteration   3: 191.460 us/op
# Warmup Iteration   4: 191.392 us/op
# Warmup Iteration   5: 191.521 us/op
Iteration   1: 191.332 us/op
Iteration   2: 191.352 us/op
Iteration   3: 191.455 us/op
Iteration   4: 191.339 us/op
Iteration   5: 191.232 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_modulo_index_access":
  187.609 ±(99.9%) 6.501 us/op [Average]
  (min, avg, max) = (179.019, 187.609, 192.766), stdev = 6.081
  CI (99.9%): [181.108, 194.109] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.divide_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 21.43% complete, ETA 00:55:08
# Fork: 1 of 3
# Warmup Iteration   1: 62.694 us/op
# Warmup Iteration   2: 63.172 us/op
# Warmup Iteration   3: 63.578 us/op
# Warmup Iteration   4: 63.943 us/op
# Warmup Iteration   5: 63.978 us/op
Iteration   1: 64.028 us/op
Iteration   2: 64.073 us/op
Iteration   3: 63.984 us/op
Iteration   4: 64.016 us/op
Iteration   5: 64.095 us/op

# Run progress: 23.81% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: 53.850 us/op
# Warmup Iteration   2: 55.252 us/op
# Warmup Iteration   3: 55.559 us/op
# Warmup Iteration   4: 55.765 us/op
# Warmup Iteration   5: 55.812 us/op
Iteration   1: 55.838 us/op
Iteration   2: 55.918 us/op
Iteration   3: 55.866 us/op
Iteration   4: 56.001 us/op
Iteration   5: 56.085 us/op

# Run progress: 26.19% complete, ETA 00:51:48
# Fork: 3 of 3
# Warmup Iteration   1: 67.705 us/op
# Warmup Iteration   2: 66.304 us/op
# Warmup Iteration   3: 65.757 us/op
# Warmup Iteration   4: 65.313 us/op
# Warmup Iteration   5: 65.073 us/op
Iteration   1: 64.962 us/op
Iteration   2: 65.076 us/op
Iteration   3: 64.732 us/op
Iteration   4: 64.749 us/op
Iteration   5: 64.772 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.divide_2_arrays_elements":
  61.613 ±(99.9%) 4.454 us/op [Average]
  (min, avg, max) = (55.838, 61.613, 65.076), stdev = 4.167
  CI (99.9%): [57.159, 66.067] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.extract_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 28.57% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 53.286 us/op
# Warmup Iteration   2: 60.413 us/op
# Warmup Iteration   3: 60.195 us/op
# Warmup Iteration   4: 60.143 us/op
# Warmup Iteration   5: 60.022 us/op
Iteration   1: 59.838 us/op
Iteration   2: 59.832 us/op
Iteration   3: 59.907 us/op
Iteration   4: 59.888 us/op
Iteration   5: 59.837 us/op

# Run progress: 30.95% complete, ETA 00:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 59.975 us/op
# Warmup Iteration   2: 59.824 us/op
# Warmup Iteration   3: 59.820 us/op
# Warmup Iteration   4: 59.889 us/op
# Warmup Iteration   5: 59.852 us/op
Iteration   1: 59.977 us/op
Iteration   2: 59.870 us/op
Iteration   3: 59.822 us/op
Iteration   4: 59.906 us/op
Iteration   5: 59.964 us/op

# Run progress: 33.33% complete, ETA 00:46:47
# Fork: 3 of 3
# Warmup Iteration   1: 64.557 us/op
# Warmup Iteration   2: 53.301 us/op
# Warmup Iteration   3: 53.924 us/op
# Warmup Iteration   4: 54.379 us/op
# Warmup Iteration   5: 54.573 us/op
Iteration   1: 54.692 us/op
Iteration   2: 54.779 us/op
Iteration   3: 54.885 us/op
Iteration   4: 54.826 us/op
Iteration   5: 54.884 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.extract_2_arrays_elements":
  58.194 ±(99.9%) 2.646 us/op [Average]
  (min, avg, max) = (54.692, 58.194, 59.977), stdev = 2.475
  CI (99.9%): [55.548, 60.840] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.if_with_masking_conditional_flow
# Parameters: (size = 262144)

# Run progress: 35.71% complete, ETA 00:45:06
# Fork: 1 of 3
# Warmup Iteration   1: 161.799 us/op
# Warmup Iteration   2: 175.401 us/op
# Warmup Iteration   3: 172.020 us/op
# Warmup Iteration   4: 170.998 us/op
# Warmup Iteration   5: 169.971 us/op
Iteration   1: 168.884 us/op
Iteration   2: 168.550 us/op
Iteration   3: 167.962 us/op
Iteration   4: 168.009 us/op
Iteration   5: 167.853 us/op

# Run progress: 38.10% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: 173.845 us/op
# Warmup Iteration   2: 172.632 us/op
# Warmup Iteration   3: 172.262 us/op
# Warmup Iteration   4: 171.791 us/op
# Warmup Iteration   5: 171.712 us/op
Iteration   1: 171.758 us/op
Iteration   2: 171.604 us/op
Iteration   3: 172.581 us/op
Iteration   4: 174.063 us/op
Iteration   5: 173.510 us/op

# Run progress: 40.48% complete, ETA 00:41:46
# Fork: 3 of 3
# Warmup Iteration   1: 150.410 us/op
# Warmup Iteration   2: 152.530 us/op
# Warmup Iteration   3: 152.246 us/op
# Warmup Iteration   4: 152.369 us/op
# Warmup Iteration   5: 152.366 us/op
Iteration   1: 152.369 us/op
Iteration   2: 152.735 us/op
Iteration   3: 152.743 us/op
Iteration   4: 153.066 us/op
Iteration   5: 152.770 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.if_with_masking_conditional_flow":
  164.564 ±(99.9%) 9.495 us/op [Average]
  (min, avg, max) = (152.369, 164.564, 174.063), stdev = 8.881
  CI (99.9%): [155.069, 174.059] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.mod_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 42.86% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 4523.820 us/op
# Warmup Iteration   2: 4487.153 us/op
# Warmup Iteration   3: 4474.459 us/op
# Warmup Iteration   4: 4456.008 us/op
# Warmup Iteration   5: 4002.819 us/op
Iteration   1: 4015.861 us/op
Iteration   2: 4019.820 us/op
Iteration   3: 4022.815 us/op
Iteration   4: 4032.304 us/op
Iteration   5: 4030.360 us/op

# Run progress: 45.24% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 3913.658 us/op
# Warmup Iteration   2: 3926.901 us/op
# Warmup Iteration   3: 3937.202 us/op
# Warmup Iteration   4: 3938.932 us/op
# Warmup Iteration   5: 3951.358 us/op
Iteration   1: 3945.787 us/op
Iteration   2: 3952.065 us/op
Iteration   3: 3958.087 us/op
Iteration   4: 3961.358 us/op
Iteration   5: 3955.063 us/op

# Run progress: 47.62% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 4063.281 us/op
# Warmup Iteration   2: 4128.665 us/op
# Warmup Iteration   3: 4098.207 us/op
# Warmup Iteration   4: 4057.084 us/op
# Warmup Iteration   5: 4046.283 us/op
Iteration   1: 4039.598 us/op
Iteration   2: 4047.778 us/op
Iteration   3: 4045.291 us/op
Iteration   4: 4043.557 us/op
Iteration   5: 4048.826 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.mod_2_arrays_elements":
  4007.905 ±(99.9%) 43.220 us/op [Average]
  (min, avg, max) = (3945.787, 4007.905, 4048.826), stdev = 40.428
  CI (99.9%): [3964.684, 4051.125] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 59.985 us/op
# Warmup Iteration   2: 59.974 us/op
# Warmup Iteration   3: 59.999 us/op
# Warmup Iteration   4: 60.141 us/op
# Warmup Iteration   5: 60.109 us/op
Iteration   1: 60.050 us/op
Iteration   2: 60.122 us/op
Iteration   3: 60.042 us/op
Iteration   4: 60.123 us/op
Iteration   5: 60.313 us/op

# Run progress: 52.38% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 53.806 us/op
# Warmup Iteration   2: 54.260 us/op
# Warmup Iteration   3: 54.678 us/op
# Warmup Iteration   4: 54.934 us/op
# Warmup Iteration   5: 54.988 us/op
Iteration   1: 55.101 us/op
Iteration   2: 55.116 us/op
Iteration   3: 55.111 us/op
Iteration   4: 55.117 us/op
Iteration   5: 55.123 us/op

# Run progress: 54.76% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 55.242 us/op
# Warmup Iteration   2: 56.511 us/op
# Warmup Iteration   3: 56.616 us/op
# Warmup Iteration   4: 56.696 us/op
# Warmup Iteration   5: 56.903 us/op
Iteration   1: 56.834 us/op
Iteration   2: 56.878 us/op
Iteration   3: 56.942 us/op
Iteration   4: 56.904 us/op
Iteration   5: 57.028 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements":
  57.387 ±(99.9%) 2.297 us/op [Average]
  (min, avg, max) = (55.101, 57.387, 60.313), stdev = 2.149
  CI (99.9%): [55.090, 59.684] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_backward_iterator
# Parameters: (size = 262144)

# Run progress: 57.14% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 57.233 us/op
# Warmup Iteration   2: 57.303 us/op
# Warmup Iteration   3: 57.293 us/op
# Warmup Iteration   4: 57.405 us/op
# Warmup Iteration   5: 57.437 us/op
Iteration   1: 57.349 us/op
Iteration   2: 57.405 us/op
Iteration   3: 57.509 us/op
Iteration   4: 57.531 us/op
Iteration   5: 57.600 us/op

# Run progress: 59.52% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 64.085 us/op
# Warmup Iteration   2: 62.898 us/op
# Warmup Iteration   3: 62.106 us/op
# Warmup Iteration   4: 61.842 us/op
# Warmup Iteration   5: 61.868 us/op
Iteration   1: 61.745 us/op
Iteration   2: 61.784 us/op
Iteration   3: 61.647 us/op
Iteration   4: 61.512 us/op
Iteration   5: 61.132 us/op

# Run progress: 61.90% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 55.680 us/op
# Warmup Iteration   2: 55.445 us/op
# Warmup Iteration   3: 55.742 us/op
# Warmup Iteration   4: 55.789 us/op
# Warmup Iteration   5: 55.873 us/op
Iteration   1: 55.938 us/op
Iteration   2: 55.986 us/op
Iteration   3: 56.016 us/op
Iteration   4: 56.033 us/op
Iteration   5: 56.138 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_backward_iterator":
  58.355 ±(99.9%) 2.601 us/op [Average]
  (min, avg, max) = (55.938, 58.355, 61.784), stdev = 2.433
  CI (99.9%): [55.754, 60.956] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_long_stride
# Parameters: (size = 262144)

# Run progress: 64.29% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 251.133 us/op
# Warmup Iteration   2: 270.816 us/op
# Warmup Iteration   3: 269.133 us/op
# Warmup Iteration   4: 265.472 us/op
# Warmup Iteration   5: 263.727 us/op
Iteration   1: 262.181 us/op
Iteration   2: 261.471 us/op
Iteration   3: 260.761 us/op
Iteration   4: 259.980 us/op
Iteration   5: 259.670 us/op

# Run progress: 66.67% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 267.343 us/op
# Warmup Iteration   2: 266.113 us/op
# Warmup Iteration   3: 265.352 us/op
# Warmup Iteration   4: 266.642 us/op
# Warmup Iteration   5: 266.123 us/op
Iteration   1: 265.612 us/op
Iteration   2: 265.109 us/op
Iteration   3: 264.878 us/op
Iteration   4: 264.623 us/op
Iteration   5: 264.438 us/op

# Run progress: 69.05% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 228.738 us/op
# Warmup Iteration   2: 230.961 us/op
# Warmup Iteration   3: 232.365 us/op
# Warmup Iteration   4: 234.086 us/op
# Warmup Iteration   5: 234.486 us/op
Iteration   1: 235.012 us/op
Iteration   2: 234.611 us/op
Iteration   3: 234.630 us/op
Iteration   4: 234.405 us/op
Iteration   5: 234.244 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_long_stride":
  253.442 ±(99.9%) 14.890 us/op [Average]
  (min, avg, max) = (234.244, 253.442, 265.612), stdev = 13.928
  CI (99.9%): [238.551, 268.332] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_of_mixed_types
# Parameters: (size = 262144)

# Run progress: 71.43% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 149.915 us/op
# Warmup Iteration   2: 145.558 us/op
# Warmup Iteration   3: 140.530 us/op
# Warmup Iteration   4: 140.597 us/op
# Warmup Iteration   5: 124.449 us/op
Iteration   1: 125.483 us/op
Iteration   2: 126.068 us/op
Iteration   3: 126.268 us/op
Iteration   4: 126.478 us/op
Iteration   5: 126.771 us/op

# Run progress: 73.81% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 132.924 us/op
# Warmup Iteration   2: 129.050 us/op
# Warmup Iteration   3: 126.251 us/op
# Warmup Iteration   4: 126.225 us/op
# Warmup Iteration   5: 126.443 us/op
Iteration   1: 126.764 us/op
Iteration   2: 126.343 us/op
Iteration   3: 126.493 us/op
Iteration   4: 126.485 us/op
Iteration   5: 126.530 us/op

# Run progress: 76.19% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 130.089 us/op
# Warmup Iteration   2: 126.911 us/op
# Warmup Iteration   3: 124.422 us/op
# Warmup Iteration   4: 124.587 us/op
# Warmup Iteration   5: 124.590 us/op
Iteration   1: 124.417 us/op
Iteration   2: 124.549 us/op
Iteration   3: 124.665 us/op
Iteration   4: 124.596 us/op
Iteration   5: 124.467 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_of_mixed_types":
  125.759 ±(99.9%) 1.009 us/op [Average]
  (min, avg, max) = (124.417, 125.759, 126.771), stdev = 0.944
  CI (99.9%): [124.750, 126.767] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_stride_2
# Parameters: (size = 262144)

# Run progress: 78.57% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 76.424 us/op
# Warmup Iteration   2: 77.562 us/op
# Warmup Iteration   3: 77.285 us/op
# Warmup Iteration   4: 77.584 us/op
# Warmup Iteration   5: 77.423 us/op
Iteration   1: 77.588 us/op
Iteration   2: 77.397 us/op
Iteration   3: 77.562 us/op
Iteration   4: 77.825 us/op
Iteration   5: 77.918 us/op

# Run progress: 80.95% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 78.251 us/op
# Warmup Iteration   2: 78.507 us/op
# Warmup Iteration   3: 77.882 us/op
# Warmup Iteration   4: 78.010 us/op
# Warmup Iteration   5: 77.961 us/op
Iteration   1: 77.922 us/op
Iteration   2: 77.962 us/op
Iteration   3: 77.942 us/op
Iteration   4: 77.692 us/op
Iteration   5: 77.899 us/op

# Run progress: 83.33% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 87.549 us/op
# Warmup Iteration   2: 86.900 us/op
# Warmup Iteration   3: 85.831 us/op
# Warmup Iteration   4: 85.530 us/op
# Warmup Iteration   5: 85.314 us/op
Iteration   1: 85.113 us/op
Iteration   2: 85.998 us/op
Iteration   3: 89.150 us/op
Iteration   4: 89.957 us/op
Iteration   5: 85.635 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_stride_2":
  80.904 ±(99.9%) 5.067 us/op [Average]
  (min, avg, max) = (77.397, 80.904, 89.957), stdev = 4.740
  CI (99.9%): [75.837, 85.971] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count
# Parameters: (size = 262144)

# Run progress: 85.71% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 53.827 us/op
# Warmup Iteration   2: 54.637 us/op
# Warmup Iteration   3: 54.867 us/op
# Warmup Iteration   4: 55.129 us/op
# Warmup Iteration   5: 55.221 us/op
Iteration   1: 55.293 us/op
Iteration   2: 55.253 us/op
Iteration   3: 55.295 us/op
Iteration   4: 55.330 us/op
Iteration   5: 55.448 us/op

# Run progress: 88.10% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 68.072 us/op
# Warmup Iteration   2: 66.700 us/op
# Warmup Iteration   3: 66.089 us/op
# Warmup Iteration   4: 65.816 us/op
# Warmup Iteration   5: 65.712 us/op
Iteration   1: 65.441 us/op
Iteration   2: 65.392 us/op
Iteration   3: 65.344 us/op
Iteration   4: 65.209 us/op
Iteration   5: 65.064 us/op

# Run progress: 90.48% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 54.057 us/op
# Warmup Iteration   2: 54.699 us/op
# Warmup Iteration   3: 55.160 us/op
# Warmup Iteration   4: 55.232 us/op
# Warmup Iteration   5: 55.206 us/op
Iteration   1: 67.701 us/op
Iteration   2: 66.609 us/op
Iteration   3: 66.129 us/op
Iteration   4: 67.937 us/op
Iteration   5: 66.234 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count":
  62.512 ±(99.9%) 5.694 us/op [Average]
  (min, avg, max) = (55.253, 62.512, 67.937), stdev = 5.326
  CI (99.9%): [56.818, 68.206] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 92.86% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 1505.420 us/op
# Warmup Iteration   2: 1489.271 us/op
# Warmup Iteration   3: 1483.839 us/op
# Warmup Iteration   4: 1481.158 us/op
# Warmup Iteration   5: 1478.601 us/op
Iteration   1: 1476.870 us/op
Iteration   2: 1472.871 us/op
Iteration   3: 1473.363 us/op
Iteration   4: 1472.682 us/op
Iteration   5: 1470.853 us/op

# Run progress: 95.24% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 1470.058 us/op
# Warmup Iteration   2: 1465.892 us/op
# Warmup Iteration   3: 1338.069 us/op
# Warmup Iteration   4: 1337.968 us/op
# Warmup Iteration   5: 1339.075 us/op
Iteration   1: 1339.765 us/op
Iteration   2: 1339.197 us/op
Iteration   3: 1343.144 us/op
Iteration   4: 1350.850 us/op
Iteration   5: 1346.977 us/op

# Run progress: 97.62% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 1341.482 us/op
# Warmup Iteration   2: 1339.133 us/op
# Warmup Iteration   3: 1339.551 us/op
# Warmup Iteration   4: 1339.804 us/op
# Warmup Iteration   5: 1339.294 us/op
Iteration   1: 1338.648 us/op
Iteration   2: 1339.007 us/op
Iteration   3: 1339.450 us/op
Iteration   4: 1338.330 us/op
Iteration   5: 1338.446 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements":
  1385.364 ±(99.9%) 68.940 us/op [Average]
  (min, avg, max) = (1338.330, 1385.364, 1476.870), stdev = 64.486
  CI (99.9%): [1316.424, 1454.303] (assumes normal distribution)


# Run complete. Total time: 01:10:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        (size)  Mode  Cnt     Score    Error  Units
VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements                          262144  avgt   15    56.412 ±  2.819  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_inc_index_access         262144  avgt   15   113.019 ±  6.802  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_modulo_index_access      262144  avgt   15   187.609 ±  6.501  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.divide_2_arrays_elements                       262144  avgt   15    61.613 ±  4.454  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.extract_2_arrays_elements                      262144  avgt   15    58.194 ±  2.646  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.if_with_masking_conditional_flow               262144  avgt   15   164.564 ±  9.495  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.mod_2_arrays_elements                          262144  avgt   15  4007.905 ± 43.220  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements                     262144  avgt   15    57.387 ±  2.297  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_backward_iterator   262144  avgt   15    58.355 ±  2.601  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_long_stride         262144  avgt   15   253.442 ± 14.890  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_of_mixed_types      262144  avgt   15   125.759 ±  1.009  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_stride_2            262144  avgt   15    80.904 ±  5.067  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count  262144  avgt   15    62.512 ±  5.694  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements     262144  avgt   15  1385.364 ± 68.940  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/VectorizationPatternsMultipleFloatArraysBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*VectorizationPatternsMultipleIntArraysBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/VectorizationPatternsMultipleIntArraysBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 63.763 us/op
# Warmup Iteration   2: 63.344 us/op
# Warmup Iteration   3: 63.455 us/op
# Warmup Iteration   4: 63.364 us/op
# Warmup Iteration   5: 63.346 us/op
Iteration   1: 63.244 us/op
Iteration   2: 63.189 us/op
Iteration   3: 63.039 us/op
Iteration   4: 63.153 us/op
Iteration   5: 63.242 us/op

# Run progress: 2.22% complete, ETA 01:13:32
# Fork: 2 of 3
# Warmup Iteration   1: 63.509 us/op
# Warmup Iteration   2: 63.074 us/op
# Warmup Iteration   3: 63.107 us/op
# Warmup Iteration   4: 63.148 us/op
# Warmup Iteration   5: 63.000 us/op
Iteration   1: 63.104 us/op
Iteration   2: 63.136 us/op
Iteration   3: 63.132 us/op
Iteration   4: 63.087 us/op
Iteration   5: 62.951 us/op

# Run progress: 4.44% complete, ETA 01:11:51
# Fork: 3 of 3
# Warmup Iteration   1: 52.651 us/op
# Warmup Iteration   2: 53.304 us/op
# Warmup Iteration   3: 53.642 us/op
# Warmup Iteration   4: 53.718 us/op
# Warmup Iteration   5: 53.804 us/op
Iteration   1: 53.968 us/op
Iteration   2: 54.063 us/op
Iteration   3: 54.053 us/op
Iteration   4: 54.160 us/op
Iteration   5: 54.097 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements":
  60.108 ±(99.9%) 4.727 us/op [Average]
  (min, avg, max) = (53.968, 60.108, 63.244), stdev = 4.421
  CI (99.9%): [55.381, 64.834] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_inc_index_access
# Parameters: (size = 262144)

# Run progress: 6.67% complete, ETA 01:10:10
# Fork: 1 of 3
# Warmup Iteration   1: 112.703 us/op
# Warmup Iteration   2: 110.936 us/op
# Warmup Iteration   3: 110.536 us/op
# Warmup Iteration   4: 109.822 us/op
# Warmup Iteration   5: 109.613 us/op
Iteration   1: 109.335 us/op
Iteration   2: 109.378 us/op
Iteration   3: 109.280 us/op
Iteration   4: 109.226 us/op
Iteration   5: 109.494 us/op

# Run progress: 8.89% complete, ETA 01:08:30
# Fork: 2 of 3
# Warmup Iteration   1: 120.717 us/op
# Warmup Iteration   2: 119.130 us/op
# Warmup Iteration   3: 118.581 us/op
# Warmup Iteration   4: 118.110 us/op
# Warmup Iteration   5: 118.003 us/op
Iteration   1: 117.775 us/op
Iteration   2: 117.915 us/op
Iteration   3: 117.772 us/op
Iteration   4: 117.714 us/op
Iteration   5: 117.515 us/op

# Run progress: 11.11% complete, ETA 01:06:50
# Fork: 3 of 3
# Warmup Iteration   1: 121.833 us/op
# Warmup Iteration   2: 120.903 us/op
# Warmup Iteration   3: 120.362 us/op
# Warmup Iteration   4: 120.292 us/op
# Warmup Iteration   5: 119.945 us/op
Iteration   1: 119.957 us/op
Iteration   2: 120.076 us/op
Iteration   3: 119.945 us/op
Iteration   4: 119.942 us/op
Iteration   5: 119.626 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_inc_index_access":
  115.663 ±(99.9%) 5.044 us/op [Average]
  (min, avg, max) = (109.226, 115.663, 120.076), stdev = 4.718
  CI (99.9%): [110.619, 120.707] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_modulo_index_access
# Parameters: (size = 262144)

# Run progress: 13.33% complete, ETA 01:05:10
# Fork: 1 of 3
# Warmup Iteration   1: 162.137 us/op
# Warmup Iteration   2: 161.736 us/op
# Warmup Iteration   3: 161.749 us/op
# Warmup Iteration   4: 161.578 us/op
# Warmup Iteration   5: 161.568 us/op
Iteration   1: 161.418 us/op
Iteration   2: 161.329 us/op
Iteration   3: 161.242 us/op
Iteration   4: 161.275 us/op
Iteration   5: 161.041 us/op

# Run progress: 15.56% complete, ETA 01:03:29
# Fork: 2 of 3
# Warmup Iteration   1: 165.926 us/op
# Warmup Iteration   2: 165.140 us/op
# Warmup Iteration   3: 164.823 us/op
# Warmup Iteration   4: 165.212 us/op
# Warmup Iteration   5: 165.258 us/op
Iteration   1: 164.939 us/op
Iteration   2: 164.817 us/op
Iteration   3: 164.955 us/op
Iteration   4: 164.832 us/op
Iteration   5: 164.716 us/op

# Run progress: 17.78% complete, ETA 01:01:49
# Fork: 3 of 3
# Warmup Iteration   1: 143.960 us/op
# Warmup Iteration   2: 161.576 us/op
# Warmup Iteration   3: 161.374 us/op
# Warmup Iteration   4: 161.011 us/op
# Warmup Iteration   5: 160.949 us/op
Iteration   1: 161.037 us/op
Iteration   2: 161.027 us/op
Iteration   3: 161.084 us/op
Iteration   4: 160.939 us/op
Iteration   5: 160.745 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_modulo_index_access":
  162.360 ±(99.9%) 1.958 us/op [Average]
  (min, avg, max) = (160.745, 162.360, 164.955), stdev = 1.832
  CI (99.9%): [160.401, 164.318] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.extract_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 20.00% complete, ETA 01:00:09
# Fork: 1 of 3
# Warmup Iteration   1: 53.186 us/op
# Warmup Iteration   2: 54.102 us/op
# Warmup Iteration   3: 54.741 us/op
# Warmup Iteration   4: 55.111 us/op
# Warmup Iteration   5: 55.359 us/op
Iteration   1: 55.534 us/op
Iteration   2: 55.578 us/op
Iteration   3: 55.562 us/op
Iteration   4: 55.623 us/op
Iteration   5: 55.754 us/op

# Run progress: 22.22% complete, ETA 00:58:28
# Fork: 2 of 3
# Warmup Iteration   1: 61.783 us/op
# Warmup Iteration   2: 54.952 us/op
# Warmup Iteration   3: 55.624 us/op
# Warmup Iteration   4: 55.744 us/op
# Warmup Iteration   5: 55.834 us/op
Iteration   1: 55.826 us/op
Iteration   2: 55.812 us/op
Iteration   3: 55.863 us/op
Iteration   4: 55.935 us/op
Iteration   5: 56.108 us/op

# Run progress: 24.44% complete, ETA 00:56:49
# Fork: 3 of 3
# Warmup Iteration   1: 56.189 us/op
# Warmup Iteration   2: 55.978 us/op
# Warmup Iteration   3: 56.000 us/op
# Warmup Iteration   4: 55.994 us/op
# Warmup Iteration   5: 56.181 us/op
Iteration   1: 56.140 us/op
Iteration   2: 56.314 us/op
Iteration   3: 56.129 us/op
Iteration   4: 62.430 us/op
Iteration   5: 61.379 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.extract_2_arrays_elements":
  56.666 ±(99.9%) 2.297 us/op [Average]
  (min, avg, max) = (55.534, 56.666, 62.430), stdev = 2.149
  CI (99.9%): [54.368, 58.963] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.if_with_masking_conditional_flow
# Parameters: (size = 262144)

# Run progress: 26.67% complete, ETA 00:55:08
# Fork: 1 of 3
# Warmup Iteration   1: 138.148 us/op
# Warmup Iteration   2: 147.433 us/op
# Warmup Iteration   3: 134.545 us/op
# Warmup Iteration   4: 133.922 us/op
# Warmup Iteration   5: 133.534 us/op
Iteration   1: 133.325 us/op
Iteration   2: 132.805 us/op
Iteration   3: 132.618 us/op
Iteration   4: 132.472 us/op
Iteration   5: 132.229 us/op

# Run progress: 28.89% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: 118.657 us/op
# Warmup Iteration   2: 135.684 us/op
# Warmup Iteration   3: 119.645 us/op
# Warmup Iteration   4: 119.828 us/op
# Warmup Iteration   5: 120.031 us/op
Iteration   1: 119.940 us/op
Iteration   2: 138.633 us/op
Iteration   3: 136.958 us/op
Iteration   4: 136.144 us/op
Iteration   5: 135.360 us/op

# Run progress: 31.11% complete, ETA 00:51:48
# Fork: 3 of 3
# Warmup Iteration   1: 118.004 us/op
# Warmup Iteration   2: 135.012 us/op
# Warmup Iteration   3: 119.286 us/op
# Warmup Iteration   4: 119.722 us/op
# Warmup Iteration   5: 119.815 us/op
Iteration   1: 119.800 us/op
Iteration   2: 119.920 us/op
Iteration   3: 119.738 us/op
Iteration   4: 119.949 us/op
Iteration   5: 119.911 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.if_with_masking_conditional_flow":
  128.653 ±(99.9%) 8.152 us/op [Average]
  (min, avg, max) = (119.738, 128.653, 138.633), stdev = 7.625
  CI (99.9%): [120.501, 136.805] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.mod_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 33.33% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 634.142 us/op
# Warmup Iteration   2: 628.281 us/op
# Warmup Iteration   3: 625.816 us/op
# Warmup Iteration   4: 622.956 us/op
# Warmup Iteration   5: 619.603 us/op
Iteration   1: 619.624 us/op
Iteration   2: 619.710 us/op
Iteration   3: 638.401 us/op
Iteration   4: 639.651 us/op
Iteration   5: 639.072 us/op

# Run progress: 35.56% complete, ETA 00:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 555.505 us/op
# Warmup Iteration   2: 624.791 us/op
# Warmup Iteration   3: 621.328 us/op
# Warmup Iteration   4: 619.389 us/op
# Warmup Iteration   5: 617.983 us/op
Iteration   1: 616.938 us/op
Iteration   2: 620.916 us/op
Iteration   3: 637.210 us/op
Iteration   4: 637.735 us/op
Iteration   5: 638.248 us/op

# Run progress: 37.78% complete, ETA 00:46:47
# Fork: 3 of 3
# Warmup Iteration   1: 553.222 us/op
# Warmup Iteration   2: 558.130 us/op
# Warmup Iteration   3: 562.210 us/op
# Warmup Iteration   4: 563.124 us/op
# Warmup Iteration   5: 564.518 us/op
Iteration   1: 565.237 us/op
Iteration   2: 559.787 us/op
Iteration   3: 583.907 us/op
Iteration   4: 584.071 us/op
Iteration   5: 584.107 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.mod_2_arrays_elements":
  612.308 ±(99.9%) 30.854 us/op [Average]
  (min, avg, max) = (559.787, 612.308, 639.651), stdev = 28.861
  CI (99.9%): [581.453, 643.162] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 40.00% complete, ETA 00:45:07
# Fork: 1 of 3
# Warmup Iteration   1: 53.826 us/op
# Warmup Iteration   2: 54.355 us/op
# Warmup Iteration   3: 54.804 us/op
# Warmup Iteration   4: 54.947 us/op
# Warmup Iteration   5: 55.274 us/op
Iteration   1: 55.240 us/op
Iteration   2: 55.205 us/op
Iteration   3: 55.288 us/op
Iteration   4: 55.369 us/op
Iteration   5: 55.369 us/op

# Run progress: 42.22% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: 56.783 us/op
# Warmup Iteration   2: 56.876 us/op
# Warmup Iteration   3: 56.915 us/op
# Warmup Iteration   4: 56.908 us/op
# Warmup Iteration   5: 57.079 us/op
Iteration   1: 56.997 us/op
Iteration   2: 56.881 us/op
Iteration   3: 57.017 us/op
Iteration   4: 57.138 us/op
Iteration   5: 57.180 us/op

# Run progress: 44.44% complete, ETA 00:41:46
# Fork: 3 of 3
# Warmup Iteration   1: 56.167 us/op
# Warmup Iteration   2: 55.956 us/op
# Warmup Iteration   3: 55.942 us/op
# Warmup Iteration   4: 56.001 us/op
# Warmup Iteration   5: 55.931 us/op
Iteration   1: 55.993 us/op
Iteration   2: 55.909 us/op
Iteration   3: 55.970 us/op
Iteration   4: 55.932 us/op
Iteration   5: 56.016 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements":
  56.100 ±(99.9%) 0.801 us/op [Average]
  (min, avg, max) = (55.205, 56.100, 57.180), stdev = 0.750
  CI (99.9%): [55.299, 56.902] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_backward_iterator
# Parameters: (size = 262144)

# Run progress: 46.67% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 64.002 us/op
# Warmup Iteration   2: 63.348 us/op
# Warmup Iteration   3: 62.989 us/op
# Warmup Iteration   4: 62.632 us/op
# Warmup Iteration   5: 62.404 us/op
Iteration   1: 62.186 us/op
Iteration   2: 62.013 us/op
Iteration   3: 62.093 us/op
Iteration   4: 62.268 us/op
Iteration   5: 62.128 us/op

# Run progress: 48.89% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 67.103 us/op
# Warmup Iteration   2: 67.082 us/op
# Warmup Iteration   3: 66.605 us/op
# Warmup Iteration   4: 66.406 us/op
# Warmup Iteration   5: 66.391 us/op
Iteration   1: 66.328 us/op
Iteration   2: 66.284 us/op
Iteration   3: 66.199 us/op
Iteration   4: 66.312 us/op
Iteration   5: 66.072 us/op

# Run progress: 51.11% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 61.647 us/op
# Warmup Iteration   2: 61.831 us/op
# Warmup Iteration   3: 61.749 us/op
# Warmup Iteration   4: 61.770 us/op
# Warmup Iteration   5: 61.805 us/op
Iteration   1: 61.811 us/op
Iteration   2: 61.895 us/op
Iteration   3: 61.863 us/op
Iteration   4: 61.892 us/op
Iteration   5: 61.901 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_backward_iterator":
  63.416 ±(99.9%) 2.213 us/op [Average]
  (min, avg, max) = (61.811, 63.416, 66.328), stdev = 2.070
  CI (99.9%): [61.203, 65.630] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_long_stride
# Parameters: (size = 262144)

# Run progress: 53.33% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 338.581 us/op
# Warmup Iteration   2: 333.585 us/op
# Warmup Iteration   3: 331.944 us/op
# Warmup Iteration   4: 299.689 us/op
# Warmup Iteration   5: 254.467 us/op
Iteration   1: 254.051 us/op
Iteration   2: 254.244 us/op
Iteration   3: 254.010 us/op
Iteration   4: 253.426 us/op
Iteration   5: 252.937 us/op

# Run progress: 55.56% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 336.942 us/op
# Warmup Iteration   2: 335.327 us/op
# Warmup Iteration   3: 334.365 us/op
# Warmup Iteration   4: 304.465 us/op
# Warmup Iteration   5: 257.976 us/op
Iteration   1: 257.671 us/op
Iteration   2: 257.436 us/op
Iteration   3: 257.175 us/op
Iteration   4: 257.325 us/op
Iteration   5: 257.679 us/op

# Run progress: 57.78% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 334.115 us/op
# Warmup Iteration   2: 333.464 us/op
# Warmup Iteration   3: 333.435 us/op
# Warmup Iteration   4: 300.997 us/op
# Warmup Iteration   5: 256.153 us/op
Iteration   1: 255.919 us/op
Iteration   2: 255.856 us/op
Iteration   3: 255.471 us/op
Iteration   4: 255.526 us/op
Iteration   5: 255.563 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_long_stride":
  255.619 ±(99.9%) 1.719 us/op [Average]
  (min, avg, max) = (252.937, 255.619, 257.679), stdev = 1.608
  CI (99.9%): [253.900, 257.338] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_of_mixed_types
# Parameters: (size = 262144)

# Run progress: 60.00% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 119.980 us/op
# Warmup Iteration   2: 118.641 us/op
# Warmup Iteration   3: 115.246 us/op
# Warmup Iteration   4: 115.503 us/op
# Warmup Iteration   5: 115.655 us/op
Iteration   1: 116.028 us/op
Iteration   2: 116.001 us/op
Iteration   3: 115.954 us/op
Iteration   4: 116.199 us/op
Iteration   5: 116.106 us/op

# Run progress: 62.22% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 106.958 us/op
# Warmup Iteration   2: 105.884 us/op
# Warmup Iteration   3: 106.620 us/op
# Warmup Iteration   4: 107.114 us/op
# Warmup Iteration   5: 107.128 us/op
Iteration   1: 107.449 us/op
Iteration   2: 107.592 us/op
Iteration   3: 107.757 us/op
Iteration   4: 107.782 us/op
Iteration   5: 108.075 us/op

# Run progress: 64.44% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 125.168 us/op
# Warmup Iteration   2: 121.689 us/op
# Warmup Iteration   3: 120.381 us/op
# Warmup Iteration   4: 120.142 us/op
# Warmup Iteration   5: 119.921 us/op
Iteration   1: 119.992 us/op
Iteration   2: 119.818 us/op
Iteration   3: 120.036 us/op
Iteration   4: 119.575 us/op
Iteration   5: 119.418 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_of_mixed_types":
  114.519 ±(99.9%) 5.573 us/op [Average]
  (min, avg, max) = (107.449, 114.519, 120.036), stdev = 5.213
  CI (99.9%): [108.945, 120.092] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_stride_2
# Parameters: (size = 262144)

# Run progress: 66.67% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 71.488 us/op
# Warmup Iteration   2: 72.350 us/op
# Warmup Iteration   3: 72.511 us/op
# Warmup Iteration   4: 72.840 us/op
# Warmup Iteration   5: 73.041 us/op
Iteration   1: 73.012 us/op
Iteration   2: 73.144 us/op
Iteration   3: 73.286 us/op
Iteration   4: 73.444 us/op
Iteration   5: 73.608 us/op

# Run progress: 68.89% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 82.622 us/op
# Warmup Iteration   2: 81.532 us/op
# Warmup Iteration   3: 80.575 us/op
# Warmup Iteration   4: 80.150 us/op
# Warmup Iteration   5: 80.028 us/op
Iteration   1: 80.044 us/op
Iteration   2: 80.009 us/op
Iteration   3: 79.918 us/op
Iteration   4: 79.928 us/op
Iteration   5: 79.861 us/op

# Run progress: 71.11% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 72.696 us/op
# Warmup Iteration   2: 73.072 us/op
# Warmup Iteration   3: 73.300 us/op
# Warmup Iteration   4: 73.540 us/op
# Warmup Iteration   5: 73.431 us/op
Iteration   1: 73.556 us/op
Iteration   2: 73.545 us/op
Iteration   3: 73.563 us/op
Iteration   4: 73.536 us/op
Iteration   5: 73.609 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_stride_2":
  75.604 ±(99.9%) 3.407 us/op [Average]
  (min, avg, max) = (73.012, 75.604, 80.044), stdev = 3.187
  CI (99.9%): [72.197, 79.011] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count
# Parameters: (size = 262144)

# Run progress: 73.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 55.203 us/op
# Warmup Iteration   2: 55.323 us/op
# Warmup Iteration   3: 55.438 us/op
# Warmup Iteration   4: 55.310 us/op
# Warmup Iteration   5: 55.342 us/op
Iteration   1: 55.364 us/op
Iteration   2: 55.414 us/op
Iteration   3: 55.566 us/op
Iteration   4: 55.690 us/op
Iteration   5: 55.551 us/op

# Run progress: 75.56% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 55.812 us/op
# Warmup Iteration   2: 62.959 us/op
# Warmup Iteration   3: 62.228 us/op
# Warmup Iteration   4: 61.824 us/op
# Warmup Iteration   5: 61.639 us/op
Iteration   1: 61.549 us/op
Iteration   2: 61.366 us/op
Iteration   3: 61.433 us/op
Iteration   4: 61.443 us/op
Iteration   5: 61.364 us/op

# Run progress: 77.78% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 55.373 us/op
# Warmup Iteration   2: 55.984 us/op
# Warmup Iteration   3: 56.365 us/op
# Warmup Iteration   4: 56.744 us/op
# Warmup Iteration   5: 56.841 us/op
Iteration   1: 56.995 us/op
Iteration   2: 57.068 us/op
Iteration   3: 57.147 us/op
Iteration   4: 57.236 us/op
Iteration   5: 57.339 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count":
  58.035 ±(99.9%) 2.761 us/op [Average]
  (min, avg, max) = (55.364, 58.035, 61.549), stdev = 2.583
  CI (99.9%): [55.274, 60.796] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.shl_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 80.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 40.525 us/op
# Warmup Iteration   2: 40.472 us/op
# Warmup Iteration   3: 40.478 us/op
# Warmup Iteration   4: 40.478 us/op
# Warmup Iteration   5: 40.494 us/op
Iteration   1: 40.497 us/op
Iteration   2: 40.504 us/op
Iteration   3: 40.520 us/op
Iteration   4: 40.504 us/op
Iteration   5: 40.514 us/op

# Run progress: 82.22% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 40.310 us/op
# Warmup Iteration   2: 40.315 us/op
# Warmup Iteration   3: 40.341 us/op
# Warmup Iteration   4: 40.278 us/op
# Warmup Iteration   5: 40.314 us/op
Iteration   1: 40.295 us/op
Iteration   2: 40.311 us/op
Iteration   3: 40.322 us/op
Iteration   4: 40.348 us/op
Iteration   5: 40.392 us/op

# Run progress: 84.44% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 40.364 us/op
# Warmup Iteration   2: 40.273 us/op
# Warmup Iteration   3: 40.316 us/op
# Warmup Iteration   4: 40.382 us/op
# Warmup Iteration   5: 40.457 us/op
Iteration   1: 40.451 us/op
Iteration   2: 40.493 us/op
Iteration   3: 40.457 us/op
Iteration   4: 40.541 us/op
Iteration   5: 40.485 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.shl_2_arrays_elements":
  40.442 ±(99.9%) 0.091 us/op [Average]
  (min, avg, max) = (40.295, 40.442, 40.541), stdev = 0.085
  CI (99.9%): [40.351, 40.533] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 86.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 63.240 us/op
# Warmup Iteration   2: 62.371 us/op
# Warmup Iteration   3: 62.938 us/op
# Warmup Iteration   4: 62.727 us/op
# Warmup Iteration   5: 62.729 us/op
Iteration   1: 62.613 us/op
Iteration   2: 62.589 us/op
Iteration   3: 62.786 us/op
Iteration   4: 62.596 us/op
Iteration   5: 62.572 us/op

# Run progress: 88.89% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 61.816 us/op
# Warmup Iteration   2: 61.757 us/op
# Warmup Iteration   3: 62.789 us/op
# Warmup Iteration   4: 62.767 us/op
# Warmup Iteration   5: 62.627 us/op
Iteration   1: 62.737 us/op
Iteration   2: 62.669 us/op
Iteration   3: 62.678 us/op
Iteration   4: 62.605 us/op
Iteration   5: 62.642 us/op

# Run progress: 91.11% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 70.918 us/op
# Warmup Iteration   2: 69.720 us/op
# Warmup Iteration   3: 70.400 us/op
# Warmup Iteration   4: 70.244 us/op
# Warmup Iteration   5: 69.981 us/op
Iteration   1: 69.991 us/op
Iteration   2: 69.893 us/op
Iteration   3: 69.754 us/op
Iteration   4: 69.994 us/op
Iteration   5: 69.716 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements":
  65.056 ±(99.9%) 3.768 us/op [Average]
  (min, avg, max) = (62.572, 65.056, 69.994), stdev = 3.525
  CI (99.9%): [61.288, 68.824] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.xor_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 93.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 52.190 us/op
# Warmup Iteration   2: 54.055 us/op
# Warmup Iteration   3: 54.448 us/op
# Warmup Iteration   4: 54.886 us/op
# Warmup Iteration   5: 55.116 us/op
Iteration   1: 55.390 us/op
Iteration   2: 55.431 us/op
Iteration   3: 55.520 us/op
Iteration   4: 55.534 us/op
Iteration   5: 55.521 us/op

# Run progress: 95.56% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 61.504 us/op
# Warmup Iteration   2: 60.372 us/op
# Warmup Iteration   3: 60.032 us/op
# Warmup Iteration   4: 59.934 us/op
# Warmup Iteration   5: 59.681 us/op
Iteration   1: 59.687 us/op
Iteration   2: 59.494 us/op
Iteration   3: 59.482 us/op
Iteration   4: 59.377 us/op
Iteration   5: 59.443 us/op

# Run progress: 97.78% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 59.776 us/op
# Warmup Iteration   2: 63.596 us/op
# Warmup Iteration   3: 63.566 us/op
# Warmup Iteration   4: 63.402 us/op
# Warmup Iteration   5: 63.441 us/op
Iteration   1: 63.477 us/op
Iteration   2: 63.567 us/op
Iteration   3: 63.320 us/op
Iteration   4: 63.116 us/op
Iteration   5: 63.161 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.xor_2_arrays_elements":
  59.435 ±(99.9%) 3.549 us/op [Average]
  (min, avg, max) = (55.390, 59.435, 63.567), stdev = 3.320
  CI (99.9%): [55.886, 62.983] (assumes normal distribution)


# Run complete. Total time: 01:15:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      (size)  Mode  Cnt    Score    Error  Units
VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements                          262144  avgt   15   60.108 ±  4.727  us/op
VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_inc_index_access         262144  avgt   15  115.663 ±  5.044  us/op
VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_modulo_index_access      262144  avgt   15  162.360 ±  1.958  us/op
VectorizationPatternsMultipleIntArraysBenchmark.extract_2_arrays_elements                      262144  avgt   15   56.666 ±  2.297  us/op
VectorizationPatternsMultipleIntArraysBenchmark.if_with_masking_conditional_flow               262144  avgt   15  128.653 ±  8.152  us/op
VectorizationPatternsMultipleIntArraysBenchmark.mod_2_arrays_elements                          262144  avgt   15  612.308 ± 30.854  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements                     262144  avgt   15   56.100 ±  0.801  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_backward_iterator   262144  avgt   15   63.416 ±  2.213  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_long_stride         262144  avgt   15  255.619 ±  1.719  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_of_mixed_types      262144  avgt   15  114.519 ±  5.573  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_stride_2            262144  avgt   15   75.604 ±  3.407  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count  262144  avgt   15   58.035 ±  2.761  us/op
VectorizationPatternsMultipleIntArraysBenchmark.shl_2_arrays_elements                          262144  avgt   15   40.442 ±  0.091  us/op
VectorizationPatternsMultipleIntArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements     262144  avgt   15   65.056 ±  3.768  us/op
VectorizationPatternsMultipleIntArraysBenchmark.xor_2_arrays_elements                          262144  avgt   15   59.435 ±  3.549  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/VectorizationPatternsMultipleIntArraysBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*VectorizationScatterGatherPatternBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/VectorizationScatterGatherPatternBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationScatterGatherPatternBenchmark.scatter_gather
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 152.282 us/op
# Warmup Iteration   2: 152.526 us/op
# Warmup Iteration   3: 152.673 us/op
# Warmup Iteration   4: 152.694 us/op
# Warmup Iteration   5: 152.708 us/op
Iteration   1: 152.784 us/op
Iteration   2: 152.690 us/op
Iteration   3: 152.798 us/op
Iteration   4: 152.794 us/op
Iteration   5: 152.817 us/op

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 178.704 us/op
# Warmup Iteration   2: 176.374 us/op
# Warmup Iteration   3: 174.670 us/op
# Warmup Iteration   4: 174.733 us/op
# Warmup Iteration   5: 173.648 us/op
Iteration   1: 173.458 us/op
Iteration   2: 173.006 us/op
Iteration   3: 172.590 us/op
Iteration   4: 172.497 us/op
Iteration   5: 172.555 us/op

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 173.130 us/op
# Warmup Iteration   2: 172.926 us/op
# Warmup Iteration   3: 172.235 us/op
# Warmup Iteration   4: 172.410 us/op
# Warmup Iteration   5: 172.513 us/op
Iteration   1: 172.383 us/op
Iteration   2: 172.103 us/op
Iteration   3: 172.328 us/op
Iteration   4: 172.396 us/op
Iteration   5: 172.118 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationScatterGatherPatternBenchmark.scatter_gather":
  165.954 ±(99.9%) 10.317 us/op [Average]
  (min, avg, max) = (152.690, 165.954, 173.458), stdev = 9.651
  CI (99.9%): [155.637, 176.272] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (size)  Mode  Cnt    Score    Error  Units
VectorizationScatterGatherPatternBenchmark.scatter_gather  262144  avgt   15  165.954 ± 10.317  us/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/VectorizationScatterGatherPatternBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*MegamorphicAbsClassCallBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/MegamorphicAbsClassCallBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.bimorphic
# Parameters: (param = 3)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.096 ns/op
# Warmup Iteration   2: 3.099 ns/op
# Warmup Iteration   3: 3.046 ns/op
# Warmup Iteration   4: 3.048 ns/op
# Warmup Iteration   5: 3.045 ns/op
Iteration   1: 3.043 ns/op
Iteration   2: 3.046 ns/op
Iteration   3: 3.043 ns/op
Iteration   4: 3.045 ns/op
Iteration   5: 3.048 ns/op

# Run progress: 5.56% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 3.530 ns/op
# Warmup Iteration   2: 3.347 ns/op
# Warmup Iteration   3: 3.287 ns/op
# Warmup Iteration   4: 3.284 ns/op
# Warmup Iteration   5: 3.283 ns/op
Iteration   1: 3.273 ns/op
Iteration   2: 3.274 ns/op
Iteration   3: 3.273 ns/op
Iteration   4: 3.274 ns/op
Iteration   5: 3.275 ns/op

# Run progress: 11.11% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 3.108 ns/op
# Warmup Iteration   2: 2.981 ns/op
# Warmup Iteration   3: 2.951 ns/op
# Warmup Iteration   4: 2.962 ns/op
# Warmup Iteration   5: 2.968 ns/op
Iteration   1: 2.971 ns/op
Iteration   2: 2.969 ns/op
Iteration   3: 2.974 ns/op
Iteration   4: 2.969 ns/op
Iteration   5: 2.966 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.bimorphic":
  3.096 ±(99.9%) 0.143 ns/op [Average]
  (min, avg, max) = (2.966, 3.096, 3.275), stdev = 0.134
  CI (99.9%): [2.953, 3.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_3
# Parameters: (param = 3)

# Run progress: 16.67% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 17.794 ns/op
# Warmup Iteration   2: 17.648 ns/op
# Warmup Iteration   3: 17.516 ns/op
# Warmup Iteration   4: 17.495 ns/op
# Warmup Iteration   5: 17.428 ns/op
Iteration   1: 17.431 ns/op
Iteration   2: 17.439 ns/op
Iteration   3: 17.392 ns/op
Iteration   4: 17.422 ns/op
Iteration   5: 17.430 ns/op

# Run progress: 22.22% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 15.585 ns/op
# Warmup Iteration   2: 15.669 ns/op
# Warmup Iteration   3: 15.743 ns/op
# Warmup Iteration   4: 15.757 ns/op
# Warmup Iteration   5: 15.783 ns/op
Iteration   1: 15.795 ns/op
Iteration   2: 15.832 ns/op
Iteration   3: 15.855 ns/op
Iteration   4: 15.846 ns/op
Iteration   5: 15.856 ns/op

# Run progress: 27.78% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 17.830 ns/op
# Warmup Iteration   2: 17.657 ns/op
# Warmup Iteration   3: 17.479 ns/op
# Warmup Iteration   4: 17.472 ns/op
# Warmup Iteration   5: 17.436 ns/op
Iteration   1: 17.419 ns/op
Iteration   2: 17.417 ns/op
Iteration   3: 17.388 ns/op
Iteration   4: 17.356 ns/op
Iteration   5: 17.359 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_3":
  16.882 ±(99.9%) 0.819 ns/op [Average]
  (min, avg, max) = (15.795, 16.882, 17.439), stdev = 0.766
  CI (99.9%): [16.064, 17.701] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_4
# Parameters: (param = 3)

# Run progress: 33.33% complete, ETA 00:20:02
# Fork: 1 of 3
# Warmup Iteration   1: 17.485 ns/op
# Warmup Iteration   2: 17.349 ns/op
# Warmup Iteration   3: 17.443 ns/op
# Warmup Iteration   4: 17.429 ns/op
# Warmup Iteration   5: 17.411 ns/op
Iteration   1: 17.379 ns/op
Iteration   2: 17.366 ns/op
Iteration   3: 17.352 ns/op
Iteration   4: 17.363 ns/op
Iteration   5: 17.337 ns/op

# Run progress: 38.89% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 15.741 ns/op
# Warmup Iteration   2: 15.755 ns/op
# Warmup Iteration   3: 15.853 ns/op
# Warmup Iteration   4: 15.895 ns/op
# Warmup Iteration   5: 15.927 ns/op
Iteration   1: 15.950 ns/op
Iteration   2: 15.945 ns/op
Iteration   3: 15.951 ns/op
Iteration   4: 15.972 ns/op
Iteration   5: 15.988 ns/op

# Run progress: 44.44% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 17.770 ns/op
# Warmup Iteration   2: 17.619 ns/op
# Warmup Iteration   3: 17.504 ns/op
# Warmup Iteration   4: 17.479 ns/op
# Warmup Iteration   5: 17.465 ns/op
Iteration   1: 17.440 ns/op
Iteration   2: 17.420 ns/op
Iteration   3: 17.374 ns/op
Iteration   4: 17.377 ns/op
Iteration   5: 17.378 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_4":
  16.906 ±(99.9%) 0.740 ns/op [Average]
  (min, avg, max) = (15.945, 16.906, 17.440), stdev = 0.692
  CI (99.9%): [16.166, 17.646] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_5
# Parameters: (param = 3)

# Run progress: 50.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 16.765 ns/op
# Warmup Iteration   2: 14.868 ns/op
# Warmup Iteration   3: 15.094 ns/op
# Warmup Iteration   4: 15.107 ns/op
# Warmup Iteration   5: 15.201 ns/op
Iteration   1: 15.312 ns/op
Iteration   2: 15.278 ns/op
Iteration   3: 15.299 ns/op
Iteration   4: 15.275 ns/op
Iteration   5: 15.300 ns/op

# Run progress: 55.56% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 15.648 ns/op
# Warmup Iteration   2: 15.598 ns/op
# Warmup Iteration   3: 15.694 ns/op
# Warmup Iteration   4: 15.697 ns/op
# Warmup Iteration   5: 15.702 ns/op
Iteration   1: 15.673 ns/op
Iteration   2: 15.681 ns/op
Iteration   3: 15.670 ns/op
Iteration   4: 15.690 ns/op
Iteration   5: 15.696 ns/op

# Run progress: 61.11% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 15.577 ns/op
# Warmup Iteration   2: 15.482 ns/op
# Warmup Iteration   3: 15.651 ns/op
# Warmup Iteration   4: 15.642 ns/op
# Warmup Iteration   5: 15.644 ns/op
Iteration   1: 15.662 ns/op
Iteration   2: 15.634 ns/op
Iteration   3: 15.644 ns/op
Iteration   4: 15.637 ns/op
Iteration   5: 15.647 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_5":
  15.540 ±(99.9%) 0.194 ns/op [Average]
  (min, avg, max) = (15.275, 15.540, 15.696), stdev = 0.182
  CI (99.9%): [15.345, 15.734] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_6
# Parameters: (param = 3)

# Run progress: 66.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 16.976 ns/op
# Warmup Iteration   2: 16.851 ns/op
# Warmup Iteration   3: 16.735 ns/op
# Warmup Iteration   4: 16.716 ns/op
# Warmup Iteration   5: 16.672 ns/op
Iteration   1: 16.648 ns/op
Iteration   2: 16.642 ns/op
Iteration   3: 16.643 ns/op
Iteration   4: 16.624 ns/op
Iteration   5: 16.608 ns/op

# Run progress: 72.22% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 14.961 ns/op
# Warmup Iteration   2: 15.016 ns/op
# Warmup Iteration   3: 15.027 ns/op
# Warmup Iteration   4: 15.128 ns/op
# Warmup Iteration   5: 15.117 ns/op
Iteration   1: 15.157 ns/op
Iteration   2: 15.170 ns/op
Iteration   3: 15.147 ns/op
Iteration   4: 15.154 ns/op
Iteration   5: 15.188 ns/op

# Run progress: 77.78% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 15.198 ns/op
# Warmup Iteration   2: 15.173 ns/op
# Warmup Iteration   3: 15.202 ns/op
# Warmup Iteration   4: 15.253 ns/op
# Warmup Iteration   5: 15.260 ns/op
Iteration   1: 15.271 ns/op
Iteration   2: 15.285 ns/op
Iteration   3: 15.253 ns/op
Iteration   4: 15.214 ns/op
Iteration   5: 15.268 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_6":
  15.685 ±(99.9%) 0.743 ns/op [Average]
  (min, avg, max) = (15.147, 15.685, 16.648), stdev = 0.695
  CI (99.9%): [14.941, 16.428] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.monomorphic
# Parameters: (param = 3)

# Run progress: 83.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.275 ns/op
# Warmup Iteration   2: 4.306 ns/op
# Warmup Iteration   3: 4.326 ns/op
# Warmup Iteration   4: 4.309 ns/op
# Warmup Iteration   5: 4.291 ns/op
Iteration   1: 4.284 ns/op
Iteration   2: 4.276 ns/op
Iteration   3: 4.275 ns/op
Iteration   4: 4.275 ns/op
Iteration   5: 4.261 ns/op

# Run progress: 88.89% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 4.214 ns/op
# Warmup Iteration   2: 4.222 ns/op
# Warmup Iteration   3: 4.275 ns/op
# Warmup Iteration   4: 4.281 ns/op
# Warmup Iteration   5: 4.195 ns/op
Iteration   1: 4.197 ns/op
Iteration   2: 4.194 ns/op
Iteration   3: 4.198 ns/op
Iteration   4: 4.200 ns/op
Iteration   5: 4.199 ns/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 4.161 ns/op
# Warmup Iteration   2: 4.146 ns/op
# Warmup Iteration   3: 4.188 ns/op
# Warmup Iteration   4: 4.188 ns/op
# Warmup Iteration   5: 4.186 ns/op
Iteration   1: 4.181 ns/op
Iteration   2: 4.184 ns/op
Iteration   3: 4.185 ns/op
Iteration   4: 4.186 ns/op
Iteration   5: 4.182 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.monomorphic":
  4.218 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (4.181, 4.218, 4.284), stdev = 0.042
  CI (99.9%): [4.174, 4.263] (assumes normal distribution)


# Run complete. Total time: 00:30:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (param)  Mode  Cnt   Score   Error  Units
MegamorphicAbsClassCallBenchmark.bimorphic            3  avgt   15   3.096 ± 0.143  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_3        3  avgt   15  16.882 ± 0.819  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_4        3  avgt   15  16.906 ± 0.740  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_5        3  avgt   15  15.540 ± 0.194  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_6        3  avgt   15  15.685 ± 0.743  ns/op
MegamorphicAbsClassCallBenchmark.monomorphic          3  avgt   15   4.218 ± 0.044  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/MegamorphicAbsClassCallBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*MegamorphicInterfaceCallBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/MegamorphicInterfaceCallBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.bimorphic
# Parameters: (param = 3)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.452 ns/op
# Warmup Iteration   2: 3.301 ns/op
# Warmup Iteration   3: 3.243 ns/op
# Warmup Iteration   4: 2.990 ns/op
# Warmup Iteration   5: 3.001 ns/op
Iteration   1: 3.020 ns/op
Iteration   2: 3.009 ns/op
Iteration   3: 3.015 ns/op
Iteration   4: 3.024 ns/op
Iteration   5: 3.026 ns/op

# Run progress: 5.56% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 3.595 ns/op
# Warmup Iteration   2: 3.410 ns/op
# Warmup Iteration   3: 3.340 ns/op
# Warmup Iteration   4: 3.340 ns/op
# Warmup Iteration   5: 3.332 ns/op
Iteration   1: 3.333 ns/op
Iteration   2: 2.986 ns/op
Iteration   3: 2.998 ns/op
Iteration   4: 3.011 ns/op
Iteration   5: 3.018 ns/op

# Run progress: 11.11% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 3.214 ns/op
# Warmup Iteration   2: 3.072 ns/op
# Warmup Iteration   3: 3.039 ns/op
# Warmup Iteration   4: 3.038 ns/op
# Warmup Iteration   5: 3.042 ns/op
Iteration   1: 3.041 ns/op
Iteration   2: 3.041 ns/op
Iteration   3: 3.038 ns/op
Iteration   4: 3.033 ns/op
Iteration   5: 3.042 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.bimorphic":
  3.042 ±(99.9%) 0.088 ns/op [Average]
  (min, avg, max) = (2.986, 3.042, 3.333), stdev = 0.082
  CI (99.9%): [2.955, 3.130] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_3
# Parameters: (param = 3)

# Run progress: 16.67% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 22.275 ns/op
# Warmup Iteration   2: 22.178 ns/op
# Warmup Iteration   3: 21.685 ns/op
# Warmup Iteration   4: 21.647 ns/op
# Warmup Iteration   5: 21.575 ns/op
Iteration   1: 21.549 ns/op
Iteration   2: 21.536 ns/op
Iteration   3: 21.535 ns/op
Iteration   4: 21.518 ns/op
Iteration   5: 21.511 ns/op

# Run progress: 22.22% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 19.580 ns/op
# Warmup Iteration   2: 19.652 ns/op
# Warmup Iteration   3: 19.423 ns/op
# Warmup Iteration   4: 19.502 ns/op
# Warmup Iteration   5: 19.558 ns/op
Iteration   1: 19.589 ns/op
Iteration   2: 19.633 ns/op
Iteration   3: 19.604 ns/op
Iteration   4: 19.639 ns/op
Iteration   5: 19.648 ns/op

# Run progress: 27.78% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 22.841 ns/op
# Warmup Iteration   2: 22.602 ns/op
# Warmup Iteration   3: 22.075 ns/op
# Warmup Iteration   4: 22.001 ns/op
# Warmup Iteration   5: 21.934 ns/op
Iteration   1: 21.941 ns/op
Iteration   2: 21.920 ns/op
Iteration   3: 21.897 ns/op
Iteration   4: 21.902 ns/op
Iteration   5: 21.851 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_3":
  21.018 ±(99.9%) 1.105 ns/op [Average]
  (min, avg, max) = (19.589, 21.018, 21.941), stdev = 1.034
  CI (99.9%): [19.913, 22.123] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_4
# Parameters: (param = 3)

# Run progress: 33.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 19.237 ns/op
# Warmup Iteration   2: 19.077 ns/op
# Warmup Iteration   3: 19.134 ns/op
# Warmup Iteration   4: 19.232 ns/op
# Warmup Iteration   5: 19.315 ns/op
Iteration   1: 19.340 ns/op
Iteration   2: 19.339 ns/op
Iteration   3: 19.372 ns/op
Iteration   4: 19.339 ns/op
Iteration   5: 19.381 ns/op

# Run progress: 38.89% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 22.457 ns/op
# Warmup Iteration   2: 21.449 ns/op
# Warmup Iteration   3: 21.358 ns/op
# Warmup Iteration   4: 21.340 ns/op
# Warmup Iteration   5: 21.284 ns/op
Iteration   1: 21.248 ns/op
Iteration   2: 21.226 ns/op
Iteration   3: 21.230 ns/op
Iteration   4: 21.234 ns/op
Iteration   5: 21.228 ns/op

# Run progress: 44.44% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 19.870 ns/op
# Warmup Iteration   2: 19.629 ns/op
# Warmup Iteration   3: 19.715 ns/op
# Warmup Iteration   4: 19.787 ns/op
# Warmup Iteration   5: 19.799 ns/op
Iteration   1: 19.816 ns/op
Iteration   2: 19.836 ns/op
Iteration   3: 19.890 ns/op
Iteration   4: 19.856 ns/op
Iteration   5: 19.807 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_4":
  20.143 ±(99.9%) 0.881 ns/op [Average]
  (min, avg, max) = (19.339, 20.143, 21.248), stdev = 0.824
  CI (99.9%): [19.261, 21.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_5
# Parameters: (param = 3)

# Run progress: 50.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 19.031 ns/op
# Warmup Iteration   2: 21.770 ns/op
# Warmup Iteration   3: 21.693 ns/op
# Warmup Iteration   4: 21.599 ns/op
# Warmup Iteration   5: 21.567 ns/op
Iteration   1: 21.508 ns/op
Iteration   2: 21.500 ns/op
Iteration   3: 21.479 ns/op
Iteration   4: 21.457 ns/op
Iteration   5: 21.437 ns/op

# Run progress: 55.56% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 19.383 ns/op
# Warmup Iteration   2: 19.296 ns/op
# Warmup Iteration   3: 19.473 ns/op
# Warmup Iteration   4: 19.540 ns/op
# Warmup Iteration   5: 19.565 ns/op
Iteration   1: 19.574 ns/op
Iteration   2: 19.578 ns/op
Iteration   3: 19.579 ns/op
Iteration   4: 19.594 ns/op
Iteration   5: 20.053 ns/op

# Run progress: 61.11% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 21.485 ns/op
# Warmup Iteration   2: 18.812 ns/op
# Warmup Iteration   3: 19.058 ns/op
# Warmup Iteration   4: 19.159 ns/op
# Warmup Iteration   5: 19.189 ns/op
Iteration   1: 19.202 ns/op
Iteration   2: 19.226 ns/op
Iteration   3: 19.221 ns/op
Iteration   4: 19.229 ns/op
Iteration   5: 19.217 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_5":
  20.124 ±(99.9%) 1.085 ns/op [Average]
  (min, avg, max) = (19.202, 20.124, 21.508), stdev = 1.015
  CI (99.9%): [19.038, 21.209] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_6
# Parameters: (param = 3)

# Run progress: 66.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 21.777 ns/op
# Warmup Iteration   2: 19.352 ns/op
# Warmup Iteration   3: 19.477 ns/op
# Warmup Iteration   4: 19.505 ns/op
# Warmup Iteration   5: 19.516 ns/op
Iteration   1: 19.533 ns/op
Iteration   2: 19.498 ns/op
Iteration   3: 19.498 ns/op
Iteration   4: 19.520 ns/op
Iteration   5: 19.501 ns/op

# Run progress: 72.22% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 19.614 ns/op
# Warmup Iteration   2: 19.462 ns/op
# Warmup Iteration   3: 19.497 ns/op
# Warmup Iteration   4: 19.521 ns/op
# Warmup Iteration   5: 19.537 ns/op
Iteration   1: 19.539 ns/op
Iteration   2: 19.529 ns/op
Iteration   3: 19.536 ns/op
Iteration   4: 19.536 ns/op
Iteration   5: 19.528 ns/op

# Run progress: 77.78% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 18.930 ns/op
# Warmup Iteration   2: 19.017 ns/op
# Warmup Iteration   3: 19.026 ns/op
# Warmup Iteration   4: 19.047 ns/op
# Warmup Iteration   5: 19.068 ns/op
Iteration   1: 19.044 ns/op
Iteration   2: 19.033 ns/op
Iteration   3: 19.051 ns/op
Iteration   4: 19.078 ns/op
Iteration   5: 19.088 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_6":
  19.368 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (19.033, 19.368, 19.539), stdev = 0.227
  CI (99.9%): [19.125, 19.610] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.monomorphic
# Parameters: (param = 3)

# Run progress: 83.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.453 ns/op
# Warmup Iteration   2: 4.452 ns/op
# Warmup Iteration   3: 4.450 ns/op
# Warmup Iteration   4: 4.429 ns/op
# Warmup Iteration   5: 4.398 ns/op
Iteration   1: 4.399 ns/op
Iteration   2: 4.394 ns/op
Iteration   3: 4.389 ns/op
Iteration   4: 4.390 ns/op
Iteration   5: 4.391 ns/op

# Run progress: 88.89% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3.781 ns/op
# Warmup Iteration   2: 3.832 ns/op
# Warmup Iteration   3: 3.872 ns/op
# Warmup Iteration   4: 3.887 ns/op
# Warmup Iteration   5: 3.899 ns/op
Iteration   1: 3.896 ns/op
Iteration   2: 3.906 ns/op
Iteration   3: 3.901 ns/op
Iteration   4: 3.907 ns/op
Iteration   5: 3.909 ns/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 4.427 ns/op
# Warmup Iteration   2: 4.433 ns/op
# Warmup Iteration   3: 4.424 ns/op
# Warmup Iteration   4: 4.425 ns/op
# Warmup Iteration   5: 4.419 ns/op
Iteration   1: 4.411 ns/op
Iteration   2: 4.399 ns/op
Iteration   3: 4.397 ns/op
Iteration   4: 4.388 ns/op
Iteration   5: 4.388 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.monomorphic":
  4.231 ±(99.9%) 0.256 ns/op [Average]
  (min, avg, max) = (3.896, 4.231, 4.411), stdev = 0.240
  CI (99.9%): [3.975, 4.487] (assumes normal distribution)


# Run complete. Total time: 00:30:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (param)  Mode  Cnt   Score   Error  Units
MegamorphicInterfaceCallBenchmark.bimorphic            3  avgt   15   3.042 ± 0.088  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_3        3  avgt   15  21.018 ± 1.105  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_4        3  avgt   15  20.143 ± 0.881  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_5        3  avgt   15  20.124 ± 1.085  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_6        3  avgt   15  19.368 ± 0.242  ns/op
MegamorphicInterfaceCallBenchmark.monomorphic          3  avgt   15   4.231 ± 0.256  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/MegamorphicInterfaceCallBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*ScalarReplacementBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ScalarReplacementBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.arg_escape_object_containing_array
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 0.00% complete, ETA 00:20:00
# Fork: 1 of 3
# Warmup Iteration   1: 35.876 ns/op
# Warmup Iteration   2: 34.921 ns/op
# Warmup Iteration   3: 34.735 ns/op
# Warmup Iteration   4: 34.682 ns/op
# Warmup Iteration   5: 34.704 ns/op
Iteration   1: 34.641 ns/op
Iteration   2: 34.772 ns/op
Iteration   3: 34.717 ns/op
Iteration   4: 34.714 ns/op
Iteration   5: 34.752 ns/op

# Run progress: 8.33% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 36.032 ns/op
# Warmup Iteration   2: 34.992 ns/op
# Warmup Iteration   3: 34.824 ns/op
# Warmup Iteration   4: 34.877 ns/op
# Warmup Iteration   5: 34.831 ns/op
Iteration   1: 34.778 ns/op
Iteration   2: 34.804 ns/op
Iteration   3: 34.780 ns/op
Iteration   4: 34.875 ns/op
Iteration   5: 34.805 ns/op

# Run progress: 16.67% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 36.042 ns/op
# Warmup Iteration   2: 35.037 ns/op
# Warmup Iteration   3: 34.830 ns/op
# Warmup Iteration   4: 34.855 ns/op
# Warmup Iteration   5: 34.870 ns/op
Iteration   1: 34.810 ns/op
Iteration   2: 34.837 ns/op
Iteration   3: 34.807 ns/op
Iteration   4: 34.823 ns/op
Iteration   5: 34.824 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.arg_escape_object_containing_array":
  34.783 ±(99.9%) 0.062 ns/op [Average]
  (min, avg, max) = (34.641, 34.783, 34.875), stdev = 0.058
  CI (99.9%): [34.721, 34.845] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 25.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.612 ns/op
# Warmup Iteration   2: 2.927 ns/op
# Warmup Iteration   3: 2.606 ns/op
# Warmup Iteration   4: 2.599 ns/op
# Warmup Iteration   5: 2.581 ns/op
Iteration   1: 2.575 ns/op
Iteration   2: 2.564 ns/op
Iteration   3: 2.557 ns/op
Iteration   4: 2.555 ns/op
Iteration   5: 2.550 ns/op

# Run progress: 33.33% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.511 ns/op
# Warmup Iteration   2: 2.857 ns/op
# Warmup Iteration   3: 2.561 ns/op
# Warmup Iteration   4: 2.556 ns/op
# Warmup Iteration   5: 2.554 ns/op
Iteration   1: 2.554 ns/op
Iteration   2: 2.553 ns/op
Iteration   3: 2.550 ns/op
Iteration   4: 2.552 ns/op
Iteration   5: 2.548 ns/op

# Run progress: 41.67% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.509 ns/op
# Warmup Iteration   2: 2.611 ns/op
# Warmup Iteration   3: 2.355 ns/op
# Warmup Iteration   4: 2.366 ns/op
# Warmup Iteration   5: 2.369 ns/op
Iteration   1: 2.375 ns/op
Iteration   2: 2.374 ns/op
Iteration   3: 2.375 ns/op
Iteration   4: 2.373 ns/op
Iteration   5: 2.374 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object":
  2.495 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (2.373, 2.495, 2.575), stdev = 0.089
  CI (99.9%): [2.400, 2.590] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object_containing_array
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 50.00% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 18.374 ns/op
# Warmup Iteration   2: 17.935 ns/op
# Warmup Iteration   3: 17.909 ns/op
# Warmup Iteration   4: 17.994 ns/op
# Warmup Iteration   5: 17.787 ns/op
Iteration   1: 17.841 ns/op
Iteration   2: 17.989 ns/op
Iteration   3: 18.034 ns/op
Iteration   4: 17.764 ns/op
Iteration   5: 17.885 ns/op

# Run progress: 58.33% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 18.622 ns/op
# Warmup Iteration   2: 17.959 ns/op
# Warmup Iteration   3: 17.829 ns/op
# Warmup Iteration   4: 17.938 ns/op
# Warmup Iteration   5: 17.850 ns/op
Iteration   1: 17.882 ns/op
Iteration   2: 17.778 ns/op
Iteration   3: 17.745 ns/op
Iteration   4: 18.065 ns/op
Iteration   5: 17.868 ns/op

# Run progress: 66.67% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 18.587 ns/op
# Warmup Iteration   2: 18.591 ns/op
# Warmup Iteration   3: 19.302 ns/op
# Warmup Iteration   4: 18.501 ns/op
# Warmup Iteration   5: 18.675 ns/op
Iteration   1: 19.299 ns/op
Iteration   2: 18.860 ns/op
Iteration   3: 18.763 ns/op
Iteration   4: 18.799 ns/op
Iteration   5: 18.743 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object_containing_array":
  18.221 ±(99.9%) 0.550 ns/op [Average]
  (min, avg, max) = (17.745, 18.221, 19.299), stdev = 0.515
  CI (99.9%): [17.671, 18.771] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.partial_escape_object_containing_array
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 75.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 18.861 ns/op
# Warmup Iteration   2: 17.831 ns/op
# Warmup Iteration   3: 18.038 ns/op
# Warmup Iteration   4: 18.057 ns/op
# Warmup Iteration   5: 17.986 ns/op
Iteration   1: 18.024 ns/op
Iteration   2: 17.976 ns/op
Iteration   3: 17.960 ns/op
Iteration   4: 17.982 ns/op
Iteration   5: 18.105 ns/op

# Run progress: 83.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 18.632 ns/op
# Warmup Iteration   2: 17.845 ns/op
# Warmup Iteration   3: 18.259 ns/op
# Warmup Iteration   4: 18.175 ns/op
# Warmup Iteration   5: 17.931 ns/op
Iteration   1: 18.029 ns/op
Iteration   2: 18.025 ns/op
Iteration   3: 18.167 ns/op
Iteration   4: 17.942 ns/op
Iteration   5: 18.068 ns/op

# Run progress: 91.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 18.838 ns/op
# Warmup Iteration   2: 17.898 ns/op
# Warmup Iteration   3: 18.147 ns/op
# Warmup Iteration   4: 17.948 ns/op
# Warmup Iteration   5: 18.025 ns/op
Iteration   1: 17.835 ns/op
Iteration   2: 17.894 ns/op
Iteration   3: 17.844 ns/op
Iteration   4: 18.113 ns/op
Iteration   5: 18.114 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.partial_escape_object_containing_array":
  18.005 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (17.835, 18.005, 18.167), stdev = 0.100
  CI (99.9%): [17.898, 18.112] (assumes normal distribution)


# Run complete. Total time: 00:20:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (objectEscapes)  (param)  (size)  Mode  Cnt   Score   Error  Units
ScalarReplacementBenchmark.arg_escape_object_containing_array                false        3     128  avgt   15  34.783 ± 0.062  ns/op
ScalarReplacementBenchmark.no_escape_object                                  false        3     128  avgt   15   2.495 ± 0.095  ns/op
ScalarReplacementBenchmark.no_escape_object_containing_array                 false        3     128  avgt   15  18.221 ± 0.550  ns/op
ScalarReplacementBenchmark.partial_escape_object_containing_array            false        3     128  avgt   15  18.005 ± 0.107  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/ScalarReplacementBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*ChainingLambdaBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ChainingLambdaBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:55:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.237 ns/op
# Warmup Iteration   2: 2.347 ns/op
# Warmup Iteration   3: 2.109 ns/op
# Warmup Iteration   4: 2.118 ns/op
# Warmup Iteration   5: 2.113 ns/op
Iteration   1: 2.104 ns/op
Iteration   2: 2.108 ns/op
Iteration   3: 2.108 ns/op
Iteration   4: 2.105 ns/op
Iteration   5: 2.102 ns/op

# Run progress: 3.03% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: 2.539 ns/op
# Warmup Iteration   2: 2.650 ns/op
# Warmup Iteration   3: 2.380 ns/op
# Warmup Iteration   4: 2.375 ns/op
# Warmup Iteration   5: 2.366 ns/op
Iteration   1: 2.365 ns/op
Iteration   2: 2.362 ns/op
Iteration   3: 2.360 ns/op
Iteration   4: 2.359 ns/op
Iteration   5: 2.362 ns/op

# Run progress: 6.06% complete, ETA 00:51:47
# Fork: 3 of 3
# Warmup Iteration   1: 2.157 ns/op
# Warmup Iteration   2: 2.302 ns/op
# Warmup Iteration   3: 2.093 ns/op
# Warmup Iteration   4: 2.094 ns/op
# Warmup Iteration   5: 2.094 ns/op
Iteration   1: 2.094 ns/op
Iteration   2: 2.094 ns/op
Iteration   3: 2.094 ns/op
Iteration   4: 2.093 ns/op
Iteration   5: 2.100 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.baseline":
  2.187 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (2.093, 2.187, 2.365), stdev = 0.128
  CI (99.9%): [2.051, 2.324] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_1
# Parameters: (value = 42)

# Run progress: 9.09% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 2.187 ns/op
# Warmup Iteration   2: 2.319 ns/op
# Warmup Iteration   3: 2.094 ns/op
# Warmup Iteration   4: 2.094 ns/op
# Warmup Iteration   5: 2.096 ns/op
Iteration   1: 2.094 ns/op
Iteration   2: 2.096 ns/op
Iteration   3: 2.096 ns/op
Iteration   4: 2.096 ns/op
Iteration   5: 2.103 ns/op

# Run progress: 12.12% complete, ETA 00:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 2.532 ns/op
# Warmup Iteration   2: 2.628 ns/op
# Warmup Iteration   3: 2.370 ns/op
# Warmup Iteration   4: 2.366 ns/op
# Warmup Iteration   5: 2.363 ns/op
Iteration   1: 2.356 ns/op
Iteration   2: 2.351 ns/op
Iteration   3: 2.351 ns/op
Iteration   4: 2.354 ns/op
Iteration   5: 2.353 ns/op

# Run progress: 15.15% complete, ETA 00:46:46
# Fork: 3 of 3
# Warmup Iteration   1: 2.395 ns/op
# Warmup Iteration   2: 2.533 ns/op
# Warmup Iteration   3: 2.285 ns/op
# Warmup Iteration   4: 2.289 ns/op
# Warmup Iteration   5: 2.291 ns/op
Iteration   1: 2.292 ns/op
Iteration   2: 2.292 ns/op
Iteration   3: 2.289 ns/op
Iteration   4: 2.291 ns/op
Iteration   5: 2.294 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_1":
  2.247 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (2.094, 2.247, 2.356), stdev = 0.113
  CI (99.9%): [2.127, 2.368] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_12
# Parameters: (value = 42)

# Run progress: 18.18% complete, ETA 00:45:06
# Fork: 1 of 3
# Warmup Iteration   1: 2.202 ns/op
# Warmup Iteration   2: 2.331 ns/op
# Warmup Iteration   3: 2.103 ns/op
# Warmup Iteration   4: 2.108 ns/op
# Warmup Iteration   5: 2.115 ns/op
Iteration   1: 2.112 ns/op
Iteration   2: 2.113 ns/op
Iteration   3: 2.117 ns/op
Iteration   4: 2.116 ns/op
Iteration   5: 2.114 ns/op

# Run progress: 21.21% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: 2.249 ns/op
# Warmup Iteration   2: 2.365 ns/op
# Warmup Iteration   3: 2.122 ns/op
# Warmup Iteration   4: 2.128 ns/op
# Warmup Iteration   5: 2.129 ns/op
Iteration   1: 2.126 ns/op
Iteration   2: 2.126 ns/op
Iteration   3: 2.123 ns/op
Iteration   4: 2.126 ns/op
Iteration   5: 2.132 ns/op

# Run progress: 24.24% complete, ETA 00:41:45
# Fork: 3 of 3
# Warmup Iteration   1: 2.439 ns/op
# Warmup Iteration   2: 2.616 ns/op
# Warmup Iteration   3: 2.335 ns/op
# Warmup Iteration   4: 2.333 ns/op
# Warmup Iteration   5: 2.326 ns/op
Iteration   1: 2.324 ns/op
Iteration   2: 2.323 ns/op
Iteration   3: 2.321 ns/op
Iteration   4: 2.087 ns/op
Iteration   5: 2.105 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_12":
  2.158 ±(99.9%) 0.092 ns/op [Average]
  (min, avg, max) = (2.087, 2.158, 2.324), stdev = 0.086
  CI (99.9%): [2.065, 2.250] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_16
# Parameters: (value = 42)

# Run progress: 27.27% complete, ETA 00:40:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.426 ns/op
# Warmup Iteration   2: 2.274 ns/op
# Warmup Iteration   3: 2.532 ns/op
# Warmup Iteration   4: 2.269 ns/op
# Warmup Iteration   5: 2.268 ns/op
Iteration   1: 2.264 ns/op
Iteration   2: 2.264 ns/op
Iteration   3: 2.262 ns/op
Iteration   4: 2.261 ns/op
Iteration   5: 2.259 ns/op

# Run progress: 30.30% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 2.205 ns/op
# Warmup Iteration   2: 2.273 ns/op
# Warmup Iteration   3: 2.530 ns/op
# Warmup Iteration   4: 2.265 ns/op
# Warmup Iteration   5: 2.259 ns/op
Iteration   1: 2.259 ns/op
Iteration   2: 2.267 ns/op
Iteration   3: 2.264 ns/op
Iteration   4: 2.260 ns/op
Iteration   5: 2.261 ns/op

# Run progress: 33.33% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 2.134 ns/op
# Warmup Iteration   2: 2.324 ns/op
# Warmup Iteration   3: 2.087 ns/op
# Warmup Iteration   4: 2.095 ns/op
# Warmup Iteration   5: 2.098 ns/op
Iteration   1: 2.100 ns/op
Iteration   2: 2.346 ns/op
Iteration   3: 2.324 ns/op
Iteration   4: 2.316 ns/op
Iteration   5: 2.309 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_16":
  2.268 ±(99.9%) 0.059 ns/op [Average]
  (min, avg, max) = (2.100, 2.268, 2.346), stdev = 0.055
  CI (99.9%): [2.209, 2.326] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_2
# Parameters: (value = 42)

# Run progress: 36.36% complete, ETA 00:35:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.127 ns/op
# Warmup Iteration   2: 2.268 ns/op
# Warmup Iteration   3: 2.063 ns/op
# Warmup Iteration   4: 2.078 ns/op
# Warmup Iteration   5: 2.081 ns/op
Iteration   1: 2.071 ns/op
Iteration   2: 2.082 ns/op
Iteration   3: 2.081 ns/op
Iteration   4: 2.080 ns/op
Iteration   5: 2.086 ns/op

# Run progress: 39.39% complete, ETA 00:33:24
# Fork: 2 of 3
# Warmup Iteration   1: 2.480 ns/op
# Warmup Iteration   2: 2.601 ns/op
# Warmup Iteration   3: 2.337 ns/op
# Warmup Iteration   4: 2.327 ns/op
# Warmup Iteration   5: 2.324 ns/op
Iteration   1: 2.319 ns/op
Iteration   2: 2.318 ns/op
Iteration   3: 2.316 ns/op
Iteration   4: 2.319 ns/op
Iteration   5: 2.318 ns/op

# Run progress: 42.42% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 2.119 ns/op
# Warmup Iteration   2: 2.257 ns/op
# Warmup Iteration   3: 2.042 ns/op
# Warmup Iteration   4: 2.054 ns/op
# Warmup Iteration   5: 2.061 ns/op
Iteration   1: 2.064 ns/op
Iteration   2: 2.066 ns/op
Iteration   3: 2.070 ns/op
Iteration   4: 2.070 ns/op
Iteration   5: 2.065 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_2":
  2.155 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (2.064, 2.155, 2.319), stdev = 0.119
  CI (99.9%): [2.027, 2.283] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_24
# Parameters: (value = 42)

# Run progress: 45.45% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.180 ns/op
# Warmup Iteration   2: 2.616 ns/op
# Warmup Iteration   3: 2.321 ns/op
# Warmup Iteration   4: 2.315 ns/op
# Warmup Iteration   5: 2.305 ns/op
Iteration   1: 2.300 ns/op
Iteration   2: 2.301 ns/op
Iteration   3: 2.299 ns/op
Iteration   4: 2.291 ns/op
Iteration   5: 2.292 ns/op

# Run progress: 48.48% complete, ETA 00:28:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.188 ns/op
# Warmup Iteration   2: 2.516 ns/op
# Warmup Iteration   3: 2.270 ns/op
# Warmup Iteration   4: 2.267 ns/op
# Warmup Iteration   5: 2.262 ns/op
Iteration   1: 2.257 ns/op
Iteration   2: 2.260 ns/op
Iteration   3: 2.256 ns/op
Iteration   4: 2.262 ns/op
Iteration   5: 2.256 ns/op

# Run progress: 51.52% complete, ETA 00:26:43
# Fork: 3 of 3
# Warmup Iteration   1: 2.361 ns/op
# Warmup Iteration   2: 1.989 ns/op
# Warmup Iteration   3: 2.258 ns/op
# Warmup Iteration   4: 2.030 ns/op
# Warmup Iteration   5: 2.037 ns/op
Iteration   1: 2.041 ns/op
Iteration   2: 2.038 ns/op
Iteration   3: 2.041 ns/op
Iteration   4: 2.044 ns/op
Iteration   5: 2.052 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_24":
  2.199 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (2.038, 2.199, 2.301), stdev = 0.116
  CI (99.9%): [2.076, 2.323] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_3
# Parameters: (value = 42)

# Run progress: 54.55% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 2.240 ns/op
# Warmup Iteration   2: 2.353 ns/op
# Warmup Iteration   3: 2.108 ns/op
# Warmup Iteration   4: 2.110 ns/op
# Warmup Iteration   5: 2.113 ns/op
Iteration   1: 2.109 ns/op
Iteration   2: 2.113 ns/op
Iteration   3: 2.112 ns/op
Iteration   4: 2.114 ns/op
Iteration   5: 2.109 ns/op

# Run progress: 57.58% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.222 ns/op
# Warmup Iteration   2: 2.349 ns/op
# Warmup Iteration   3: 2.114 ns/op
# Warmup Iteration   4: 2.120 ns/op
# Warmup Iteration   5: 2.121 ns/op
Iteration   1: 2.120 ns/op
Iteration   2: 2.118 ns/op
Iteration   3: 2.120 ns/op
Iteration   4: 2.122 ns/op
Iteration   5: 2.124 ns/op

# Run progress: 60.61% complete, ETA 00:21:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.474 ns/op
# Warmup Iteration   2: 2.594 ns/op
# Warmup Iteration   3: 2.333 ns/op
# Warmup Iteration   4: 2.333 ns/op
# Warmup Iteration   5: 2.320 ns/op
Iteration   1: 2.319 ns/op
Iteration   2: 2.320 ns/op
Iteration   3: 2.313 ns/op
Iteration   4: 2.317 ns/op
Iteration   5: 2.318 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_3":
  2.183 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (2.109, 2.183, 2.320), stdev = 0.098
  CI (99.9%): [2.078, 2.288] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_4
# Parameters: (value = 42)

# Run progress: 63.64% complete, ETA 00:20:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.376 ns/op
# Warmup Iteration   2: 2.507 ns/op
# Warmup Iteration   3: 2.273 ns/op
# Warmup Iteration   4: 2.270 ns/op
# Warmup Iteration   5: 2.271 ns/op
Iteration   1: 2.273 ns/op
Iteration   2: 2.269 ns/op
Iteration   3: 2.265 ns/op
Iteration   4: 2.271 ns/op
Iteration   5: 2.276 ns/op

# Run progress: 66.67% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.186 ns/op
# Warmup Iteration   2: 2.327 ns/op
# Warmup Iteration   3: 2.114 ns/op
# Warmup Iteration   4: 2.120 ns/op
# Warmup Iteration   5: 2.127 ns/op
Iteration   1: 2.124 ns/op
Iteration   2: 2.126 ns/op
Iteration   3: 2.122 ns/op
Iteration   4: 2.115 ns/op
Iteration   5: 2.125 ns/op

# Run progress: 69.70% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.214 ns/op
# Warmup Iteration   2: 2.333 ns/op
# Warmup Iteration   3: 2.094 ns/op
# Warmup Iteration   4: 2.098 ns/op
# Warmup Iteration   5: 2.094 ns/op
Iteration   1: 2.096 ns/op
Iteration   2: 2.102 ns/op
Iteration   3: 2.099 ns/op
Iteration   4: 2.093 ns/op
Iteration   5: 2.095 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_4":
  2.164 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (2.093, 2.164, 2.276), stdev = 0.079
  CI (99.9%): [2.079, 2.248] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_5
# Parameters: (value = 42)

# Run progress: 72.73% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.169 ns/op
# Warmup Iteration   2: 2.347 ns/op
# Warmup Iteration   3: 2.110 ns/op
# Warmup Iteration   4: 2.117 ns/op
# Warmup Iteration   5: 2.121 ns/op
Iteration   1: 2.117 ns/op
Iteration   2: 2.121 ns/op
Iteration   3: 2.117 ns/op
Iteration   4: 2.119 ns/op
Iteration   5: 2.118 ns/op

# Run progress: 75.76% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.222 ns/op
# Warmup Iteration   2: 2.347 ns/op
# Warmup Iteration   3: 2.117 ns/op
# Warmup Iteration   4: 2.125 ns/op
# Warmup Iteration   5: 2.123 ns/op
Iteration   1: 2.120 ns/op
Iteration   2: 2.118 ns/op
Iteration   3: 2.118 ns/op
Iteration   4: 2.122 ns/op
Iteration   5: 2.125 ns/op

# Run progress: 78.79% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.477 ns/op
# Warmup Iteration   2: 2.602 ns/op
# Warmup Iteration   3: 2.336 ns/op
# Warmup Iteration   4: 2.337 ns/op
# Warmup Iteration   5: 2.333 ns/op
Iteration   1: 2.325 ns/op
Iteration   2: 2.321 ns/op
Iteration   3: 2.320 ns/op
Iteration   4: 2.319 ns/op
Iteration   5: 2.315 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_5":
  2.186 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (2.117, 2.186, 2.325), stdev = 0.098
  CI (99.9%): [2.082, 2.291] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_6
# Parameters: (value = 42)

# Run progress: 81.82% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 2.379 ns/op
# Warmup Iteration   2: 2.512 ns/op
# Warmup Iteration   3: 2.270 ns/op
# Warmup Iteration   4: 2.273 ns/op
# Warmup Iteration   5: 2.271 ns/op
Iteration   1: 2.273 ns/op
Iteration   2: 2.269 ns/op
Iteration   3: 2.268 ns/op
Iteration   4: 2.270 ns/op
Iteration   5: 2.274 ns/op

# Run progress: 84.85% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.184 ns/op
# Warmup Iteration   2: 2.250 ns/op
# Warmup Iteration   3: 2.036 ns/op
# Warmup Iteration   4: 2.047 ns/op
# Warmup Iteration   5: 2.058 ns/op
Iteration   1: 2.057 ns/op
Iteration   2: 2.060 ns/op
Iteration   3: 2.062 ns/op
Iteration   4: 2.065 ns/op
Iteration   5: 2.063 ns/op

# Run progress: 87.88% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.478 ns/op
# Warmup Iteration   2: 2.545 ns/op
# Warmup Iteration   3: 2.285 ns/op
# Warmup Iteration   4: 2.286 ns/op
# Warmup Iteration   5: 2.281 ns/op
Iteration   1: 2.275 ns/op
Iteration   2: 2.273 ns/op
Iteration   3: 2.268 ns/op
Iteration   4: 2.271 ns/op
Iteration   5: 2.269 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_6":
  2.201 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (2.057, 2.201, 2.275), stdev = 0.102
  CI (99.9%): [2.092, 2.311] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_8
# Parameters: (value = 42)

# Run progress: 90.91% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.120 ns/op
# Warmup Iteration   2: 2.257 ns/op
# Warmup Iteration   3: 2.038 ns/op
# Warmup Iteration   4: 2.046 ns/op
# Warmup Iteration   5: 2.050 ns/op
Iteration   1: 2.050 ns/op
Iteration   2: 2.052 ns/op
Iteration   3: 2.061 ns/op
Iteration   4: 2.061 ns/op
Iteration   5: 2.063 ns/op

# Run progress: 93.94% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.177 ns/op
# Warmup Iteration   2: 2.344 ns/op
# Warmup Iteration   3: 2.592 ns/op
# Warmup Iteration   4: 2.330 ns/op
# Warmup Iteration   5: 2.328 ns/op
Iteration   1: 2.323 ns/op
Iteration   2: 2.317 ns/op
Iteration   3: 2.310 ns/op
Iteration   4: 2.306 ns/op
Iteration   5: 2.309 ns/op

# Run progress: 96.97% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.413 ns/op
# Warmup Iteration   2: 2.303 ns/op
# Warmup Iteration   3: 2.087 ns/op
# Warmup Iteration   4: 2.093 ns/op
# Warmup Iteration   5: 2.097 ns/op
Iteration   1: 2.097 ns/op
Iteration   2: 2.099 ns/op
Iteration   3: 2.099 ns/op
Iteration   4: 2.102 ns/op
Iteration   5: 2.103 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_8":
  2.157 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (2.050, 2.157, 2.323), stdev = 0.116
  CI (99.9%): [2.033, 2.281] (assumes normal distribution)


# Run complete. Total time: 00:55:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         (value)  Mode  Cnt  Score   Error  Units
ChainingLambdaBenchmark.baseline       42  avgt   15  2.187 ± 0.136  ns/op
ChainingLambdaBenchmark.depth_1        42  avgt   15  2.247 ± 0.121  ns/op
ChainingLambdaBenchmark.depth_12       42  avgt   15  2.158 ± 0.092  ns/op
ChainingLambdaBenchmark.depth_16       42  avgt   15  2.268 ± 0.059  ns/op
ChainingLambdaBenchmark.depth_2        42  avgt   15  2.155 ± 0.128  ns/op
ChainingLambdaBenchmark.depth_24       42  avgt   15  2.199 ± 0.123  ns/op
ChainingLambdaBenchmark.depth_3        42  avgt   15  2.183 ± 0.105  ns/op
ChainingLambdaBenchmark.depth_4        42  avgt   15  2.164 ± 0.085  ns/op
ChainingLambdaBenchmark.depth_5        42  avgt   15  2.186 ± 0.105  ns/op
ChainingLambdaBenchmark.depth_6        42  avgt   15  2.201 ± 0.109  ns/op
ChainingLambdaBenchmark.depth_8        42  avgt   15  2.157 ± 0.124  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/ChainingLambdaBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*ChainingAnonymousClassBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ChainingAnonymousClassBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:55:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.206 ns/op
# Warmup Iteration   2: 2.325 ns/op
# Warmup Iteration   3: 2.299 ns/op
# Warmup Iteration   4: 2.288 ns/op
# Warmup Iteration   5: 2.284 ns/op
Iteration   1: 2.278 ns/op
Iteration   2: 2.276 ns/op
Iteration   3: 2.275 ns/op
Iteration   4: 2.269 ns/op
Iteration   5: 2.268 ns/op

# Run progress: 3.03% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: 2.374 ns/op
# Warmup Iteration   2: 2.239 ns/op
# Warmup Iteration   3: 2.041 ns/op
# Warmup Iteration   4: 2.044 ns/op
# Warmup Iteration   5: 2.048 ns/op
Iteration   1: 2.052 ns/op
Iteration   2: 2.051 ns/op
Iteration   3: 2.052 ns/op
Iteration   4: 2.059 ns/op
Iteration   5: 2.058 ns/op

# Run progress: 6.06% complete, ETA 00:51:47
# Fork: 3 of 3
# Warmup Iteration   1: 2.479 ns/op
# Warmup Iteration   2: 2.599 ns/op
# Warmup Iteration   3: 2.342 ns/op
# Warmup Iteration   4: 2.330 ns/op
# Warmup Iteration   5: 2.322 ns/op
Iteration   1: 2.318 ns/op
Iteration   2: 2.316 ns/op
Iteration   3: 2.315 ns/op
Iteration   4: 2.308 ns/op
Iteration   5: 2.312 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.baseline":
  2.214 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (2.051, 2.214, 2.318), stdev = 0.118
  CI (99.9%): [2.088, 2.340] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_1
# Parameters: (value = 42)

# Run progress: 9.09% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 2.115 ns/op
# Warmup Iteration   2: 2.312 ns/op
# Warmup Iteration   3: 2.095 ns/op
# Warmup Iteration   4: 2.098 ns/op
# Warmup Iteration   5: 2.099 ns/op
Iteration   1: 2.102 ns/op
Iteration   2: 2.102 ns/op
Iteration   3: 2.103 ns/op
Iteration   4: 2.106 ns/op
Iteration   5: 2.109 ns/op

# Run progress: 12.12% complete, ETA 00:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 2.141 ns/op
# Warmup Iteration   2: 2.262 ns/op
# Warmup Iteration   3: 2.045 ns/op
# Warmup Iteration   4: 2.051 ns/op
# Warmup Iteration   5: 2.050 ns/op
Iteration   1: 2.053 ns/op
Iteration   2: 2.056 ns/op
Iteration   3: 2.053 ns/op
Iteration   4: 2.054 ns/op
Iteration   5: 2.055 ns/op

# Run progress: 15.15% complete, ETA 00:46:46
# Fork: 3 of 3
# Warmup Iteration   1: 2.483 ns/op
# Warmup Iteration   2: 2.594 ns/op
# Warmup Iteration   3: 2.328 ns/op
# Warmup Iteration   4: 2.323 ns/op
# Warmup Iteration   5: 2.314 ns/op
Iteration   1: 2.312 ns/op
Iteration   2: 2.306 ns/op
Iteration   3: 2.305 ns/op
Iteration   4: 2.303 ns/op
Iteration   5: 2.300 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_1":
  2.155 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (2.053, 2.155, 2.312), stdev = 0.112
  CI (99.9%): [2.035, 2.275] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_12
# Parameters: (value = 42)

# Run progress: 18.18% complete, ETA 00:45:06
# Fork: 1 of 3
# Warmup Iteration   1: 2.416 ns/op
# Warmup Iteration   2: 2.287 ns/op
# Warmup Iteration   3: 2.077 ns/op
# Warmup Iteration   4: 2.083 ns/op
# Warmup Iteration   5: 2.083 ns/op
Iteration   1: 2.085 ns/op
Iteration   2: 2.086 ns/op
Iteration   3: 2.088 ns/op
Iteration   4: 2.089 ns/op
Iteration   5: 2.092 ns/op

# Run progress: 21.21% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: 2.131 ns/op
# Warmup Iteration   2: 2.258 ns/op
# Warmup Iteration   3: 2.032 ns/op
# Warmup Iteration   4: 2.037 ns/op
# Warmup Iteration   5: 2.038 ns/op
Iteration   1: 2.041 ns/op
Iteration   2: 2.040 ns/op
Iteration   3: 2.040 ns/op
Iteration   4: 2.044 ns/op
Iteration   5: 2.040 ns/op

# Run progress: 24.24% complete, ETA 00:41:46
# Fork: 3 of 3
# Warmup Iteration   1: 2.429 ns/op
# Warmup Iteration   2: 2.258 ns/op
# Warmup Iteration   3: 2.043 ns/op
# Warmup Iteration   4: 2.056 ns/op
# Warmup Iteration   5: 2.057 ns/op
Iteration   1: 2.055 ns/op
Iteration   2: 2.056 ns/op
Iteration   3: 2.058 ns/op
Iteration   4: 2.058 ns/op
Iteration   5: 2.061 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_12":
  2.062 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (2.040, 2.062, 2.092), stdev = 0.020
  CI (99.9%): [2.041, 2.084] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_16
# Parameters: (value = 42)

# Run progress: 27.27% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 2.231 ns/op
# Warmup Iteration   2: 2.290 ns/op
# Warmup Iteration   3: 2.522 ns/op
# Warmup Iteration   4: 2.259 ns/op
# Warmup Iteration   5: 2.254 ns/op
Iteration   1: 2.251 ns/op
Iteration   2: 2.014 ns/op
Iteration   3: 2.026 ns/op
Iteration   4: 2.028 ns/op
Iteration   5: 2.032 ns/op

# Run progress: 30.30% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 2.228 ns/op
# Warmup Iteration   2: 2.335 ns/op
# Warmup Iteration   3: 2.086 ns/op
# Warmup Iteration   4: 2.088 ns/op
# Warmup Iteration   5: 2.088 ns/op
Iteration   1: 2.089 ns/op
Iteration   2: 2.091 ns/op
Iteration   3: 2.090 ns/op
Iteration   4: 2.091 ns/op
Iteration   5: 2.089 ns/op

# Run progress: 33.33% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 2.153 ns/op
# Warmup Iteration   2: 2.054 ns/op
# Warmup Iteration   3: 2.334 ns/op
# Warmup Iteration   4: 2.107 ns/op
# Warmup Iteration   5: 2.113 ns/op
Iteration   1: 2.113 ns/op
Iteration   2: 2.117 ns/op
Iteration   3: 2.110 ns/op
Iteration   4: 2.110 ns/op
Iteration   5: 2.115 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_16":
  2.091 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (2.014, 2.091, 2.251), stdev = 0.057
  CI (99.9%): [2.030, 2.152] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_2
# Parameters: (value = 42)

# Run progress: 36.36% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.214 ns/op
# Warmup Iteration   2: 2.330 ns/op
# Warmup Iteration   3: 2.108 ns/op
# Warmup Iteration   4: 2.109 ns/op
# Warmup Iteration   5: 2.112 ns/op
Iteration   1: 2.114 ns/op
Iteration   2: 2.110 ns/op
Iteration   3: 2.110 ns/op
Iteration   4: 2.108 ns/op
Iteration   5: 2.113 ns/op

# Run progress: 39.39% complete, ETA 00:33:24
# Fork: 2 of 3
# Warmup Iteration   1: 2.215 ns/op
# Warmup Iteration   2: 2.329 ns/op
# Warmup Iteration   3: 2.110 ns/op
# Warmup Iteration   4: 2.110 ns/op
# Warmup Iteration   5: 2.107 ns/op
Iteration   1: 2.111 ns/op
Iteration   2: 2.545 ns/op
Iteration   3: 2.119 ns/op
Iteration   4: 2.115 ns/op
Iteration   5: 2.111 ns/op

# Run progress: 42.42% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 2.406 ns/op
# Warmup Iteration   2: 2.526 ns/op
# Warmup Iteration   3: 2.276 ns/op
# Warmup Iteration   4: 2.274 ns/op
# Warmup Iteration   5: 2.268 ns/op
Iteration   1: 2.262 ns/op
Iteration   2: 2.259 ns/op
Iteration   3: 2.261 ns/op
Iteration   4: 2.261 ns/op
Iteration   5: 2.262 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_2":
  2.191 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (2.108, 2.191, 2.545), stdev = 0.121
  CI (99.9%): [2.061, 2.320] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_24
# Parameters: (value = 42)

# Run progress: 45.45% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.116 ns/op
# Warmup Iteration   2: 2.259 ns/op
# Warmup Iteration   3: 2.027 ns/op
# Warmup Iteration   4: 2.029 ns/op
# Warmup Iteration   5: 2.029 ns/op
Iteration   1: 2.030 ns/op
Iteration   2: 2.030 ns/op
Iteration   3: 2.030 ns/op
Iteration   4: 2.034 ns/op
Iteration   5: 2.034 ns/op

# Run progress: 48.48% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 2.474 ns/op
# Warmup Iteration   2: 2.321 ns/op
# Warmup Iteration   3: 2.085 ns/op
# Warmup Iteration   4: 2.091 ns/op
# Warmup Iteration   5: 2.091 ns/op
Iteration   1: 2.091 ns/op
Iteration   2: 2.089 ns/op
Iteration   3: 2.094 ns/op
Iteration   4: 2.098 ns/op
Iteration   5: 2.090 ns/op

# Run progress: 51.52% complete, ETA 00:26:43
# Fork: 3 of 3
# Warmup Iteration   1: 2.190 ns/op
# Warmup Iteration   2: 2.459 ns/op
# Warmup Iteration   3: 3.015 ns/op
# Warmup Iteration   4: 3.016 ns/op
# Warmup Iteration   5: 3.018 ns/op
Iteration   1: 3.020 ns/op
Iteration   2: 3.293 ns/op
Iteration   3: 3.281 ns/op
Iteration   4: 3.268 ns/op
Iteration   5: 3.265 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_24":
  2.450 ±(99.9%) 0.611 ns/op [Average]
  (min, avg, max) = (2.030, 2.450, 3.293), stdev = 0.571
  CI (99.9%): [1.839, 3.061] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_3
# Parameters: (value = 42)

# Run progress: 54.55% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 2.390 ns/op
# Warmup Iteration   2: 2.248 ns/op
# Warmup Iteration   3: 2.038 ns/op
# Warmup Iteration   4: 2.047 ns/op
# Warmup Iteration   5: 2.055 ns/op
Iteration   1: 2.056 ns/op
Iteration   2: 2.063 ns/op
Iteration   3: 2.060 ns/op
Iteration   4: 2.058 ns/op
Iteration   5: 2.123 ns/op

# Run progress: 57.58% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.167 ns/op
# Warmup Iteration   2: 2.290 ns/op
# Warmup Iteration   3: 2.072 ns/op
# Warmup Iteration   4: 2.077 ns/op
# Warmup Iteration   5: 2.080 ns/op
Iteration   1: 2.075 ns/op
Iteration   2: 2.077 ns/op
Iteration   3: 2.074 ns/op
Iteration   4: 2.073 ns/op
Iteration   5: 2.080 ns/op

# Run progress: 60.61% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 2.488 ns/op
# Warmup Iteration   2: 2.601 ns/op
# Warmup Iteration   3: 2.334 ns/op
# Warmup Iteration   4: 2.326 ns/op
# Warmup Iteration   5: 2.319 ns/op
Iteration   1: 2.317 ns/op
Iteration   2: 2.305 ns/op
Iteration   3: 2.302 ns/op
Iteration   4: 2.299 ns/op
Iteration   5: 2.301 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_3":
  2.151 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (2.056, 2.151, 2.317), stdev = 0.114
  CI (99.9%): [2.029, 2.273] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_4
# Parameters: (value = 42)

# Run progress: 63.64% complete, ETA 00:20:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.111 ns/op
# Warmup Iteration   2: 2.249 ns/op
# Warmup Iteration   3: 2.040 ns/op
# Warmup Iteration   4: 2.040 ns/op
# Warmup Iteration   5: 2.039 ns/op
Iteration   1: 2.041 ns/op
Iteration   2: 2.046 ns/op
Iteration   3: 2.051 ns/op
Iteration   4: 2.047 ns/op
Iteration   5: 2.048 ns/op

# Run progress: 66.67% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.416 ns/op
# Warmup Iteration   2: 2.527 ns/op
# Warmup Iteration   3: 2.276 ns/op
# Warmup Iteration   4: 2.274 ns/op
# Warmup Iteration   5: 2.268 ns/op
Iteration   1: 2.269 ns/op
Iteration   2: 2.267 ns/op
Iteration   3: 2.269 ns/op
Iteration   4: 2.269 ns/op
Iteration   5: 2.268 ns/op

# Run progress: 69.70% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.515 ns/op
# Warmup Iteration   2: 2.462 ns/op
# Warmup Iteration   3: 2.157 ns/op
# Warmup Iteration   4: 2.140 ns/op
# Warmup Iteration   5: 2.102 ns/op
Iteration   1: 2.091 ns/op
Iteration   2: 2.089 ns/op
Iteration   3: 2.092 ns/op
Iteration   4: 2.088 ns/op
Iteration   5: 2.088 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_4":
  2.135 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (2.041, 2.135, 2.269), stdev = 0.099
  CI (99.9%): [2.029, 2.241] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_5
# Parameters: (value = 42)

# Run progress: 72.73% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.217 ns/op
# Warmup Iteration   2: 2.331 ns/op
# Warmup Iteration   3: 2.118 ns/op
# Warmup Iteration   4: 2.121 ns/op
# Warmup Iteration   5: 2.116 ns/op
Iteration   1: 2.118 ns/op
Iteration   2: 2.120 ns/op
Iteration   3: 2.113 ns/op
Iteration   4: 2.112 ns/op
Iteration   5: 2.111 ns/op

# Run progress: 75.76% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.157 ns/op
# Warmup Iteration   2: 2.267 ns/op
# Warmup Iteration   3: 2.067 ns/op
# Warmup Iteration   4: 2.067 ns/op
# Warmup Iteration   5: 2.063 ns/op
Iteration   1: 2.068 ns/op
Iteration   2: 2.068 ns/op
Iteration   3: 2.069 ns/op
Iteration   4: 2.073 ns/op
Iteration   5: 2.067 ns/op

# Run progress: 78.79% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.476 ns/op
# Warmup Iteration   2: 2.257 ns/op
# Warmup Iteration   3: 2.026 ns/op
# Warmup Iteration   4: 2.029 ns/op
# Warmup Iteration   5: 2.037 ns/op
Iteration   1: 2.037 ns/op
Iteration   2: 2.059 ns/op
Iteration   3: 2.336 ns/op
Iteration   4: 2.313 ns/op
Iteration   5: 2.292 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_5":
  2.131 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (2.037, 2.131, 2.336), stdev = 0.099
  CI (99.9%): [2.025, 2.236] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_6
# Parameters: (value = 42)

# Run progress: 81.82% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 2.186 ns/op
# Warmup Iteration   2: 2.319 ns/op
# Warmup Iteration   3: 2.085 ns/op
# Warmup Iteration   4: 2.086 ns/op
# Warmup Iteration   5: 2.089 ns/op
Iteration   1: 2.086 ns/op
Iteration   2: 2.085 ns/op
Iteration   3: 2.084 ns/op
Iteration   4: 2.084 ns/op
Iteration   5: 2.085 ns/op

# Run progress: 84.85% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.414 ns/op
# Warmup Iteration   2: 2.519 ns/op
# Warmup Iteration   3: 2.257 ns/op
# Warmup Iteration   4: 2.251 ns/op
# Warmup Iteration   5: 2.253 ns/op
Iteration   1: 2.250 ns/op
Iteration   2: 2.250 ns/op
Iteration   3: 2.248 ns/op
Iteration   4: 2.247 ns/op
Iteration   5: 2.244 ns/op

# Run progress: 87.88% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.366 ns/op
# Warmup Iteration   2: 2.477 ns/op
# Warmup Iteration   3: 2.229 ns/op
# Warmup Iteration   4: 2.232 ns/op
# Warmup Iteration   5: 2.228 ns/op
Iteration   1: 2.227 ns/op
Iteration   2: 2.228 ns/op
Iteration   3: 2.228 ns/op
Iteration   4: 2.232 ns/op
Iteration   5: 2.234 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_6":
  2.187 ±(99.9%) 0.081 ns/op [Average]
  (min, avg, max) = (2.084, 2.187, 2.250), stdev = 0.076
  CI (99.9%): [2.107, 2.268] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_8
# Parameters: (value = 42)

# Run progress: 90.91% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.378 ns/op
# Warmup Iteration   2: 2.497 ns/op
# Warmup Iteration   3: 2.243 ns/op
# Warmup Iteration   4: 2.245 ns/op
# Warmup Iteration   5: 2.245 ns/op
Iteration   1: 2.245 ns/op
Iteration   2: 2.240 ns/op
Iteration   3: 2.238 ns/op
Iteration   4: 2.233 ns/op
Iteration   5: 2.238 ns/op

# Run progress: 93.94% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.165 ns/op
# Warmup Iteration   2: 2.240 ns/op
# Warmup Iteration   3: 2.023 ns/op
# Warmup Iteration   4: 2.027 ns/op
# Warmup Iteration   5: 2.026 ns/op
Iteration   1: 2.027 ns/op
Iteration   2: 2.029 ns/op
Iteration   3: 2.031 ns/op
Iteration   4: 2.032 ns/op
Iteration   5: 2.031 ns/op

# Run progress: 96.97% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.150 ns/op
# Warmup Iteration   2: 2.258 ns/op
# Warmup Iteration   3: 2.045 ns/op
# Warmup Iteration   4: 2.036 ns/op
# Warmup Iteration   5: 2.032 ns/op
Iteration   1: 2.029 ns/op
Iteration   2: 2.033 ns/op
Iteration   3: 2.034 ns/op
Iteration   4: 2.033 ns/op
Iteration   5: 2.036 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_8":
  2.101 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (2.027, 2.101, 2.245), stdev = 0.101
  CI (99.9%): [1.992, 2.209] (assumes normal distribution)


# Run complete. Total time: 00:55:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 (value)  Mode  Cnt  Score   Error  Units
ChainingAnonymousClassBenchmark.baseline       42  avgt   15  2.214 ± 0.126  ns/op
ChainingAnonymousClassBenchmark.depth_1        42  avgt   15  2.155 ± 0.120  ns/op
ChainingAnonymousClassBenchmark.depth_12       42  avgt   15  2.062 ± 0.022  ns/op
ChainingAnonymousClassBenchmark.depth_16       42  avgt   15  2.091 ± 0.061  ns/op
ChainingAnonymousClassBenchmark.depth_2        42  avgt   15  2.191 ± 0.129  ns/op
ChainingAnonymousClassBenchmark.depth_24       42  avgt   15  2.450 ± 0.611  ns/op
ChainingAnonymousClassBenchmark.depth_3        42  avgt   15  2.151 ± 0.122  ns/op
ChainingAnonymousClassBenchmark.depth_4        42  avgt   15  2.135 ± 0.106  ns/op
ChainingAnonymousClassBenchmark.depth_5        42  avgt   15  2.131 ± 0.105  ns/op
ChainingAnonymousClassBenchmark.depth_6        42  avgt   15  2.187 ± 0.081  ns/op
ChainingAnonymousClassBenchmark.depth_8        42  avgt   15  2.101 ± 0.108  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/ChainingAnonymousClassBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*ChainingMethodRefBoundedBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ChainingMethodRefBoundedBenchmark.json
Running java  -jar benchmarks/target/benchmarks.jar .*ChainingMethodRefUnboundedBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_c1_c2_jit/ChainingMethodRefUnboundedBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:55:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.456 ns/op
# Warmup Iteration   2: 2.566 ns/op
# Warmup Iteration   3: 2.293 ns/op
# Warmup Iteration   4: 2.285 ns/op
# Warmup Iteration   5: 2.284 ns/op
Iteration   1: 2.281 ns/op
Iteration   2: 2.282 ns/op
Iteration   3: 2.277 ns/op
Iteration   4: 2.276 ns/op
Iteration   5: 2.275 ns/op

# Run progress: 3.03% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: 2.146 ns/op
# Warmup Iteration   2: 2.294 ns/op
# Warmup Iteration   3: 2.070 ns/op
# Warmup Iteration   4: 2.078 ns/op
# Warmup Iteration   5: 2.080 ns/op
Iteration   1: 2.083 ns/op
Iteration   2: 2.084 ns/op
Iteration   3: 2.084 ns/op
Iteration   4: 2.085 ns/op
Iteration   5: 2.084 ns/op

# Run progress: 6.06% complete, ETA 00:51:47
# Fork: 3 of 3
# Warmup Iteration   1: 2.429 ns/op
# Warmup Iteration   2: 2.549 ns/op
# Warmup Iteration   3: 2.284 ns/op
# Warmup Iteration   4: 2.284 ns/op
# Warmup Iteration   5: 2.281 ns/op
Iteration   1: 2.278 ns/op
Iteration   2: 2.276 ns/op
Iteration   3: 2.277 ns/op
Iteration   4: 2.276 ns/op
Iteration   5: 2.276 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.baseline":
  2.213 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (2.083, 2.213, 2.282), stdev = 0.094
  CI (99.9%): [2.112, 2.314] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_1
# Parameters: (value = 42)

# Run progress: 9.09% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 2.342 ns/op
# Warmup Iteration   2: 2.478 ns/op
# Warmup Iteration   3: 2.239 ns/op
# Warmup Iteration   4: 2.238 ns/op
# Warmup Iteration   5: 2.240 ns/op
Iteration   1: 2.242 ns/op
Iteration   2: 2.243 ns/op
Iteration   3: 2.240 ns/op
Iteration   4: 2.240 ns/op
Iteration   5: 2.241 ns/op

# Run progress: 12.12% complete, ETA 00:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 2.394 ns/op
# Warmup Iteration   2: 2.530 ns/op
# Warmup Iteration   3: 2.287 ns/op
# Warmup Iteration   4: 2.288 ns/op
# Warmup Iteration   5: 2.289 ns/op
Iteration   1: 2.288 ns/op
Iteration   2: 2.288 ns/op
Iteration   3: 2.287 ns/op
Iteration   4: 2.288 ns/op
Iteration   5: 2.286 ns/op

# Run progress: 15.15% complete, ETA 00:46:46
# Fork: 3 of 3
# Warmup Iteration   1: 2.333 ns/op
# Warmup Iteration   2: 2.468 ns/op
# Warmup Iteration   3: 2.233 ns/op
# Warmup Iteration   4: 2.237 ns/op
# Warmup Iteration   5: 2.233 ns/op
Iteration   1: 2.234 ns/op
Iteration   2: 2.239 ns/op
Iteration   3: 2.238 ns/op
Iteration   4: 2.238 ns/op
Iteration   5: 2.236 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_1":
  2.255 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (2.234, 2.255, 2.288), stdev = 0.024
  CI (99.9%): [2.230, 2.280] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_12
# Parameters: (value = 42)

# Run progress: 18.18% complete, ETA 00:45:06
# Fork: 1 of 3
# Warmup Iteration   1: 2.339 ns/op
# Warmup Iteration   2: 2.227 ns/op
# Warmup Iteration   3: 2.020 ns/op
# Warmup Iteration   4: 2.025 ns/op
# Warmup Iteration   5: 2.027 ns/op
Iteration   1: 2.028 ns/op
Iteration   2: 2.030 ns/op
Iteration   3: 2.033 ns/op
Iteration   4: 2.031 ns/op
Iteration   5: 2.032 ns/op

# Run progress: 21.21% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: 2.191 ns/op
# Warmup Iteration   2: 2.323 ns/op
# Warmup Iteration   3: 2.085 ns/op
# Warmup Iteration   4: 2.086 ns/op
# Warmup Iteration   5: 2.082 ns/op
Iteration   1: 2.082 ns/op
Iteration   2: 2.084 ns/op
Iteration   3: 2.080 ns/op
Iteration   4: 2.084 ns/op
Iteration   5: 2.081 ns/op

# Run progress: 24.24% complete, ETA 00:41:45
# Fork: 3 of 3
# Warmup Iteration   1: 2.381 ns/op
# Warmup Iteration   2: 2.515 ns/op
# Warmup Iteration   3: 2.253 ns/op
# Warmup Iteration   4: 2.251 ns/op
# Warmup Iteration   5: 2.245 ns/op
Iteration   1: 2.241 ns/op
Iteration   2: 2.242 ns/op
Iteration   3: 2.240 ns/op
Iteration   4: 2.233 ns/op
Iteration   5: 2.236 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_12":
  2.117 ±(99.9%) 0.098 ns/op [Average]
  (min, avg, max) = (2.028, 2.117, 2.242), stdev = 0.091
  CI (99.9%): [2.019, 2.215] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_16
# Parameters: (value = 42)

# Run progress: 27.27% complete, ETA 00:40:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.339 ns/op
# Warmup Iteration   2: 2.468 ns/op
# Warmup Iteration   3: 2.221 ns/op
# Warmup Iteration   4: 2.227 ns/op
# Warmup Iteration   5: 2.229 ns/op
Iteration   1: 2.229 ns/op
Iteration   2: 2.220 ns/op
Iteration   3: 2.225 ns/op
Iteration   4: 2.221 ns/op
Iteration   5: 2.217 ns/op

# Run progress: 30.30% complete, ETA 00:38:25
# Fork: 2 of 3
# Warmup Iteration   1: 2.337 ns/op
# Warmup Iteration   2: 2.473 ns/op
# Warmup Iteration   3: 2.224 ns/op
# Warmup Iteration   4: 2.228 ns/op
# Warmup Iteration   5: 2.221 ns/op
Iteration   1: 2.219 ns/op
Iteration   2: 2.221 ns/op
Iteration   3: 2.229 ns/op
Iteration   4: 2.221 ns/op
Iteration   5: 2.221 ns/op

# Run progress: 33.33% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 2.382 ns/op
# Warmup Iteration   2: 2.517 ns/op
# Warmup Iteration   3: 2.261 ns/op
# Warmup Iteration   4: 2.263 ns/op
# Warmup Iteration   5: 2.263 ns/op
Iteration   1: 2.259 ns/op
Iteration   2: 2.264 ns/op
Iteration   3: 2.264 ns/op
Iteration   4: 2.263 ns/op
Iteration   5: 2.266 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_16":
  2.236 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (2.217, 2.236, 2.266), stdev = 0.020
  CI (99.9%): [2.214, 2.258] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_2
# Parameters: (value = 42)

# Run progress: 36.36% complete, ETA 00:35:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.146 ns/op
# Warmup Iteration   2: 2.288 ns/op
# Warmup Iteration   3: 2.078 ns/op
# Warmup Iteration   4: 2.084 ns/op
# Warmup Iteration   5: 2.088 ns/op
Iteration   1: 2.089 ns/op
Iteration   2: 2.092 ns/op
Iteration   3: 2.091 ns/op
Iteration   4: 2.091 ns/op
Iteration   5: 2.089 ns/op

# Run progress: 39.39% complete, ETA 00:33:24
# Fork: 2 of 3
# Warmup Iteration   1: 2.188 ns/op
# Warmup Iteration   2: 2.313 ns/op
# Warmup Iteration   3: 2.091 ns/op
# Warmup Iteration   4: 2.094 ns/op
# Warmup Iteration   5: 2.094 ns/op
Iteration   1: 2.094 ns/op
Iteration   2: 2.094 ns/op
Iteration   3: 2.094 ns/op
Iteration   4: 2.094 ns/op
Iteration   5: 2.093 ns/op

# Run progress: 42.42% complete, ETA 00:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 2.392 ns/op
# Warmup Iteration   2: 2.508 ns/op
# Warmup Iteration   3: 2.257 ns/op
# Warmup Iteration   4: 2.264 ns/op
# Warmup Iteration   5: 2.255 ns/op
Iteration   1: 2.252 ns/op
Iteration   2: 2.253 ns/op
Iteration   3: 2.255 ns/op
Iteration   4: 2.250 ns/op
Iteration   5: 2.251 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_2":
  2.145 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (2.089, 2.145, 2.255), stdev = 0.078
  CI (99.9%): [2.062, 2.229] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_24
# Parameters: (value = 42)

# Run progress: 45.45% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.347 ns/op
# Warmup Iteration   2: 2.241 ns/op
# Warmup Iteration   3: 2.024 ns/op
# Warmup Iteration   4: 2.026 ns/op
# Warmup Iteration   5: 2.030 ns/op
Iteration   1: 2.027 ns/op
Iteration   2: 2.029 ns/op
Iteration   3: 2.029 ns/op
Iteration   4: 2.039 ns/op
Iteration   5: 2.039 ns/op

# Run progress: 48.48% complete, ETA 00:28:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.143 ns/op
# Warmup Iteration   2: 2.019 ns/op
# Warmup Iteration   3: 2.316 ns/op
# Warmup Iteration   4: 2.040 ns/op
# Warmup Iteration   5: 2.083 ns/op
Iteration   1: 2.085 ns/op
Iteration   2: 2.083 ns/op
Iteration   3: 2.080 ns/op
Iteration   4: 2.082 ns/op
Iteration   5: 2.084 ns/op

# Run progress: 51.52% complete, ETA 00:26:43
# Fork: 3 of 3
# Warmup Iteration   1: 2.181 ns/op
# Warmup Iteration   2: 2.525 ns/op
# Warmup Iteration   3: 2.250 ns/op
# Warmup Iteration   4: 2.281 ns/op
# Warmup Iteration   5: 2.280 ns/op
Iteration   1: 2.278 ns/op
Iteration   2: 2.272 ns/op
Iteration   3: 2.273 ns/op
Iteration   4: 2.268 ns/op
Iteration   5: 2.268 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_24":
  2.129 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (2.027, 2.129, 2.278), stdev = 0.107
  CI (99.9%): [2.015, 2.243] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_3
# Parameters: (value = 42)

# Run progress: 54.55% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 2.149 ns/op
# Warmup Iteration   2: 2.297 ns/op
# Warmup Iteration   3: 2.071 ns/op
# Warmup Iteration   4: 2.078 ns/op
# Warmup Iteration   5: 2.082 ns/op
Iteration   1: 2.083 ns/op
Iteration   2: 2.082 ns/op
Iteration   3: 2.082 ns/op
Iteration   4: 2.082 ns/op
Iteration   5: 2.085 ns/op

# Run progress: 57.58% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.416 ns/op
# Warmup Iteration   2: 2.541 ns/op
# Warmup Iteration   3: 2.276 ns/op
# Warmup Iteration   4: 2.274 ns/op
# Warmup Iteration   5: 2.268 ns/op
Iteration   1: 2.268 ns/op
Iteration   2: 2.268 ns/op
Iteration   3: 2.268 ns/op
Iteration   4: 2.260 ns/op
Iteration   5: 2.262 ns/op

# Run progress: 60.61% complete, ETA 00:21:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.153 ns/op
# Warmup Iteration   2: 2.292 ns/op
# Warmup Iteration   3: 2.073 ns/op
# Warmup Iteration   4: 2.082 ns/op
# Warmup Iteration   5: 2.083 ns/op
Iteration   1: 2.083 ns/op
Iteration   2: 2.083 ns/op
Iteration   3: 2.080 ns/op
Iteration   4: 2.296 ns/op
Iteration   5: 2.285 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_3":
  2.171 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (2.080, 2.171, 2.296), stdev = 0.099
  CI (99.9%): [2.066, 2.277] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_4
# Parameters: (value = 42)

# Run progress: 63.64% complete, ETA 00:20:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.397 ns/op
# Warmup Iteration   2: 2.531 ns/op
# Warmup Iteration   3: 2.283 ns/op
# Warmup Iteration   4: 2.287 ns/op
# Warmup Iteration   5: 2.286 ns/op
Iteration   1: 2.288 ns/op
Iteration   2: 2.287 ns/op
Iteration   3: 2.288 ns/op
Iteration   4: 2.287 ns/op
Iteration   5: 2.285 ns/op

# Run progress: 66.67% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 4.572 ns/op
# Warmup Iteration   2: 4.570 ns/op
# Warmup Iteration   3: 4.312 ns/op
# Warmup Iteration   4: 4.311 ns/op
# Warmup Iteration   5: 4.311 ns/op
Iteration   1: 4.312 ns/op
Iteration   2: 4.312 ns/op
Iteration   3: 4.312 ns/op
Iteration   4: 4.311 ns/op
Iteration   5: 4.312 ns/op

# Run progress: 69.70% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.187 ns/op
# Warmup Iteration   2: 2.317 ns/op
# Warmup Iteration   3: 2.094 ns/op
# Warmup Iteration   4: 2.093 ns/op
# Warmup Iteration   5: 2.093 ns/op
Iteration   1: 2.093 ns/op
Iteration   2: 2.092 ns/op
Iteration   3: 2.094 ns/op
Iteration   4: 2.091 ns/op
Iteration   5: 2.096 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_4":
  2.897 ±(99.9%) 1.110 ns/op [Average]
  (min, avg, max) = (2.091, 2.897, 4.312), stdev = 1.039
  CI (99.9%): [1.787, 4.008] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_5
# Parameters: (value = 42)

# Run progress: 72.73% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.122 ns/op
# Warmup Iteration   2: 2.257 ns/op
# Warmup Iteration   3: 2.027 ns/op
# Warmup Iteration   4: 2.034 ns/op
# Warmup Iteration   5: 2.037 ns/op
Iteration   1: 2.045 ns/op
Iteration   2: 2.045 ns/op
Iteration   3: 2.045 ns/op
Iteration   4: 2.039 ns/op
Iteration   5: 2.036 ns/op

# Run progress: 75.76% complete, ETA 00:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.141 ns/op
# Warmup Iteration   2: 2.259 ns/op
# Warmup Iteration   3: 2.036 ns/op
# Warmup Iteration   4: 2.034 ns/op
# Warmup Iteration   5: 2.036 ns/op
Iteration   1: 2.039 ns/op
Iteration   2: 2.039 ns/op
Iteration   3: 2.038 ns/op
Iteration   4: 2.033 ns/op
Iteration   5: 2.035 ns/op

# Run progress: 78.79% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.455 ns/op
# Warmup Iteration   2: 2.577 ns/op
# Warmup Iteration   3: 2.295 ns/op
# Warmup Iteration   4: 2.294 ns/op
# Warmup Iteration   5: 2.283 ns/op
Iteration   1: 2.280 ns/op
Iteration   2: 2.278 ns/op
Iteration   3: 2.276 ns/op
Iteration   4: 2.278 ns/op
Iteration   5: 2.277 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_5":
  2.119 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (2.033, 2.119, 2.280), stdev = 0.116
  CI (99.9%): [1.994, 2.243] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_6
# Parameters: (value = 42)

# Run progress: 81.82% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 2.109 ns/op
# Warmup Iteration   2: 2.248 ns/op
# Warmup Iteration   3: 2.036 ns/op
# Warmup Iteration   4: 2.038 ns/op
# Warmup Iteration   5: 2.041 ns/op
Iteration   1: 2.050 ns/op
Iteration   2: 2.051 ns/op
Iteration   3: 2.048 ns/op
Iteration   4: 2.057 ns/op
Iteration   5: 2.055 ns/op

# Run progress: 84.85% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.405 ns/op
# Warmup Iteration   2: 2.519 ns/op
# Warmup Iteration   3: 2.262 ns/op
# Warmup Iteration   4: 2.255 ns/op
# Warmup Iteration   5: 2.254 ns/op
Iteration   1: 2.254 ns/op
Iteration   2: 2.251 ns/op
Iteration   3: 2.255 ns/op
Iteration   4: 2.249 ns/op
Iteration   5: 2.251 ns/op

# Run progress: 87.88% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.163 ns/op
# Warmup Iteration   2: 2.504 ns/op
# Warmup Iteration   3: 2.255 ns/op
# Warmup Iteration   4: 2.253 ns/op
# Warmup Iteration   5: 2.252 ns/op
Iteration   1: 2.254 ns/op
Iteration   2: 2.252 ns/op
Iteration   3: 2.251 ns/op
Iteration   4: 2.247 ns/op
Iteration   5: 2.245 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_6":
  2.185 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (2.048, 2.185, 2.255), stdev = 0.097
  CI (99.9%): [2.081, 2.288] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_8
# Parameters: (value = 42)

# Run progress: 90.91% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.097 ns/op
# Warmup Iteration   2: 2.246 ns/op
# Warmup Iteration   3: 2.023 ns/op
# Warmup Iteration   4: 2.026 ns/op
# Warmup Iteration   5: 2.026 ns/op
Iteration   1: 2.026 ns/op
Iteration   2: 2.027 ns/op
Iteration   3: 2.029 ns/op
Iteration   4: 2.028 ns/op
Iteration   5: 2.031 ns/op

# Run progress: 93.94% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.130 ns/op
# Warmup Iteration   2: 2.255 ns/op
# Warmup Iteration   3: 2.029 ns/op
# Warmup Iteration   4: 2.030 ns/op
# Warmup Iteration   5: 2.028 ns/op
Iteration   1: 2.029 ns/op
Iteration   2: 2.031 ns/op
Iteration   3: 2.029 ns/op
Iteration   4: 2.029 ns/op
Iteration   5: 2.032 ns/op

# Run progress: 96.97% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.135 ns/op
# Warmup Iteration   2: 2.262 ns/op
# Warmup Iteration   3: 2.038 ns/op
# Warmup Iteration   4: 2.045 ns/op
# Warmup Iteration   5: 2.042 ns/op
Iteration   1: 2.042 ns/op
Iteration   2: 2.047 ns/op
Iteration   3: 2.049 ns/op
Iteration   4: 2.046 ns/op
Iteration   5: 2.043 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_8":
  2.035 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (2.026, 2.035, 2.049), stdev = 0.008
  CI (99.9%): [2.026, 2.044] (assumes normal distribution)


# Run complete. Total time: 00:55:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (value)  Mode  Cnt  Score   Error  Units
ChainingMethodRefUnboundedBenchmark.baseline       42  avgt   15  2.213 ± 0.101  ns/op
ChainingMethodRefUnboundedBenchmark.depth_1        42  avgt   15  2.255 ± 0.025  ns/op
ChainingMethodRefUnboundedBenchmark.depth_12       42  avgt   15  2.117 ± 0.098  ns/op
ChainingMethodRefUnboundedBenchmark.depth_16       42  avgt   15  2.236 ± 0.022  ns/op
ChainingMethodRefUnboundedBenchmark.depth_2        42  avgt   15  2.145 ± 0.084  ns/op
ChainingMethodRefUnboundedBenchmark.depth_24       42  avgt   15  2.129 ± 0.114  ns/op
ChainingMethodRefUnboundedBenchmark.depth_3        42  avgt   15  2.171 ± 0.105  ns/op
ChainingMethodRefUnboundedBenchmark.depth_4        42  avgt   15  2.897 ± 1.110  ns/op
ChainingMethodRefUnboundedBenchmark.depth_5        42  avgt   15  2.119 ± 0.124  ns/op
ChainingMethodRefUnboundedBenchmark.depth_6        42  avgt   15  2.185 ± 0.104  ns/op
ChainingMethodRefUnboundedBenchmark.depth_8        42  avgt   15  2.035 ± 0.009  ns/op

Benchmark result is saved to results/hotspotvm_c1_c2_jit/ChainingMethodRefUnboundedBenchmark.json
Finished hotspotvm_c1_c2_jit JMH Tests Suite!
##################################################################################################
############################       HotSpot Graal JIT Test Suite       ############################
##################################################################################################
Launching hotspotvm_graal_jit JMH Tests Suite ...
Create results/hotspotvm_graal_jit folder
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ArrayCopyBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ArrayCopyBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 16384, stride = 256)

# Run progress: 0.00% complete, ETA 02:20:00
# Fork: 1 of 3
# Warmup Iteration   1: 1578.510 ns/op
# Warmup Iteration   2: 1431.657 ns/op
# Warmup Iteration   3: 1419.550 ns/op
# Warmup Iteration   4: 1412.776 ns/op
# Warmup Iteration   5: 1409.723 ns/op
Iteration   1: 1420.614 ns/op
Iteration   2: 1415.156 ns/op
Iteration   3: 1422.521 ns/op
Iteration   4: 1420.490 ns/op
Iteration   5: 1417.704 ns/op

# Run progress: 1.19% complete, ETA 02:18:58
# Fork: 2 of 3
# Warmup Iteration   1: 1576.732 ns/op
# Warmup Iteration   2: 1444.886 ns/op
# Warmup Iteration   3: 1441.056 ns/op
# Warmup Iteration   4: 1445.645 ns/op
# Warmup Iteration   5: 1438.942 ns/op
Iteration   1: 1443.163 ns/op
Iteration   2: 1449.216 ns/op
Iteration   3: 1448.811 ns/op
Iteration   4: 1436.341 ns/op
Iteration   5: 1443.507 ns/op

# Run progress: 2.38% complete, ETA 02:17:11
# Fork: 3 of 3
# Warmup Iteration   1: 1561.449 ns/op
# Warmup Iteration   2: 1439.310 ns/op
# Warmup Iteration   3: 1425.068 ns/op
# Warmup Iteration   4: 1433.762 ns/op
# Warmup Iteration   5: 1430.780 ns/op
Iteration   1: 1430.699 ns/op
Iteration   2: 1422.696 ns/op
Iteration   3: 1424.334 ns/op
Iteration   4: 1422.345 ns/op
Iteration   5: 1430.092 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  1429.846 ±(99.9%) 12.353 ns/op [Average]
  (min, avg, max) = (1415.156, 1429.846, 1449.216), stdev = 11.555
  CI (99.9%): [1417.493, 1442.199] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 16384, stride = 512)

# Run progress: 3.57% complete, ETA 02:15:29
# Fork: 1 of 3
# Warmup Iteration   1: 1576.360 ns/op
# Warmup Iteration   2: 1446.974 ns/op
# Warmup Iteration   3: 1452.777 ns/op
# Warmup Iteration   4: 1450.148 ns/op
# Warmup Iteration   5: 1440.391 ns/op
Iteration   1: 1438.738 ns/op
Iteration   2: 1436.040 ns/op
Iteration   3: 1444.340 ns/op
Iteration   4: 1442.153 ns/op
Iteration   5: 1442.375 ns/op

# Run progress: 4.76% complete, ETA 02:13:47
# Fork: 2 of 3
# Warmup Iteration   1: 1569.427 ns/op
# Warmup Iteration   2: 1433.997 ns/op
# Warmup Iteration   3: 1424.252 ns/op
# Warmup Iteration   4: 1427.433 ns/op
# Warmup Iteration   5: 1426.413 ns/op
Iteration   1: 1429.410 ns/op
Iteration   2: 1427.477 ns/op
Iteration   3: 1430.014 ns/op
Iteration   4: 1431.607 ns/op
Iteration   5: 1422.310 ns/op

# Run progress: 5.95% complete, ETA 02:12:06
# Fork: 3 of 3
# Warmup Iteration   1: 1567.473 ns/op
# Warmup Iteration   2: 1431.286 ns/op
# Warmup Iteration   3: 1432.397 ns/op
# Warmup Iteration   4: 1437.405 ns/op
# Warmup Iteration   5: 1431.522 ns/op
Iteration   1: 1434.573 ns/op
Iteration   2: 1431.225 ns/op
Iteration   3: 1442.514 ns/op
Iteration   4: 1435.688 ns/op
Iteration   5: 1435.308 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  1434.918 ±(99.9%) 6.788 ns/op [Average]
  (min, avg, max) = (1422.310, 1434.918, 1444.340), stdev = 6.350
  CI (99.9%): [1428.130, 1441.706] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 32768, stride = 256)

# Run progress: 7.14% complete, ETA 02:10:25
# Fork: 1 of 3
# Warmup Iteration   1: 3342.289 ns/op
# Warmup Iteration   2: 3069.226 ns/op
# Warmup Iteration   3: 3040.810 ns/op
# Warmup Iteration   4: 3052.381 ns/op
# Warmup Iteration   5: 3060.616 ns/op
Iteration   1: 3046.991 ns/op
Iteration   2: 3071.279 ns/op
Iteration   3: 3055.986 ns/op
Iteration   4: 3057.277 ns/op
Iteration   5: 3077.999 ns/op

# Run progress: 8.33% complete, ETA 02:08:45
# Fork: 2 of 3
# Warmup Iteration   1: 3305.287 ns/op
# Warmup Iteration   2: 3124.821 ns/op
# Warmup Iteration   3: 3104.479 ns/op
# Warmup Iteration   4: 3045.946 ns/op
# Warmup Iteration   5: 3110.415 ns/op
Iteration   1: 3070.471 ns/op
Iteration   2: 3054.974 ns/op
Iteration   3: 3036.611 ns/op
Iteration   4: 3061.039 ns/op
Iteration   5: 3055.327 ns/op

# Run progress: 9.52% complete, ETA 02:07:04
# Fork: 3 of 3
# Warmup Iteration   1: 3337.764 ns/op
# Warmup Iteration   2: 3045.450 ns/op
# Warmup Iteration   3: 3054.418 ns/op
# Warmup Iteration   4: 3038.851 ns/op
# Warmup Iteration   5: 3024.880 ns/op
Iteration   1: 3018.771 ns/op
Iteration   2: 3078.674 ns/op
Iteration   3: 3043.993 ns/op
Iteration   4: 3051.073 ns/op
Iteration   5: 3079.962 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  3057.362 ±(99.9%) 18.132 ns/op [Average]
  (min, avg, max) = (3018.771, 3057.362, 3079.962), stdev = 16.961
  CI (99.9%): [3039.230, 3075.494] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone
# Parameters: (size = 32768, stride = 512)

# Run progress: 10.71% complete, ETA 02:05:24
# Fork: 1 of 3
# Warmup Iteration   1: 3194.139 ns/op
# Warmup Iteration   2: 3072.521 ns/op
# Warmup Iteration   3: 3039.428 ns/op
# Warmup Iteration   4: 3062.089 ns/op
# Warmup Iteration   5: 3073.212 ns/op
Iteration   1: 3045.061 ns/op
Iteration   2: 3049.448 ns/op
Iteration   3: 3063.361 ns/op
Iteration   4: 3071.476 ns/op
Iteration   5: 3068.927 ns/op

# Run progress: 11.90% complete, ETA 02:03:46
# Fork: 2 of 3
# Warmup Iteration   1: 3363.456 ns/op
# Warmup Iteration   2: 3064.268 ns/op
# Warmup Iteration   3: 3106.238 ns/op
# Warmup Iteration   4: 3039.994 ns/op
# Warmup Iteration   5: 3055.817 ns/op
Iteration   1: 3132.144 ns/op
Iteration   2: 3084.054 ns/op
Iteration   3: 3087.834 ns/op
Iteration   4: 3072.423 ns/op
Iteration   5: 3121.380 ns/op

# Run progress: 13.10% complete, ETA 02:02:06
# Fork: 3 of 3
# Warmup Iteration   1: 3349.734 ns/op
# Warmup Iteration   2: 3090.231 ns/op
# Warmup Iteration   3: 3042.559 ns/op
# Warmup Iteration   4: 3064.708 ns/op
# Warmup Iteration   5: 3071.352 ns/op
Iteration   1: 3092.436 ns/op
Iteration   2: 3061.973 ns/op
Iteration   3: 3046.398 ns/op
Iteration   4: 3073.915 ns/op
Iteration   5: 3047.240 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.array_clone":
  3074.538 ±(99.9%) 27.796 ns/op [Average]
  (min, avg, max) = (3045.061, 3074.538, 3132.144), stdev = 26.000
  CI (99.9%): [3046.742, 3102.334] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 16384, stride = 256)

# Run progress: 14.29% complete, ETA 02:00:25
# Fork: 1 of 3
# Warmup Iteration   1: 903.767 ns/op
# Warmup Iteration   2: 995.436 ns/op
# Warmup Iteration   3: 997.774 ns/op
# Warmup Iteration   4: 989.354 ns/op
# Warmup Iteration   5: 982.067 ns/op
Iteration   1: 975.557 ns/op
Iteration   2: 970.744 ns/op
Iteration   3: 967.774 ns/op
Iteration   4: 966.660 ns/op
Iteration   5: 966.646 ns/op

# Run progress: 15.48% complete, ETA 01:58:44
# Fork: 2 of 3
# Warmup Iteration   1: 963.175 ns/op
# Warmup Iteration   2: 958.907 ns/op
# Warmup Iteration   3: 947.376 ns/op
# Warmup Iteration   4: 947.229 ns/op
# Warmup Iteration   5: 944.849 ns/op
Iteration   1: 949.295 ns/op
Iteration   2: 943.242 ns/op
Iteration   3: 942.290 ns/op
Iteration   4: 944.371 ns/op
Iteration   5: 941.765 ns/op

# Run progress: 16.67% complete, ETA 01:57:04
# Fork: 3 of 3
# Warmup Iteration   1: 824.217 ns/op
# Warmup Iteration   2: 859.187 ns/op
# Warmup Iteration   3: 852.827 ns/op
# Warmup Iteration   4: 857.047 ns/op
# Warmup Iteration   5: 858.603 ns/op
Iteration   1: 859.223 ns/op
Iteration   2: 859.471 ns/op
Iteration   3: 859.338 ns/op
Iteration   4: 858.049 ns/op
Iteration   5: 859.669 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  924.273 ±(99.9%) 52.296 ns/op [Average]
  (min, avg, max) = (858.049, 924.273, 975.557), stdev = 48.918
  CI (99.9%): [871.977, 976.569] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 16384, stride = 512)

# Run progress: 17.86% complete, ETA 01:55:23
# Fork: 1 of 3
# Warmup Iteration   1: 879.391 ns/op
# Warmup Iteration   2: 884.173 ns/op
# Warmup Iteration   3: 879.320 ns/op
# Warmup Iteration   4: 877.595 ns/op
# Warmup Iteration   5: 877.257 ns/op
Iteration   1: 876.998 ns/op
Iteration   2: 876.781 ns/op
Iteration   3: 875.960 ns/op
Iteration   4: 877.123 ns/op
Iteration   5: 875.866 ns/op

# Run progress: 19.05% complete, ETA 01:53:42
# Fork: 2 of 3
# Warmup Iteration   1: 935.301 ns/op
# Warmup Iteration   2: 878.616 ns/op
# Warmup Iteration   3: 879.078 ns/op
# Warmup Iteration   4: 880.118 ns/op
# Warmup Iteration   5: 878.702 ns/op
Iteration   1: 879.047 ns/op
Iteration   2: 879.157 ns/op
Iteration   3: 879.453 ns/op
Iteration   4: 879.784 ns/op
Iteration   5: 879.952 ns/op

# Run progress: 20.24% complete, ETA 01:52:02
# Fork: 3 of 3
# Warmup Iteration   1: 849.727 ns/op
# Warmup Iteration   2: 979.950 ns/op
# Warmup Iteration   3: 964.052 ns/op
# Warmup Iteration   4: 961.093 ns/op
# Warmup Iteration   5: 956.905 ns/op
Iteration   1: 956.009 ns/op
Iteration   2: 954.956 ns/op
Iteration   3: 953.989 ns/op
Iteration   4: 952.525 ns/op
Iteration   5: 951.656 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  903.284 ±(99.9%) 39.586 ns/op [Average]
  (min, avg, max) = (875.866, 903.284, 956.009), stdev = 37.029
  CI (99.9%): [863.698, 942.870] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 32768, stride = 256)

# Run progress: 21.43% complete, ETA 01:50:21
# Fork: 1 of 3
# Warmup Iteration   1: 1816.210 ns/op
# Warmup Iteration   2: 1814.649 ns/op
# Warmup Iteration   3: 1815.363 ns/op
# Warmup Iteration   4: 1818.060 ns/op
# Warmup Iteration   5: 1818.482 ns/op
Iteration   1: 2031.646 ns/op
Iteration   2: 2012.481 ns/op
Iteration   3: 2004.430 ns/op
Iteration   4: 1997.002 ns/op
Iteration   5: 1995.951 ns/op

# Run progress: 22.62% complete, ETA 01:48:41
# Fork: 2 of 3
# Warmup Iteration   1: 1988.646 ns/op
# Warmup Iteration   2: 1792.438 ns/op
# Warmup Iteration   3: 1780.847 ns/op
# Warmup Iteration   4: 1789.286 ns/op
# Warmup Iteration   5: 1791.963 ns/op
Iteration   1: 1793.752 ns/op
Iteration   2: 1793.670 ns/op
Iteration   3: 1794.840 ns/op
Iteration   4: 1794.590 ns/op
Iteration   5: 1796.625 ns/op

# Run progress: 23.81% complete, ETA 01:47:00
# Fork: 3 of 3
# Warmup Iteration   1: 1820.608 ns/op
# Warmup Iteration   2: 1838.642 ns/op
# Warmup Iteration   3: 1825.162 ns/op
# Warmup Iteration   4: 1823.954 ns/op
# Warmup Iteration   5: 1820.968 ns/op
Iteration   1: 1820.067 ns/op
Iteration   2: 1820.001 ns/op
Iteration   3: 1820.634 ns/op
Iteration   4: 1818.400 ns/op
Iteration   5: 1817.263 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  1874.090 ±(99.9%) 105.939 ns/op [Average]
  (min, avg, max) = (1793.670, 1874.090, 2031.646), stdev = 99.095
  CI (99.9%): [1768.152, 1980.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare
# Parameters: (size = 32768, stride = 512)

# Run progress: 25.00% complete, ETA 01:45:20
# Fork: 1 of 3
# Warmup Iteration   1: 1807.915 ns/op
# Warmup Iteration   2: 1797.738 ns/op
# Warmup Iteration   3: 1777.042 ns/op
# Warmup Iteration   4: 1777.088 ns/op
# Warmup Iteration   5: 1778.335 ns/op
Iteration   1: 1775.557 ns/op
Iteration   2: 1771.930 ns/op
Iteration   3: 1770.934 ns/op
Iteration   4: 1774.884 ns/op
Iteration   5: 1774.588 ns/op

# Run progress: 26.19% complete, ETA 01:43:39
# Fork: 2 of 3
# Warmup Iteration   1: 1748.162 ns/op
# Warmup Iteration   2: 1942.897 ns/op
# Warmup Iteration   3: 1912.817 ns/op
# Warmup Iteration   4: 1905.727 ns/op
# Warmup Iteration   5: 1895.399 ns/op
Iteration   1: 1892.864 ns/op
Iteration   2: 1887.998 ns/op
Iteration   3: 1888.428 ns/op
Iteration   4: 1885.051 ns/op
Iteration   5: 1885.234 ns/op

# Run progress: 27.38% complete, ETA 01:41:59
# Fork: 3 of 3
# Warmup Iteration   1: 1994.658 ns/op
# Warmup Iteration   2: 2025.610 ns/op
# Warmup Iteration   3: 1999.049 ns/op
# Warmup Iteration   4: 1996.808 ns/op
# Warmup Iteration   5: 1998.369 ns/op
Iteration   1: 1997.794 ns/op
Iteration   2: 1996.007 ns/op
Iteration   3: 1996.672 ns/op
Iteration   4: 1998.367 ns/op
Iteration   5: 1784.226 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_compare":
  1872.036 ±(99.9%) 99.048 ns/op [Average]
  (min, avg, max) = (1770.934, 1872.036, 1998.367), stdev = 92.649
  CI (99.9%): [1772.988, 1971.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 16384, stride = 256)

# Run progress: 28.57% complete, ETA 01:40:18
# Fork: 1 of 3
# Warmup Iteration   1: 4320.695 ns/op
# Warmup Iteration   2: 4084.380 ns/op
# Warmup Iteration   3: 4073.110 ns/op
# Warmup Iteration   4: 4064.004 ns/op
# Warmup Iteration   5: 4069.029 ns/op
Iteration   1: 4069.459 ns/op
Iteration   2: 4073.143 ns/op
Iteration   3: 4070.654 ns/op
Iteration   4: 4065.281 ns/op
Iteration   5: 4074.164 ns/op

# Run progress: 29.76% complete, ETA 01:38:38
# Fork: 2 of 3
# Warmup Iteration   1: 4374.483 ns/op
# Warmup Iteration   2: 4016.113 ns/op
# Warmup Iteration   3: 3988.265 ns/op
# Warmup Iteration   4: 3973.056 ns/op
# Warmup Iteration   5: 3997.936 ns/op
Iteration   1: 3979.629 ns/op
Iteration   2: 3979.526 ns/op
Iteration   3: 3981.049 ns/op
Iteration   4: 3974.337 ns/op
Iteration   5: 3979.790 ns/op

# Run progress: 30.95% complete, ETA 01:36:57
# Fork: 3 of 3
# Warmup Iteration   1: 4351.423 ns/op
# Warmup Iteration   2: 4116.315 ns/op
# Warmup Iteration   3: 4101.944 ns/op
# Warmup Iteration   4: 4121.563 ns/op
# Warmup Iteration   5: 4122.422 ns/op
Iteration   1: 4125.075 ns/op
Iteration   2: 4120.571 ns/op
Iteration   3: 4124.437 ns/op
Iteration   4: 4122.842 ns/op
Iteration   5: 4122.690 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  4057.510 ±(99.9%) 66.017 ns/op [Average]
  (min, avg, max) = (3974.337, 4057.510, 4125.075), stdev = 61.752
  CI (99.9%): [3991.493, 4123.527] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 16384, stride = 512)

# Run progress: 32.14% complete, ETA 01:35:17
# Fork: 1 of 3
# Warmup Iteration   1: 4181.499 ns/op
# Warmup Iteration   2: 3872.021 ns/op
# Warmup Iteration   3: 3859.571 ns/op
# Warmup Iteration   4: 3867.243 ns/op
# Warmup Iteration   5: 3863.287 ns/op
Iteration   1: 3862.663 ns/op
Iteration   2: 3862.306 ns/op
Iteration   3: 3862.078 ns/op
Iteration   4: 3863.452 ns/op
Iteration   5: 3864.967 ns/op

# Run progress: 33.33% complete, ETA 01:33:37
# Fork: 2 of 3
# Warmup Iteration   1: 4148.586 ns/op
# Warmup Iteration   2: 3870.755 ns/op
# Warmup Iteration   3: 3864.287 ns/op
# Warmup Iteration   4: 3854.406 ns/op
# Warmup Iteration   5: 3855.896 ns/op
Iteration   1: 3856.699 ns/op
Iteration   2: 3858.810 ns/op
Iteration   3: 3855.691 ns/op
Iteration   4: 3857.802 ns/op
Iteration   5: 3861.960 ns/op

# Run progress: 34.52% complete, ETA 01:31:56
# Fork: 3 of 3
# Warmup Iteration   1: 4158.749 ns/op
# Warmup Iteration   2: 3870.666 ns/op
# Warmup Iteration   3: 3861.852 ns/op
# Warmup Iteration   4: 3855.135 ns/op
# Warmup Iteration   5: 3860.559 ns/op
Iteration   1: 3848.914 ns/op
Iteration   2: 3860.756 ns/op
Iteration   3: 3860.463 ns/op
Iteration   4: 3865.683 ns/op
Iteration   5: 3862.345 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  3860.306 ±(99.9%) 4.544 ns/op [Average]
  (min, avg, max) = (3848.914, 3860.306, 3865.683), stdev = 4.250
  CI (99.9%): [3855.762, 3864.850] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 32768, stride = 256)

# Run progress: 35.71% complete, ETA 01:30:16
# Fork: 1 of 3
# Warmup Iteration   1: 8836.968 ns/op
# Warmup Iteration   2: 8166.871 ns/op
# Warmup Iteration   3: 8110.648 ns/op
# Warmup Iteration   4: 8087.232 ns/op
# Warmup Iteration   5: 8119.365 ns/op
Iteration   1: 8125.274 ns/op
Iteration   2: 8075.405 ns/op
Iteration   3: 8083.511 ns/op
Iteration   4: 8084.356 ns/op
Iteration   5: 8108.544 ns/op

# Run progress: 36.90% complete, ETA 01:28:36
# Fork: 2 of 3
# Warmup Iteration   1: 8827.837 ns/op
# Warmup Iteration   2: 8187.375 ns/op
# Warmup Iteration   3: 8102.167 ns/op
# Warmup Iteration   4: 8076.960 ns/op
# Warmup Iteration   5: 8124.002 ns/op
Iteration   1: 8081.079 ns/op
Iteration   2: 8090.038 ns/op
Iteration   3: 8090.607 ns/op
Iteration   4: 8089.138 ns/op
Iteration   5: 8085.332 ns/op

# Run progress: 38.10% complete, ETA 01:26:55
# Fork: 3 of 3
# Warmup Iteration   1: 8927.056 ns/op
# Warmup Iteration   2: 8174.483 ns/op
# Warmup Iteration   3: 8127.968 ns/op
# Warmup Iteration   4: 8099.302 ns/op
# Warmup Iteration   5: 8085.262 ns/op
Iteration   1: 8132.242 ns/op
Iteration   2: 8090.859 ns/op
Iteration   3: 8080.268 ns/op
Iteration   4: 8098.392 ns/op
Iteration   5: 8115.724 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  8095.385 ±(99.9%) 18.417 ns/op [Average]
  (min, avg, max) = (8075.405, 8095.385, 8132.242), stdev = 17.227
  CI (99.9%): [8076.968, 8113.801] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf
# Parameters: (size = 32768, stride = 512)

# Run progress: 39.29% complete, ETA 01:25:15
# Fork: 1 of 3
# Warmup Iteration   1: 8569.670 ns/op
# Warmup Iteration   2: 7902.414 ns/op
# Warmup Iteration   3: 7861.813 ns/op
# Warmup Iteration   4: 7843.773 ns/op
# Warmup Iteration   5: 7827.430 ns/op
Iteration   1: 7822.462 ns/op
Iteration   2: 7847.652 ns/op
Iteration   3: 7862.598 ns/op
Iteration   4: 7842.770 ns/op
Iteration   5: 7841.175 ns/op

# Run progress: 40.48% complete, ETA 01:23:35
# Fork: 2 of 3
# Warmup Iteration   1: 8618.425 ns/op
# Warmup Iteration   2: 8040.133 ns/op
# Warmup Iteration   3: 8021.203 ns/op
# Warmup Iteration   4: 8043.315 ns/op
# Warmup Iteration   5: 8065.485 ns/op
Iteration   1: 8022.366 ns/op
Iteration   2: 8036.281 ns/op
Iteration   3: 8055.592 ns/op
Iteration   4: 8061.439 ns/op
Iteration   5: 8050.760 ns/op

# Run progress: 41.67% complete, ETA 01:21:55
# Fork: 3 of 3
# Warmup Iteration   1: 8567.742 ns/op
# Warmup Iteration   2: 7924.880 ns/op
# Warmup Iteration   3: 7854.771 ns/op
# Warmup Iteration   4: 7870.494 ns/op
# Warmup Iteration   5: 7871.329 ns/op
Iteration   1: 7845.262 ns/op
Iteration   2: 7833.967 ns/op
Iteration   3: 7832.829 ns/op
Iteration   4: 7844.076 ns/op
Iteration   5: 7861.787 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_copyOf":
  7910.734 ±(99.9%) 106.202 ns/op [Average]
  (min, avg, max) = (7822.462, 7910.734, 8061.439), stdev = 99.341
  CI (99.9%): [7804.533, 8016.936] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 16384, stride = 256)

# Run progress: 42.86% complete, ETA 01:20:14
# Fork: 1 of 3
# Warmup Iteration   1: 371.395 ns/op
# Warmup Iteration   2: 334.261 ns/op
# Warmup Iteration   3: 334.521 ns/op
# Warmup Iteration   4: 335.566 ns/op
# Warmup Iteration   5: 338.227 ns/op
Iteration   1: 337.645 ns/op
Iteration   2: 337.745 ns/op
Iteration   3: 342.121 ns/op
Iteration   4: 334.916 ns/op
Iteration   5: 334.802 ns/op

# Run progress: 44.05% complete, ETA 01:18:34
# Fork: 2 of 3
# Warmup Iteration   1: 385.321 ns/op
# Warmup Iteration   2: 322.488 ns/op
# Warmup Iteration   3: 327.550 ns/op
# Warmup Iteration   4: 322.230 ns/op
# Warmup Iteration   5: 332.974 ns/op
Iteration   1: 330.411 ns/op
Iteration   2: 330.726 ns/op
Iteration   3: 332.184 ns/op
Iteration   4: 324.711 ns/op
Iteration   5: 328.908 ns/op

# Run progress: 45.24% complete, ETA 01:16:53
# Fork: 3 of 3
# Warmup Iteration   1: 366.864 ns/op
# Warmup Iteration   2: 348.452 ns/op
# Warmup Iteration   3: 345.802 ns/op
# Warmup Iteration   4: 344.048 ns/op
# Warmup Iteration   5: 343.459 ns/op
Iteration   1: 342.760 ns/op
Iteration   2: 343.034 ns/op
Iteration   3: 342.566 ns/op
Iteration   4: 343.117 ns/op
Iteration   5: 342.061 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  336.514 ±(99.9%) 6.508 ns/op [Average]
  (min, avg, max) = (324.711, 336.514, 343.117), stdev = 6.088
  CI (99.9%): [330.005, 343.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 16384, stride = 512)

# Run progress: 46.43% complete, ETA 01:15:13
# Fork: 1 of 3
# Warmup Iteration   1: 365.279 ns/op
# Warmup Iteration   2: 354.572 ns/op
# Warmup Iteration   3: 351.673 ns/op
# Warmup Iteration   4: 351.585 ns/op
# Warmup Iteration   5: 349.236 ns/op
Iteration   1: 350.234 ns/op
Iteration   2: 348.717 ns/op
Iteration   3: 348.277 ns/op
Iteration   4: 348.810 ns/op
Iteration   5: 348.734 ns/op

# Run progress: 47.62% complete, ETA 01:13:33
# Fork: 2 of 3
# Warmup Iteration   1: 316.714 ns/op
# Warmup Iteration   2: 351.095 ns/op
# Warmup Iteration   3: 348.660 ns/op
# Warmup Iteration   4: 346.962 ns/op
# Warmup Iteration   5: 347.306 ns/op
Iteration   1: 346.244 ns/op
Iteration   2: 345.621 ns/op
Iteration   3: 345.674 ns/op
Iteration   4: 345.250 ns/op
Iteration   5: 345.736 ns/op

# Run progress: 48.81% complete, ETA 01:11:52
# Fork: 3 of 3
# Warmup Iteration   1: 322.437 ns/op
# Warmup Iteration   2: 314.612 ns/op
# Warmup Iteration   3: 314.875 ns/op
# Warmup Iteration   4: 315.167 ns/op
# Warmup Iteration   5: 316.287 ns/op
Iteration   1: 316.142 ns/op
Iteration   2: 316.455 ns/op
Iteration   3: 316.306 ns/op
Iteration   4: 316.474 ns/op
Iteration   5: 317.158 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  337.056 ±(99.9%) 16.154 ns/op [Average]
  (min, avg, max) = (316.142, 337.056, 350.234), stdev = 15.110
  CI (99.9%): [320.902, 353.209] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 32768, stride = 256)

# Run progress: 50.00% complete, ETA 01:10:12
# Fork: 1 of 3
# Warmup Iteration   1: 998.284 ns/op
# Warmup Iteration   2: 1071.659 ns/op
# Warmup Iteration   3: 1059.105 ns/op
# Warmup Iteration   4: 1055.810 ns/op
# Warmup Iteration   5: 1052.832 ns/op
Iteration   1: 1049.501 ns/op
Iteration   2: 936.174 ns/op
Iteration   3: 945.340 ns/op
Iteration   4: 951.794 ns/op
Iteration   5: 952.219 ns/op

# Run progress: 51.19% complete, ETA 01:08:32
# Fork: 2 of 3
# Warmup Iteration   1: 1080.750 ns/op
# Warmup Iteration   2: 1150.799 ns/op
# Warmup Iteration   3: 1136.526 ns/op
# Warmup Iteration   4: 1128.811 ns/op
# Warmup Iteration   5: 1124.515 ns/op
Iteration   1: 1124.600 ns/op
Iteration   2: 1123.178 ns/op
Iteration   3: 1120.929 ns/op
Iteration   4: 1121.298 ns/op
Iteration   5: 1122.237 ns/op

# Run progress: 52.38% complete, ETA 01:06:51
# Fork: 3 of 3
# Warmup Iteration   1: 1118.766 ns/op
# Warmup Iteration   2: 937.279 ns/op
# Warmup Iteration   3: 945.627 ns/op
# Warmup Iteration   4: 950.820 ns/op
# Warmup Iteration   5: 950.847 ns/op
Iteration   1: 953.180 ns/op
Iteration   2: 954.710 ns/op
Iteration   3: 956.929 ns/op
Iteration   4: 957.240 ns/op
Iteration   5: 955.293 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  1014.975 ±(99.9%) 88.369 ns/op [Average]
  (min, avg, max) = (936.174, 1014.975, 1124.600), stdev = 82.660
  CI (99.9%): [926.606, 1103.343] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals
# Parameters: (size = 32768, stride = 512)

# Run progress: 53.57% complete, ETA 01:05:11
# Fork: 1 of 3
# Warmup Iteration   1: 1021.221 ns/op
# Warmup Iteration   2: 981.616 ns/op
# Warmup Iteration   3: 977.521 ns/op
# Warmup Iteration   4: 978.794 ns/op
# Warmup Iteration   5: 976.762 ns/op
Iteration   1: 977.029 ns/op
Iteration   2: 976.063 ns/op
Iteration   3: 974.291 ns/op
Iteration   4: 975.490 ns/op
Iteration   5: 975.333 ns/op

# Run progress: 54.76% complete, ETA 01:03:31
# Fork: 2 of 3
# Warmup Iteration   1: 1183.236 ns/op
# Warmup Iteration   2: 1140.005 ns/op
# Warmup Iteration   3: 1007.632 ns/op
# Warmup Iteration   4: 1015.733 ns/op
# Warmup Iteration   5: 1018.441 ns/op
Iteration   1: 1019.938 ns/op
Iteration   2: 1022.225 ns/op
Iteration   3: 1020.589 ns/op
Iteration   4: 1024.380 ns/op
Iteration   5: 995.781 ns/op

# Run progress: 55.95% complete, ETA 01:01:50
# Fork: 3 of 3
# Warmup Iteration   1: 1076.018 ns/op
# Warmup Iteration   2: 1040.809 ns/op
# Warmup Iteration   3: 1039.957 ns/op
# Warmup Iteration   4: 1039.062 ns/op
# Warmup Iteration   5: 1036.364 ns/op
Iteration   1: 1037.827 ns/op
Iteration   2: 1036.650 ns/op
Iteration   3: 1037.907 ns/op
Iteration   4: 1039.294 ns/op
Iteration   5: 1039.801 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_equals":
  1010.173 ±(99.9%) 29.534 ns/op [Average]
  (min, avg, max) = (974.291, 1010.173, 1039.801), stdev = 27.626
  CI (99.9%): [980.639, 1039.708] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 16384, stride = 256)

# Run progress: 57.14% complete, ETA 01:00:10
# Fork: 1 of 3
# Warmup Iteration   1: 843.628 ns/op
# Warmup Iteration   2: 867.969 ns/op
# Warmup Iteration   3: 1102.028 ns/op
# Warmup Iteration   4: 1102.467 ns/op
# Warmup Iteration   5: 1101.941 ns/op
Iteration   1: 1102.517 ns/op
Iteration   2: 1102.012 ns/op
Iteration   3: 1101.978 ns/op
Iteration   4: 1102.111 ns/op
Iteration   5: 1101.443 ns/op

# Run progress: 58.33% complete, ETA 00:58:30
# Fork: 2 of 3
# Warmup Iteration   1: 955.307 ns/op
# Warmup Iteration   2: 971.387 ns/op
# Warmup Iteration   3: 1242.984 ns/op
# Warmup Iteration   4: 1239.042 ns/op
# Warmup Iteration   5: 1235.357 ns/op
Iteration   1: 1234.461 ns/op
Iteration   2: 1233.800 ns/op
Iteration   3: 1232.614 ns/op
Iteration   4: 1231.244 ns/op
Iteration   5: 1230.548 ns/op

# Run progress: 59.52% complete, ETA 00:56:49
# Fork: 3 of 3
# Warmup Iteration   1: 824.576 ns/op
# Warmup Iteration   2: 851.816 ns/op
# Warmup Iteration   3: 1092.084 ns/op
# Warmup Iteration   4: 1098.168 ns/op
# Warmup Iteration   5: 1121.707 ns/op
Iteration   1: 1127.156 ns/op
Iteration   2: 1126.579 ns/op
Iteration   3: 1125.265 ns/op
Iteration   4: 1126.253 ns/op
Iteration   5: 1127.081 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  1153.671 ±(99.9%) 62.698 ns/op [Average]
  (min, avg, max) = (1101.443, 1153.671, 1234.461), stdev = 58.648
  CI (99.9%): [1090.973, 1216.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 16384, stride = 512)

# Run progress: 60.71% complete, ETA 00:55:09
# Fork: 1 of 3
# Warmup Iteration   1: 841.747 ns/op
# Warmup Iteration   2: 860.492 ns/op
# Warmup Iteration   3: 1101.577 ns/op
# Warmup Iteration   4: 1101.847 ns/op
# Warmup Iteration   5: 1101.829 ns/op
Iteration   1: 1101.800 ns/op
Iteration   2: 1102.118 ns/op
Iteration   3: 1102.640 ns/op
Iteration   4: 1103.465 ns/op
Iteration   5: 1103.028 ns/op

# Run progress: 61.90% complete, ETA 00:53:29
# Fork: 2 of 3
# Warmup Iteration   1: 973.715 ns/op
# Warmup Iteration   2: 874.319 ns/op
# Warmup Iteration   3: 1124.276 ns/op
# Warmup Iteration   4: 1126.973 ns/op
# Warmup Iteration   5: 1126.403 ns/op
Iteration   1: 1126.257 ns/op
Iteration   2: 1126.333 ns/op
Iteration   3: 1126.346 ns/op
Iteration   4: 1127.929 ns/op
Iteration   5: 1220.652 ns/op

# Run progress: 63.10% complete, ETA 00:51:48
# Fork: 3 of 3
# Warmup Iteration   1: 944.821 ns/op
# Warmup Iteration   2: 948.137 ns/op
# Warmup Iteration   3: 1205.991 ns/op
# Warmup Iteration   4: 1205.571 ns/op
# Warmup Iteration   5: 1204.779 ns/op
Iteration   1: 1204.390 ns/op
Iteration   2: 1204.280 ns/op
Iteration   3: 1203.728 ns/op
Iteration   4: 1201.884 ns/op
Iteration   5: 1198.845 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  1150.246 ±(99.9%) 51.319 ns/op [Average]
  (min, avg, max) = (1101.800, 1150.246, 1220.652), stdev = 48.004
  CI (99.9%): [1098.927, 1201.565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 32768, stride = 256)

# Run progress: 64.29% complete, ETA 00:50:08
# Fork: 1 of 3
# Warmup Iteration   1: 1999.712 ns/op
# Warmup Iteration   2: 1946.294 ns/op
# Warmup Iteration   3: 2412.971 ns/op
# Warmup Iteration   4: 2415.097 ns/op
# Warmup Iteration   5: 2411.711 ns/op
Iteration   1: 2413.149 ns/op
Iteration   2: 2415.034 ns/op
Iteration   3: 2416.105 ns/op
Iteration   4: 2411.848 ns/op
Iteration   5: 2409.378 ns/op

# Run progress: 65.48% complete, ETA 00:48:28
# Fork: 2 of 3
# Warmup Iteration   1: 1719.551 ns/op
# Warmup Iteration   2: 1947.472 ns/op
# Warmup Iteration   3: 2477.895 ns/op
# Warmup Iteration   4: 2475.045 ns/op
# Warmup Iteration   5: 2471.039 ns/op
Iteration   1: 2459.419 ns/op
Iteration   2: 2459.275 ns/op
Iteration   3: 2457.926 ns/op
Iteration   4: 2455.771 ns/op
Iteration   5: 2455.156 ns/op

# Run progress: 66.67% complete, ETA 00:46:47
# Fork: 3 of 3
# Warmup Iteration   1: 1930.411 ns/op
# Warmup Iteration   2: 1928.450 ns/op
# Warmup Iteration   3: 2393.890 ns/op
# Warmup Iteration   4: 2286.100 ns/op
# Warmup Iteration   5: 2160.511 ns/op
Iteration   1: 2180.800 ns/op
Iteration   2: 2193.431 ns/op
Iteration   3: 2195.149 ns/op
Iteration   4: 2196.691 ns/op
Iteration   5: 2195.645 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  2354.319 ±(99.9%) 128.388 ns/op [Average]
  (min, avg, max) = (2180.800, 2354.319, 2459.419), stdev = 120.094
  CI (99.9%): [2225.931, 2482.706] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch
# Parameters: (size = 32768, stride = 512)

# Run progress: 67.86% complete, ETA 00:45:07
# Fork: 1 of 3
# Warmup Iteration   1: 2039.453 ns/op
# Warmup Iteration   2: 2025.099 ns/op
# Warmup Iteration   3: 2435.082 ns/op
# Warmup Iteration   4: 2425.294 ns/op
# Warmup Iteration   5: 2419.230 ns/op
Iteration   1: 2417.360 ns/op
Iteration   2: 2421.256 ns/op
Iteration   3: 2418.765 ns/op
Iteration   4: 2415.787 ns/op
Iteration   5: 2418.088 ns/op

# Run progress: 69.05% complete, ETA 00:43:27
# Fork: 2 of 3
# Warmup Iteration   1: 1913.477 ns/op
# Warmup Iteration   2: 1739.225 ns/op
# Warmup Iteration   3: 2229.744 ns/op
# Warmup Iteration   4: 2238.288 ns/op
# Warmup Iteration   5: 2245.782 ns/op
Iteration   1: 2250.630 ns/op
Iteration   2: 2252.378 ns/op
Iteration   3: 2251.734 ns/op
Iteration   4: 2252.562 ns/op
Iteration   5: 2252.982 ns/op

# Run progress: 70.24% complete, ETA 00:41:47
# Fork: 3 of 3
# Warmup Iteration   1: 2044.362 ns/op
# Warmup Iteration   2: 1893.178 ns/op
# Warmup Iteration   3: 2252.787 ns/op
# Warmup Iteration   4: 2255.008 ns/op
# Warmup Iteration   5: 2254.354 ns/op
Iteration   1: 2254.633 ns/op
Iteration   2: 2256.963 ns/op
Iteration   3: 2261.164 ns/op
Iteration   4: 2256.630 ns/op
Iteration   5: 2255.665 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.arrays_mismatch":
  2309.107 ±(99.9%) 85.453 ns/op [Average]
  (min, avg, max) = (2250.630, 2309.107, 2421.256), stdev = 79.933
  CI (99.9%): [2223.653, 2394.560] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 16384, stride = 256)

# Run progress: 71.43% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 12645.017 ns/op
# Warmup Iteration   2: 11335.970 ns/op
# Warmup Iteration   3: 11033.371 ns/op
# Warmup Iteration   4: 11238.348 ns/op
# Warmup Iteration   5: 11468.422 ns/op
Iteration   1: 11099.122 ns/op
Iteration   2: 11291.786 ns/op
Iteration   3: 11029.007 ns/op
Iteration   4: 11300.506 ns/op
Iteration   5: 10920.571 ns/op

# Run progress: 72.62% complete, ETA 00:38:26
# Fork: 2 of 3
# Warmup Iteration   1: 12499.534 ns/op
# Warmup Iteration   2: 11295.061 ns/op
# Warmup Iteration   3: 11501.598 ns/op
# Warmup Iteration   4: 11678.923 ns/op
# Warmup Iteration   5: 11410.056 ns/op
Iteration   1: 11274.157 ns/op
Iteration   2: 11320.205 ns/op
Iteration   3: 11354.684 ns/op
Iteration   4: 10810.721 ns/op
Iteration   5: 11238.954 ns/op

# Run progress: 73.81% complete, ETA 00:36:46
# Fork: 3 of 3
# Warmup Iteration   1: 12696.639 ns/op
# Warmup Iteration   2: 10807.014 ns/op
# Warmup Iteration   3: 11455.222 ns/op
# Warmup Iteration   4: 11034.567 ns/op
# Warmup Iteration   5: 11260.991 ns/op
Iteration   1: 11621.646 ns/op
Iteration   2: 11171.700 ns/op
Iteration   3: 11135.858 ns/op
Iteration   4: 11202.024 ns/op
Iteration   5: 11218.389 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  11199.289 ±(99.9%) 205.238 ns/op [Average]
  (min, avg, max) = (10810.721, 11199.289, 11621.646), stdev = 191.980
  CI (99.9%): [10994.050, 11404.527] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 16384, stride = 512)

# Run progress: 75.00% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 11699.849 ns/op
# Warmup Iteration   2: 11240.767 ns/op
# Warmup Iteration   3: 11574.836 ns/op
# Warmup Iteration   4: 11638.038 ns/op
# Warmup Iteration   5: 11052.138 ns/op
Iteration   1: 10652.973 ns/op
Iteration   2: 10841.010 ns/op
Iteration   3: 10689.799 ns/op
Iteration   4: 10704.222 ns/op
Iteration   5: 11501.635 ns/op

# Run progress: 76.19% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 11555.776 ns/op
# Warmup Iteration   2: 11418.174 ns/op
# Warmup Iteration   3: 10906.810 ns/op
# Warmup Iteration   4: 10974.410 ns/op
# Warmup Iteration   5: 11292.558 ns/op
Iteration   1: 10960.832 ns/op
Iteration   2: 11193.533 ns/op
Iteration   3: 10932.045 ns/op
Iteration   4: 11259.995 ns/op
Iteration   5: 10541.393 ns/op

# Run progress: 77.38% complete, ETA 00:31:45
# Fork: 3 of 3
# Warmup Iteration   1: 11604.124 ns/op
# Warmup Iteration   2: 10868.629 ns/op
# Warmup Iteration   3: 11146.173 ns/op
# Warmup Iteration   4: 10883.914 ns/op
# Warmup Iteration   5: 11143.000 ns/op
Iteration   1: 11255.800 ns/op
Iteration   2: 11648.372 ns/op
Iteration   3: 11411.072 ns/op
Iteration   4: 11129.209 ns/op
Iteration   5: 11366.908 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  11072.587 ±(99.9%) 364.743 ns/op [Average]
  (min, avg, max) = (10541.393, 11072.587, 11648.372), stdev = 341.181
  CI (99.9%): [10707.843, 11437.330] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 32768, stride = 256)

# Run progress: 78.57% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 24104.519 ns/op
# Warmup Iteration   2: 23105.325 ns/op
# Warmup Iteration   3: 22586.954 ns/op
# Warmup Iteration   4: 23389.168 ns/op
# Warmup Iteration   5: 21874.126 ns/op
Iteration   1: 22642.671 ns/op
Iteration   2: 22619.717 ns/op
Iteration   3: 22719.381 ns/op
Iteration   4: 22286.175 ns/op
Iteration   5: 22115.054 ns/op

# Run progress: 79.76% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 24303.170 ns/op
# Warmup Iteration   2: 23934.190 ns/op
# Warmup Iteration   3: 22600.945 ns/op
# Warmup Iteration   4: 22610.128 ns/op
# Warmup Iteration   5: 22157.135 ns/op
Iteration   1: 23004.436 ns/op
Iteration   2: 22736.630 ns/op
Iteration   3: 22191.977 ns/op
Iteration   4: 23056.575 ns/op
Iteration   5: 21727.911 ns/op

# Run progress: 80.95% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 25190.661 ns/op
# Warmup Iteration   2: 22400.428 ns/op
# Warmup Iteration   3: 22342.103 ns/op
# Warmup Iteration   4: 22346.690 ns/op
# Warmup Iteration   5: 22908.126 ns/op
Iteration   1: 22357.808 ns/op
Iteration   2: 22137.610 ns/op
Iteration   3: 22148.616 ns/op
Iteration   4: 22531.872 ns/op
Iteration   5: 22494.657 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  22451.406 ±(99.9%) 386.363 ns/op [Average]
  (min, avg, max) = (21727.911, 22451.406, 23056.575), stdev = 361.404
  CI (99.9%): [22065.043, 22837.769] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy
# Parameters: (size = 32768, stride = 512)

# Run progress: 82.14% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 24206.487 ns/op
# Warmup Iteration   2: 22863.531 ns/op
# Warmup Iteration   3: 21668.162 ns/op
# Warmup Iteration   4: 22220.098 ns/op
# Warmup Iteration   5: 21312.860 ns/op
Iteration   1: 22995.121 ns/op
Iteration   2: 22879.243 ns/op
Iteration   3: 22055.398 ns/op
Iteration   4: 22652.197 ns/op
Iteration   5: 21921.392 ns/op

# Run progress: 83.33% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 23255.457 ns/op
# Warmup Iteration   2: 21265.063 ns/op
# Warmup Iteration   3: 21868.508 ns/op
# Warmup Iteration   4: 22493.953 ns/op
# Warmup Iteration   5: 21747.500 ns/op
Iteration   1: 21386.287 ns/op
Iteration   2: 22403.831 ns/op
Iteration   3: 21721.024 ns/op
Iteration   4: 21130.295 ns/op
Iteration   5: 21402.223 ns/op

# Run progress: 84.52% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 24018.029 ns/op
# Warmup Iteration   2: 22002.571 ns/op
# Warmup Iteration   3: 21965.268 ns/op
# Warmup Iteration   4: 22609.240 ns/op
# Warmup Iteration   5: 21833.773 ns/op
Iteration   1: 22811.405 ns/op
Iteration   2: 22055.298 ns/op
Iteration   3: 21981.051 ns/op
Iteration   4: 21643.523 ns/op
Iteration   5: 23080.878 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.manual_array_copy":
  22141.278 ±(99.9%) 675.348 ns/op [Average]
  (min, avg, max) = (21130.295, 22141.278, 23080.878), stdev = 631.721
  CI (99.9%): [21465.930, 22816.626] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 16384, stride = 256)

# Run progress: 85.71% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 1668.726 ns/op
# Warmup Iteration   2: 1560.742 ns/op
# Warmup Iteration   3: 1549.229 ns/op
# Warmup Iteration   4: 1542.516 ns/op
# Warmup Iteration   5: 1571.261 ns/op
Iteration   1: 1564.405 ns/op
Iteration   2: 1562.046 ns/op
Iteration   3: 1549.235 ns/op
Iteration   4: 1583.234 ns/op
Iteration   5: 1540.440 ns/op

# Run progress: 86.90% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 1683.627 ns/op
# Warmup Iteration   2: 1599.305 ns/op
# Warmup Iteration   3: 1571.810 ns/op
# Warmup Iteration   4: 1563.915 ns/op
# Warmup Iteration   5: 1555.821 ns/op
Iteration   1: 1590.453 ns/op
Iteration   2: 1557.554 ns/op
Iteration   3: 1569.893 ns/op
Iteration   4: 1557.000 ns/op
Iteration   5: 1559.526 ns/op

# Run progress: 88.10% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 1696.138 ns/op
# Warmup Iteration   2: 1577.542 ns/op
# Warmup Iteration   3: 1562.088 ns/op
# Warmup Iteration   4: 1551.347 ns/op
# Warmup Iteration   5: 1589.203 ns/op
Iteration   1: 1588.424 ns/op
Iteration   2: 1582.414 ns/op
Iteration   3: 1574.043 ns/op
Iteration   4: 1559.263 ns/op
Iteration   5: 1571.701 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  1567.309 ±(99.9%) 15.508 ns/op [Average]
  (min, avg, max) = (1540.440, 1567.309, 1590.453), stdev = 14.506
  CI (99.9%): [1551.801, 1582.817] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 16384, stride = 512)

# Run progress: 89.29% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 1613.887 ns/op
# Warmup Iteration   2: 1484.421 ns/op
# Warmup Iteration   3: 1456.472 ns/op
# Warmup Iteration   4: 1463.404 ns/op
# Warmup Iteration   5: 1449.353 ns/op
Iteration   1: 1461.876 ns/op
Iteration   2: 1463.582 ns/op
Iteration   3: 1461.081 ns/op
Iteration   4: 1490.050 ns/op
Iteration   5: 1461.380 ns/op

# Run progress: 90.48% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 1644.684 ns/op
# Warmup Iteration   2: 1559.339 ns/op
# Warmup Iteration   3: 1520.470 ns/op
# Warmup Iteration   4: 1508.276 ns/op
# Warmup Iteration   5: 1511.257 ns/op
Iteration   1: 1521.606 ns/op
Iteration   2: 1511.002 ns/op
Iteration   3: 1488.337 ns/op
Iteration   4: 1511.369 ns/op
Iteration   5: 1525.627 ns/op

# Run progress: 91.67% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 1636.540 ns/op
# Warmup Iteration   2: 1497.940 ns/op
# Warmup Iteration   3: 1491.570 ns/op
# Warmup Iteration   4: 1481.339 ns/op
# Warmup Iteration   5: 1504.523 ns/op
Iteration   1: 1487.377 ns/op
Iteration   2: 1475.838 ns/op
Iteration   3: 1463.824 ns/op
Iteration   4: 1492.502 ns/op
Iteration   5: 1490.251 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  1487.047 ±(99.9%) 24.043 ns/op [Average]
  (min, avg, max) = (1461.081, 1487.047, 1525.627), stdev = 22.490
  CI (99.9%): [1463.004, 1511.090] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 32768, stride = 256)

# Run progress: 92.86% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 3686.956 ns/op
# Warmup Iteration   2: 3376.614 ns/op
# Warmup Iteration   3: 3472.269 ns/op
# Warmup Iteration   4: 3456.116 ns/op
# Warmup Iteration   5: 3402.596 ns/op
Iteration   1: 3457.542 ns/op
Iteration   2: 3415.873 ns/op
Iteration   3: 3402.091 ns/op
Iteration   4: 3470.776 ns/op
Iteration   5: 3411.702 ns/op

# Run progress: 94.05% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3654.537 ns/op
# Warmup Iteration   2: 3407.746 ns/op
# Warmup Iteration   3: 3389.600 ns/op
# Warmup Iteration   4: 3472.530 ns/op
# Warmup Iteration   5: 3387.951 ns/op
Iteration   1: 3368.963 ns/op
Iteration   2: 3376.710 ns/op
Iteration   3: 3443.003 ns/op
Iteration   4: 3409.289 ns/op
Iteration   5: 3390.029 ns/op

# Run progress: 95.24% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3659.889 ns/op
# Warmup Iteration   2: 3340.981 ns/op
# Warmup Iteration   3: 3323.951 ns/op
# Warmup Iteration   4: 3463.051 ns/op
# Warmup Iteration   5: 3392.828 ns/op
Iteration   1: 3444.883 ns/op
Iteration   2: 3374.781 ns/op
Iteration   3: 3389.361 ns/op
Iteration   4: 3427.703 ns/op
Iteration   5: 3369.786 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  3410.166 ±(99.9%) 35.166 ns/op [Average]
  (min, avg, max) = (3368.963, 3410.166, 3470.776), stdev = 32.894
  CI (99.9%): [3375.000, 3445.332] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy
# Parameters: (size = 32768, stride = 512)

# Run progress: 96.43% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3504.773 ns/op
# Warmup Iteration   2: 3207.191 ns/op
# Warmup Iteration   3: 3232.436 ns/op
# Warmup Iteration   4: 3232.225 ns/op
# Warmup Iteration   5: 3263.494 ns/op
Iteration   1: 3231.604 ns/op
Iteration   2: 3249.978 ns/op
Iteration   3: 3236.609 ns/op
Iteration   4: 3218.416 ns/op
Iteration   5: 3241.241 ns/op

# Run progress: 97.62% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3496.035 ns/op
# Warmup Iteration   2: 3281.971 ns/op
# Warmup Iteration   3: 3254.536 ns/op
# Warmup Iteration   4: 3257.849 ns/op
# Warmup Iteration   5: 3256.118 ns/op
Iteration   1: 3259.196 ns/op
Iteration   2: 3222.863 ns/op
Iteration   3: 3305.943 ns/op
Iteration   4: 3238.389 ns/op
Iteration   5: 3256.879 ns/op

# Run progress: 98.81% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 3600.901 ns/op
# Warmup Iteration   2: 3220.580 ns/op
# Warmup Iteration   3: 3213.882 ns/op
# Warmup Iteration   4: 3204.483 ns/op
# Warmup Iteration   5: 3242.354 ns/op
Iteration   1: 3264.152 ns/op
Iteration   2: 3247.144 ns/op
Iteration   3: 3220.557 ns/op
Iteration   4: 3211.152 ns/op
Iteration   5: 3219.780 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ArrayCopyBenchmark.system_array_copy":
  3241.593 ±(99.9%) 25.814 ns/op [Average]
  (min, avg, max) = (3211.152, 3241.593, 3305.943), stdev = 24.146
  CI (99.9%): [3215.780, 3267.407] (assumes normal distribution)


# Run complete. Total time: 02:20:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             (size)  (stride)  Mode  Cnt      Score     Error  Units
ArrayCopyBenchmark.array_clone         16384       256  avgt   15   1429.846 ±  12.353  ns/op
ArrayCopyBenchmark.array_clone         16384       512  avgt   15   1434.918 ±   6.788  ns/op
ArrayCopyBenchmark.array_clone         32768       256  avgt   15   3057.362 ±  18.132  ns/op
ArrayCopyBenchmark.array_clone         32768       512  avgt   15   3074.538 ±  27.796  ns/op
ArrayCopyBenchmark.arrays_compare      16384       256  avgt   15    924.273 ±  52.296  ns/op
ArrayCopyBenchmark.arrays_compare      16384       512  avgt   15    903.284 ±  39.586  ns/op
ArrayCopyBenchmark.arrays_compare      32768       256  avgt   15   1874.090 ± 105.939  ns/op
ArrayCopyBenchmark.arrays_compare      32768       512  avgt   15   1872.036 ±  99.048  ns/op
ArrayCopyBenchmark.arrays_copyOf       16384       256  avgt   15   4057.510 ±  66.017  ns/op
ArrayCopyBenchmark.arrays_copyOf       16384       512  avgt   15   3860.306 ±   4.544  ns/op
ArrayCopyBenchmark.arrays_copyOf       32768       256  avgt   15   8095.385 ±  18.417  ns/op
ArrayCopyBenchmark.arrays_copyOf       32768       512  avgt   15   7910.734 ± 106.202  ns/op
ArrayCopyBenchmark.arrays_equals       16384       256  avgt   15    336.514 ±   6.508  ns/op
ArrayCopyBenchmark.arrays_equals       16384       512  avgt   15    337.056 ±  16.154  ns/op
ArrayCopyBenchmark.arrays_equals       32768       256  avgt   15   1014.975 ±  88.369  ns/op
ArrayCopyBenchmark.arrays_equals       32768       512  avgt   15   1010.173 ±  29.534  ns/op
ArrayCopyBenchmark.arrays_mismatch     16384       256  avgt   15   1153.671 ±  62.698  ns/op
ArrayCopyBenchmark.arrays_mismatch     16384       512  avgt   15   1150.246 ±  51.319  ns/op
ArrayCopyBenchmark.arrays_mismatch     32768       256  avgt   15   2354.319 ± 128.388  ns/op
ArrayCopyBenchmark.arrays_mismatch     32768       512  avgt   15   2309.107 ±  85.453  ns/op
ArrayCopyBenchmark.manual_array_copy   16384       256  avgt   15  11199.289 ± 205.238  ns/op
ArrayCopyBenchmark.manual_array_copy   16384       512  avgt   15  11072.587 ± 364.743  ns/op
ArrayCopyBenchmark.manual_array_copy   32768       256  avgt   15  22451.406 ± 386.363  ns/op
ArrayCopyBenchmark.manual_array_copy   32768       512  avgt   15  22141.278 ± 675.348  ns/op
ArrayCopyBenchmark.system_array_copy   16384       256  avgt   15   1567.309 ±  15.508  ns/op
ArrayCopyBenchmark.system_array_copy   16384       512  avgt   15   1487.047 ±  24.043  ns/op
ArrayCopyBenchmark.system_array_copy   32768       256  avgt   15   3410.166 ±  35.166  ns/op
ArrayCopyBenchmark.system_array_copy   32768       512  avgt   15   3241.593 ±  25.814  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/ArrayCopyBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*IfConditionalBranchBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/IfConditionalBranchBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.branchless_baseline
# Parameters: (thresholdLimit = 4096)

# Run progress: 0.00% complete, ETA 00:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 6361.514 ns/op
# Warmup Iteration   2: 5103.880 ns/op
# Warmup Iteration   3: 5017.936 ns/op
# Warmup Iteration   4: 4985.753 ns/op
# Warmup Iteration   5: 4984.847 ns/op
Iteration   1: 4984.907 ns/op
Iteration   2: 4979.643 ns/op
Iteration   3: 4975.148 ns/op
Iteration   4: 4956.220 ns/op
Iteration   5: 4951.503 ns/op

# Run progress: 11.11% complete, ETA 00:13:23
# Fork: 2 of 3
# Warmup Iteration   1: 6004.593 ns/op
# Warmup Iteration   2: 5582.791 ns/op
# Warmup Iteration   3: 5488.664 ns/op
# Warmup Iteration   4: 5475.186 ns/op
# Warmup Iteration   5: 5460.001 ns/op
Iteration   1: 5446.773 ns/op
Iteration   2: 5437.560 ns/op
Iteration   3: 5435.293 ns/op
Iteration   4: 5430.704 ns/op
Iteration   5: 5426.885 ns/op

# Run progress: 22.22% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 5183.790 ns/op
# Warmup Iteration   2: 5539.235 ns/op
# Warmup Iteration   3: 5444.746 ns/op
# Warmup Iteration   4: 5426.259 ns/op
# Warmup Iteration   5: 5405.676 ns/op
Iteration   1: 5398.314 ns/op
Iteration   2: 5400.974 ns/op
Iteration   3: 5387.028 ns/op
Iteration   4: 5384.650 ns/op
Iteration   5: 5384.155 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.branchless_baseline":
  5265.317 ±(99.9%) 232.588 ns/op [Average]
  (min, avg, max) = (4951.503, 5265.317, 5446.773), stdev = 217.563
  CI (99.9%): [5032.730, 5497.905] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.predictable_branch
# Parameters: (thresholdLimit = 4096)

# Run progress: 33.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 9501.333 ns/op
# Warmup Iteration   2: 9026.648 ns/op
# Warmup Iteration   3: 9007.975 ns/op
# Warmup Iteration   4: 9004.414 ns/op
# Warmup Iteration   5: 8997.271 ns/op
Iteration   1: 8774.853 ns/op
Iteration   2: 8788.319 ns/op
Iteration   3: 8787.959 ns/op
Iteration   4: 10023.684 ns/op
Iteration   5: 9926.291 ns/op

# Run progress: 44.44% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 10632.286 ns/op
# Warmup Iteration   2: 9946.722 ns/op
# Warmup Iteration   3: 9848.387 ns/op
# Warmup Iteration   4: 9818.512 ns/op
# Warmup Iteration   5: 9803.880 ns/op
Iteration   1: 9795.826 ns/op
Iteration   2: 9791.853 ns/op
Iteration   3: 9782.306 ns/op
Iteration   4: 9770.805 ns/op
Iteration   5: 9779.457 ns/op

# Run progress: 55.56% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 9306.522 ns/op
# Warmup Iteration   2: 8946.783 ns/op
# Warmup Iteration   3: 8929.008 ns/op
# Warmup Iteration   4: 8922.365 ns/op
# Warmup Iteration   5: 8940.350 ns/op
Iteration   1: 8962.038 ns/op
Iteration   2: 8965.504 ns/op
Iteration   3: 8964.296 ns/op
Iteration   4: 8960.863 ns/op
Iteration   5: 8989.431 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.predictable_branch":
  9337.566 ±(99.9%) 528.136 ns/op [Average]
  (min, avg, max) = (8774.853, 9337.566, 10023.684), stdev = 494.019
  CI (99.9%): [8809.430, 9865.702] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.unpredictable_branch
# Parameters: (thresholdLimit = 4096)

# Run progress: 66.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 56801.083 ns/op
# Warmup Iteration   2: 52132.673 ns/op
# Warmup Iteration   3: 54032.864 ns/op
# Warmup Iteration   4: 53998.992 ns/op
# Warmup Iteration   5: 54016.975 ns/op
Iteration   1: 54009.371 ns/op
Iteration   2: 54013.261 ns/op
Iteration   3: 54014.005 ns/op
Iteration   4: 54020.361 ns/op
Iteration   5: 54020.421 ns/op

# Run progress: 77.78% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 53613.942 ns/op
# Warmup Iteration   2: 51994.499 ns/op
# Warmup Iteration   3: 54030.354 ns/op
# Warmup Iteration   4: 54045.226 ns/op
# Warmup Iteration   5: 54064.046 ns/op
Iteration   1: 54033.361 ns/op
Iteration   2: 54046.136 ns/op
Iteration   3: 54059.067 ns/op
Iteration   4: 54068.525 ns/op
Iteration   5: 54072.190 ns/op

# Run progress: 88.89% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 53612.327 ns/op
# Warmup Iteration   2: 52061.713 ns/op
# Warmup Iteration   3: 54029.678 ns/op
# Warmup Iteration   4: 54045.614 ns/op
# Warmup Iteration   5: 54072.334 ns/op
Iteration   1: 54049.947 ns/op
Iteration   2: 54044.264 ns/op
Iteration   3: 54041.737 ns/op
Iteration   4: 54038.425 ns/op
Iteration   5: 54041.048 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.IfConditionalBranchBenchmark.unpredictable_branch":
  54038.141 ±(99.9%) 21.122 ns/op [Average]
  (min, avg, max) = (54009.371, 54038.141, 54072.190), stdev = 19.757
  CI (99.9%): [54017.020, 54059.263] (assumes normal distribution)


# Run complete. Total time: 00:15:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (thresholdLimit)  Mode  Cnt      Score     Error  Units
IfConditionalBranchBenchmark.branchless_baseline               4096  avgt   15   5265.317 ± 232.588  ns/op
IfConditionalBranchBenchmark.predictable_branch                4096  avgt   15   9337.566 ± 528.136  ns/op
IfConditionalBranchBenchmark.unpredictable_branch              4096  avgt   15  54038.141 ±  21.122  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/IfConditionalBranchBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*NullChecksBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/NullChecksBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.0)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 2611.649 ns/op
# Warmup Iteration   2: 2321.109 ns/op
# Warmup Iteration   3: 2293.267 ns/op
# Warmup Iteration   4: 2315.181 ns/op
# Warmup Iteration   5: 2311.260 ns/op
Iteration   1: 2310.172 ns/op
Iteration   2: 2313.380 ns/op
Iteration   3: 2312.850 ns/op
Iteration   4: 2310.927 ns/op
Iteration   5: 2311.030 ns/op

# Run progress: 5.56% complete, ETA 00:28:26
# Fork: 2 of 3
# Warmup Iteration   1: 2719.337 ns/op
# Warmup Iteration   2: 2290.998 ns/op
# Warmup Iteration   3: 2312.490 ns/op
# Warmup Iteration   4: 2314.230 ns/op
# Warmup Iteration   5: 2314.464 ns/op
Iteration   1: 2312.616 ns/op
Iteration   2: 2362.222 ns/op
Iteration   3: 2354.647 ns/op
Iteration   4: 2350.243 ns/op
Iteration   5: 2626.465 ns/op

# Run progress: 11.11% complete, ETA 00:26:45
# Fork: 3 of 3
# Warmup Iteration   1: 2431.734 ns/op
# Warmup Iteration   2: 2299.104 ns/op
# Warmup Iteration   3: 2317.779 ns/op
# Warmup Iteration   4: 2314.879 ns/op
# Warmup Iteration   5: 2317.881 ns/op
Iteration   1: 2314.666 ns/op
Iteration   2: 2314.170 ns/op
Iteration   3: 2314.470 ns/op
Iteration   4: 2316.834 ns/op
Iteration   5: 2311.280 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check":
  2342.398 ±(99.9%) 86.134 ns/op [Average]
  (min, avg, max) = (2310.172, 2342.398, 2626.465), stdev = 80.570
  CI (99.9%): [2256.264, 2428.532] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.5)

# Run progress: 16.67% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 752109.986 ns/op
# Warmup Iteration   2: 739501.442 ns/op
# Warmup Iteration   3: 742447.256 ns/op
# Warmup Iteration   4: 737801.939 ns/op
# Warmup Iteration   5: 714577.655 ns/op
Iteration   1: 688455.737 ns/op
Iteration   2: 717968.833 ns/op
Iteration   3: 680466.654 ns/op
Iteration   4: 658064.141 ns/op
Iteration   5: 688312.781 ns/op

# Run progress: 22.22% complete, ETA 00:23:24
# Fork: 2 of 3
# Warmup Iteration   1: 793571.807 ns/op
# Warmup Iteration   2: 740237.138 ns/op
# Warmup Iteration   3: 728895.474 ns/op
# Warmup Iteration   4: 742584.152 ns/op
# Warmup Iteration   5: 745378.170 ns/op
Iteration   1: 720880.193 ns/op
Iteration   2: 690277.132 ns/op
Iteration   3: 682070.144 ns/op
Iteration   4: 672080.270 ns/op
Iteration   5: 711867.747 ns/op

# Run progress: 27.78% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 722495.515 ns/op
# Warmup Iteration   2: 744615.867 ns/op
# Warmup Iteration   3: 736997.522 ns/op
# Warmup Iteration   4: 752083.447 ns/op
# Warmup Iteration   5: 688281.208 ns/op
Iteration   1: 686970.878 ns/op
Iteration   2: 721065.468 ns/op
Iteration   3: 674665.107 ns/op
Iteration   4: 691026.725 ns/op
Iteration   5: 726960.721 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check":
  694075.502 ±(99.9%) 22208.125 ns/op [Average]
  (min, avg, max) = (658064.141, 694075.502, 726960.721), stdev = 20773.494
  CI (99.9%): [671867.377, 716283.627] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 1.0)

# Run progress: 33.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 1491668.479 ns/op
# Warmup Iteration   2: 1565513.347 ns/op
# Warmup Iteration   3: 1551530.705 ns/op
# Warmup Iteration   4: 1547078.949 ns/op
# Warmup Iteration   5: 1543340.746 ns/op
Iteration   1: 1540248.076 ns/op
Iteration   2: 1541516.403 ns/op
Iteration   3: 1534104.202 ns/op
Iteration   4: 1488267.750 ns/op
Iteration   5: 1486114.298 ns/op

# Run progress: 38.89% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 1592299.400 ns/op
# Warmup Iteration   2: 1442285.952 ns/op
# Warmup Iteration   3: 1354704.835 ns/op
# Warmup Iteration   4: 1467497.287 ns/op
# Warmup Iteration   5: 1559589.488 ns/op
Iteration   1: 1392016.881 ns/op
Iteration   2: 1394046.965 ns/op
Iteration   3: 1459259.501 ns/op
Iteration   4: 1414527.668 ns/op
Iteration   5: 1490925.885 ns/op

# Run progress: 44.44% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 1543345.903 ns/op
# Warmup Iteration   2: 1427518.059 ns/op
# Warmup Iteration   3: 1484869.639 ns/op
# Warmup Iteration   4: 1520010.707 ns/op
# Warmup Iteration   5: 1511807.974 ns/op
Iteration   1: 1524139.207 ns/op
Iteration   2: 1380578.052 ns/op
Iteration   3: 1523073.784 ns/op
Iteration   4: 1549371.496 ns/op
Iteration   5: 1517076.160 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.explicit_null_check":
  1482351.089 ±(99.9%) 64019.242 ns/op [Average]
  (min, avg, max) = (1380578.052, 1482351.089, 1549371.496), stdev = 59883.639
  CI (99.9%): [1418331.847, 1546370.331] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.0)

# Run progress: 50.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2426.468 ns/op
# Warmup Iteration   2: 2299.824 ns/op
# Warmup Iteration   3: 2428.241 ns/op
# Warmup Iteration   4: 2418.857 ns/op
# Warmup Iteration   5: 2416.413 ns/op
Iteration   1: 2416.441 ns/op
Iteration   2: 2408.068 ns/op
Iteration   3: 2411.470 ns/op
Iteration   4: 2405.407 ns/op
Iteration   5: 2404.791 ns/op

# Run progress: 55.56% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 2147.386 ns/op
# Warmup Iteration   2: 2131.427 ns/op
# Warmup Iteration   3: 2143.009 ns/op
# Warmup Iteration   4: 2151.715 ns/op
# Warmup Iteration   5: 2154.125 ns/op
Iteration   1: 2153.572 ns/op
Iteration   2: 2157.980 ns/op
Iteration   3: 2158.474 ns/op
Iteration   4: 2157.243 ns/op
Iteration   5: 2164.316 ns/op

# Run progress: 61.11% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2455.258 ns/op
# Warmup Iteration   2: 2330.480 ns/op
# Warmup Iteration   3: 2438.468 ns/op
# Warmup Iteration   4: 2426.783 ns/op
# Warmup Iteration   5: 2422.327 ns/op
Iteration   1: 2414.052 ns/op
Iteration   2: 2419.862 ns/op
Iteration   3: 2417.155 ns/op
Iteration   4: 2417.281 ns/op
Iteration   5: 2416.959 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check":
  2328.205 ±(99.9%) 133.031 ns/op [Average]
  (min, avg, max) = (2153.572, 2328.205, 2419.862), stdev = 124.438
  CI (99.9%): [2195.173, 2461.236] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 0.5)

# Run progress: 66.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 3669013.602 ns/op
# Warmup Iteration   2: 3596559.795 ns/op
# Warmup Iteration   3: 3592898.731 ns/op
# Warmup Iteration   4: 3593048.985 ns/op
# Warmup Iteration   5: 3593303.432 ns/op
Iteration   1: 3591039.215 ns/op
Iteration   2: 3596075.809 ns/op
Iteration   3: 3595824.084 ns/op
Iteration   4: 3596153.191 ns/op
Iteration   5: 3594469.416 ns/op

# Run progress: 72.22% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 4008591.314 ns/op
# Warmup Iteration   2: 3875832.420 ns/op
# Warmup Iteration   3: 3861906.744 ns/op
# Warmup Iteration   4: 3853913.964 ns/op
# Warmup Iteration   5: 3851949.141 ns/op
Iteration   1: 3873132.689 ns/op
Iteration   2: 3848879.838 ns/op
Iteration   3: 3845267.196 ns/op
Iteration   4: 3848282.569 ns/op
Iteration   5: 3849283.194 ns/op

# Run progress: 77.78% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 4129657.696 ns/op
# Warmup Iteration   2: 4104927.205 ns/op
# Warmup Iteration   3: 4058148.060 ns/op
# Warmup Iteration   4: 4029299.657 ns/op
# Warmup Iteration   5: 4006070.316 ns/op
Iteration   1: 4009745.502 ns/op
Iteration   2: 3994263.987 ns/op
Iteration   3: 3992169.347 ns/op
Iteration   4: 3983690.795 ns/op
Iteration   5: 3980784.940 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check":
  3813270.785 ±(99.9%) 182440.846 ns/op [Average]
  (min, avg, max) = (3591039.215, 3813270.785, 4009745.502), stdev = 170655.280
  CI (99.9%): [3630829.939, 3995711.631] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check
# Parameters: (size = 1024, upperNullThreshold = 1.0)

# Run progress: 83.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 8132831.192 ns/op
# Warmup Iteration   2: 8323036.679 ns/op
# Warmup Iteration   3: 8238111.262 ns/op
# Warmup Iteration   4: 8207931.281 ns/op
# Warmup Iteration   5: 8180664.789 ns/op
Iteration   1: 8166676.862 ns/op
Iteration   2: 8178567.697 ns/op
Iteration   3: 8156451.404 ns/op
Iteration   4: 8146326.120 ns/op
Iteration   5: 8135332.971 ns/op

# Run progress: 88.89% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 7739551.194 ns/op
# Warmup Iteration   2: 7530326.175 ns/op
# Warmup Iteration   3: 7530581.548 ns/op
# Warmup Iteration   4: 7522807.925 ns/op
# Warmup Iteration   5: 7530118.470 ns/op
Iteration   1: 7536136.017 ns/op
Iteration   2: 7534113.191 ns/op
Iteration   3: 7517438.952 ns/op
Iteration   4: 7522062.292 ns/op
Iteration   5: 7527518.512 ns/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 8839981.716 ns/op
# Warmup Iteration   2: 7406435.068 ns/op
# Warmup Iteration   3: 7395604.053 ns/op
# Warmup Iteration   4: 7400228.101 ns/op
# Warmup Iteration   5: 7417933.578 ns/op
Iteration   1: 7426337.633 ns/op
Iteration   2: 7424448.180 ns/op
Iteration   3: 7450648.461 ns/op
Iteration   4: 7456286.988 ns/op
Iteration   5: 7431299.753 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.NullChecksBenchmark.implicit_null_check":
  7707309.669 ±(99.9%) 354196.954 ns/op [Average]
  (min, avg, max) = (7424448.180, 7707309.669, 8178567.697), stdev = 331316.051
  CI (99.9%): [7353112.714, 8061506.623] (assumes normal distribution)


# Run complete. Total time: 00:30:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                (size)  (upperNullThreshold)  Mode  Cnt        Score        Error  Units
NullChecksBenchmark.explicit_null_check    1024                   0.0  avgt   15     2342.398 ±     86.134  ns/op
NullChecksBenchmark.explicit_null_check    1024                   0.5  avgt   15   694075.502 ±  22208.125  ns/op
NullChecksBenchmark.explicit_null_check    1024                   1.0  avgt   15  1482351.089 ±  64019.242  ns/op
NullChecksBenchmark.implicit_null_check    1024                   0.0  avgt   15     2328.205 ±    133.031  ns/op
NullChecksBenchmark.implicit_null_check    1024                   0.5  avgt   15  3813270.785 ± 182440.846  ns/op
NullChecksBenchmark.implicit_null_check    1024                   1.0  avgt   15  7707309.669 ± 354196.954  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/NullChecksBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*CodeCacheBusterBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/CodeCacheBusterBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.CodeCacheBusterBenchmark.code_cache_buster

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 775.867 us/op
# Warmup Iteration   2: 602.057 us/op
# Warmup Iteration   3: 513.263 us/op
# Warmup Iteration   4: 449.586 us/op
# Warmup Iteration   5: 356.703 us/op
Iteration   1: [Use -Dgraal.LogFile=<path> to redirect Graal log output to a file.]
Warning: could not create diagnostics directory /home/ionutbalosin/Workspace/jvm-jit-compiler-benchmarks/dumps/1555684904571/graal_diagnostics_30954/com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl,_RawResults,_BenchmarkParams,_IterationParams,_ThreadParams,_Blackhole,_Control,_int,_CodeCacheBusterBenchmark_jmhType)
Thread[JVMCI CompilerThread0,9,system]: Compilation of com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl, RawResults, BenchmarkParams, IterationParams, ThreadParams, Blackhole, Control, int, CodeCacheBusterBenchmark_jmhType) failed:
org.graalvm.compiler.java.BytecodeParser$BytecodeParserError: java.lang.StackOverflowError
	at parsing app//com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(CodeCacheBusterBenchmark_code_cache_buster_jmhTest.java:190)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.throwParserError(BytecodeParser.java:2434)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.iterateBytecodesForBlock(BytecodeParser.java:3174)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.processBlock(BytecodeParser.java:2978)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.build(BytecodeParser.java:889)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.buildRootMethod(BytecodeParser.java:783)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase$Instance.run(GraphBuilderPhase.java:95)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase.run(GraphBuilderPhase.java:59)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase.run(GraphBuilderPhase.java:43)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.PhaseSuite.run(PhaseSuite.java:212)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.emitFrontEnd(GraalCompiler.java:249)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.compile(GraalCompiler.java:180)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.compileGraph(GraalCompiler.java:165)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper(HotSpotGraalCompiler.java:185)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile(HotSpotGraalCompiler.java:198)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation(CompilationTask.java:182)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation(CompilationTask.java:99)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.CompilationWrapper.run(CompilationWrapper.java:172)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask.runCompilation(CompilationTask.java:331)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod(HotSpotGraalCompiler.java:138)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod(HotSpotGraalCompiler.java:105)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod(HotSpotJVMCIRuntime.java:524)
Caused by: java.lang.StackOverflowError
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1055)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
To disable compilation failure notifications, set CompilationFailureAction to Silent (e.g., -Dgraal.CompilationFailureAction=Silent).
To print a message for a compilation failure without retrying the compilation, set CompilationFailureAction to Print (e.g., -Dgraal.CompilationFailureAction=Print).
Not retrying compilation of com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl, RawResults, BenchmarkParams, IterationParams, ThreadParams, Blackhole, Control, int, CodeCacheBusterBenchmark_jmhType) as the dump path could not be created.
353.713 us/op
Iteration   2: 351.467 us/op
Iteration   3: 349.844 us/op
Iteration   4: 350.024 us/op
Iteration   5: 348.129 us/op
Graal diagnostic output saved in /home/ionutbalosin/Workspace/jvm-jit-compiler-benchmarks/dumps/1555684904571/graal_diagnostics_30954.zip

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 769.136 us/op
# Warmup Iteration   2: 606.301 us/op
# Warmup Iteration   3: 441.691 us/op
# Warmup Iteration   4: 332.874 us/op
# Warmup Iteration   5: [Use -Dgraal.LogFile=<path> to redirect Graal log output to a file.]
Warning: could not create diagnostics directory /home/ionutbalosin/Workspace/jvm-jit-compiler-benchmarks/dumps/1555684999897/graal_diagnostics_31030/com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl,_RawResults,_BenchmarkParams,_IterationParams,_ThreadParams,_Blackhole,_Control,_int,_CodeCacheBusterBenchmark_jmhType)
Thread[JVMCI CompilerThread0,9,system]: Compilation of com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl, RawResults, BenchmarkParams, IterationParams, ThreadParams, Blackhole, Control, int, CodeCacheBusterBenchmark_jmhType) failed:
org.graalvm.compiler.java.BytecodeParser$BytecodeParserError: java.lang.StackOverflowError
	at parsing app//com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(CodeCacheBusterBenchmark_code_cache_buster_jmhTest.java:190)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.throwParserError(BytecodeParser.java:2434)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.iterateBytecodesForBlock(BytecodeParser.java:3174)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.processBlock(BytecodeParser.java:2978)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.build(BytecodeParser.java:889)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.buildRootMethod(BytecodeParser.java:783)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase$Instance.run(GraphBuilderPhase.java:95)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase.run(GraphBuilderPhase.java:59)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase.run(GraphBuilderPhase.java:43)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.PhaseSuite.run(PhaseSuite.java:212)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.emitFrontEnd(GraalCompiler.java:249)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.compile(GraalCompiler.java:180)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.compileGraph(GraalCompiler.java:165)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper(HotSpotGraalCompiler.java:185)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile(HotSpotGraalCompiler.java:198)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation(CompilationTask.java:182)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation(CompilationTask.java:99)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.CompilationWrapper.run(CompilationWrapper.java:172)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask.runCompilation(CompilationTask.java:331)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod(HotSpotGraalCompiler.java:138)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod(HotSpotGraalCompiler.java:105)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod(HotSpotJVMCIRuntime.java:524)
Caused by: java.lang.StackOverflowError
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1055)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
To disable compilation failure notifications, set CompilationFailureAction to Silent (e.g., -Dgraal.CompilationFailureAction=Silent).
To print a message for a compilation failure without retrying the compilation, set CompilationFailureAction to Print (e.g., -Dgraal.CompilationFailureAction=Print).
Not retrying compilation of com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl, RawResults, BenchmarkParams, IterationParams, ThreadParams, Blackhole, Control, int, CodeCacheBusterBenchmark_jmhType) as the dump path could not be created.
304.083 us/op
Iteration   1: 303.453 us/op
Iteration   2: 330.646 us/op
Iteration   3: 328.202 us/op
Iteration   4: 326.104 us/op
Iteration   5: 325.775 us/op
Graal diagnostic output saved in /home/ionutbalosin/Workspace/jvm-jit-compiler-benchmarks/dumps/1555684999897/graal_diagnostics_31030.zip

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 752.086 us/op
# Warmup Iteration   2: 645.336 us/op
# Warmup Iteration   3: 549.294 us/op
# Warmup Iteration   4: 468.695 us/op
# Warmup Iteration   5: 358.755 us/op
Iteration   1: [Use -Dgraal.LogFile=<path> to redirect Graal log output to a file.]
Warning: could not create diagnostics directory /home/ionutbalosin/Workspace/jvm-jit-compiler-benchmarks/dumps/1555685106206/graal_diagnostics_31100/com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl,_RawResults,_BenchmarkParams,_IterationParams,_ThreadParams,_Blackhole,_Control,_int,_CodeCacheBusterBenchmark_jmhType)
Thread[JVMCI CompilerThread0,9,system]: Compilation of com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl, RawResults, BenchmarkParams, IterationParams, ThreadParams, Blackhole, Control, int, CodeCacheBusterBenchmark_jmhType) failed:
org.graalvm.compiler.java.BytecodeParser$BytecodeParserError: java.lang.StackOverflowError
	at parsing app//com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(CodeCacheBusterBenchmark_code_cache_buster_jmhTest.java:190)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.throwParserError(BytecodeParser.java:2434)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.iterateBytecodesForBlock(BytecodeParser.java:3174)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.processBlock(BytecodeParser.java:2978)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.build(BytecodeParser.java:889)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BytecodeParser.buildRootMethod(BytecodeParser.java:783)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase$Instance.run(GraphBuilderPhase.java:95)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase.run(GraphBuilderPhase.java:59)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.GraphBuilderPhase.run(GraphBuilderPhase.java:43)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.PhaseSuite.run(PhaseSuite.java:212)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:197)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.phases.BasePhase.apply(BasePhase.java:139)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.emitFrontEnd(GraalCompiler.java:249)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.compile(GraalCompiler.java:180)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.GraalCompiler.compileGraph(GraalCompiler.java:165)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper(HotSpotGraalCompiler.java:185)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile(HotSpotGraalCompiler.java:198)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation(CompilationTask.java:182)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation(CompilationTask.java:99)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.core.CompilationWrapper.run(CompilationWrapper.java:172)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.CompilationTask.runCompilation(CompilationTask.java:331)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod(HotSpotGraalCompiler.java:138)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod(HotSpotGraalCompiler.java:105)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod(HotSpotJVMCIRuntime.java:524)
Caused by: java.lang.StackOverflowError
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1055)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
	at jdk.internal.vm.compiler@12/org.graalvm.compiler.java.BciBlockMapping.computeBlockOrder(BciBlockMapping.java:1057)
To disable compilation failure notifications, set CompilationFailureAction to Silent (e.g., -Dgraal.CompilationFailureAction=Silent).
To print a message for a compilation failure without retrying the compilation, set CompilationFailureAction to Print (e.g., -Dgraal.CompilationFailureAction=Print).
Not retrying compilation of com.ionutbalosin.jvm.jit.benchmark.generated.CodeCacheBusterBenchmark_code_cache_buster_jmhTest.code_cache_buster_avgt_jmhStub(InfraControl, RawResults, BenchmarkParams, IterationParams, ThreadParams, Blackhole, Control, int, CodeCacheBusterBenchmark_jmhType) as the dump path could not be created.
357.983 us/op
Iteration   2: 352.667 us/op
Iteration   3: 352.678 us/op
Iteration   4: 351.739 us/op
Iteration   5: 351.325 us/op
Graal diagnostic output saved in /home/ionutbalosin/Workspace/jvm-jit-compiler-benchmarks/dumps/1555685106206/graal_diagnostics_31100.zip


Result "com.ionutbalosin.jvm.jit.benchmark.CodeCacheBusterBenchmark.code_cache_buster":
  342.250 ±(99.9%) 16.600 us/op [Average]
  (min, avg, max) = (303.453, 342.250, 357.983), stdev = 15.528
  CI (99.9%): [325.650, 358.850] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt    Score    Error  Units
CodeCacheBusterBenchmark.code_cache_buster  avgt   15  342.250 ± 16.600  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/CodeCacheBusterBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*MethodArgsBusterBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/MethodArgsBusterBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MethodArgsBusterBenchmark.method_args_buster

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.292 ns/op
# Warmup Iteration   2: 3.348 ns/op
# Warmup Iteration   3: 3.281 ns/op
# Warmup Iteration   4: 3.253 ns/op
# Warmup Iteration   5: 3.238 ns/op
Iteration   1: 3.236 ns/op
Iteration   2: 2.914 ns/op
Iteration   3: 2.947 ns/op
Iteration   4: 2.950 ns/op
Iteration   5: 3.211 ns/op

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3.525 ns/op
# Warmup Iteration   2: 2.911 ns/op
# Warmup Iteration   3: 2.814 ns/op
# Warmup Iteration   4: 2.806 ns/op
# Warmup Iteration   5: 2.792 ns/op
Iteration   1: 2.783 ns/op
Iteration   2: 2.789 ns/op
Iteration   3: 2.777 ns/op
Iteration   4: 2.778 ns/op
Iteration   5: 2.778 ns/op

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 3.076 ns/op
# Warmup Iteration   2: 2.908 ns/op
# Warmup Iteration   3: 2.851 ns/op
# Warmup Iteration   4: 2.848 ns/op
# Warmup Iteration   5: 2.845 ns/op
Iteration   1: 2.850 ns/op
Iteration   2: 2.841 ns/op
Iteration   3: 2.841 ns/op
Iteration   4: 2.836 ns/op
Iteration   5: 2.538 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MethodArgsBusterBenchmark.method_args_buster":
  2.871 ±(99.9%) 0.185 ns/op [Average]
  (min, avg, max) = (2.538, 2.871, 3.236), stdev = 0.173
  CI (99.9%): [2.687, 3.056] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt  Score   Error  Units
MethodArgsBusterBenchmark.method_args_buster  avgt   15  2.871 ± 0.185  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/MethodArgsBusterBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*DeadCodeEliminationBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/DeadCodeEliminationBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.baseline
# Parameters: (circleRadius = 42, iterations = 32768)

# Run progress: 0.00% complete, ETA 00:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 1.091 ns/op
# Warmup Iteration   2: 1.015 ns/op
# Warmup Iteration   3: 1.013 ns/op
# Warmup Iteration   4: 1.014 ns/op
# Warmup Iteration   5: 1.013 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 1.013 ns/op
Iteration   3: 1.014 ns/op
Iteration   4: 1.013 ns/op
Iteration   5: 1.013 ns/op

# Run progress: 11.11% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 1.057 ns/op
# Warmup Iteration   2: 1.014 ns/op
# Warmup Iteration   3: 1.013 ns/op
# Warmup Iteration   4: 1.013 ns/op
# Warmup Iteration   5: 1.013 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 1.013 ns/op
Iteration   3: 1.013 ns/op
Iteration   4: 1.013 ns/op
Iteration   5: 1.013 ns/op

# Run progress: 22.22% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 1.051 ns/op
# Warmup Iteration   2: 1.016 ns/op
# Warmup Iteration   3: 1.013 ns/op
# Warmup Iteration   4: 1.013 ns/op
# Warmup Iteration   5: 1.014 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 1.013 ns/op
Iteration   3: 1.013 ns/op
Iteration   4: 1.013 ns/op
Iteration   5: 1.014 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.baseline":
  1.013 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (1.013, 1.013, 1.014), stdev = 0.001
  CI (99.9%): [1.013, 1.014] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_native_method_calls
# Parameters: (circleRadius = 42, iterations = 32768)

# Run progress: 33.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 162.676 ns/op
# Warmup Iteration   2: 159.249 ns/op
# Warmup Iteration   3: 159.159 ns/op
# Warmup Iteration   4: 159.158 ns/op
# Warmup Iteration   5: 159.222 ns/op
Iteration   1: 159.205 ns/op
Iteration   2: 159.185 ns/op
Iteration   3: 159.153 ns/op
Iteration   4: 159.140 ns/op
Iteration   5: 159.125 ns/op

# Run progress: 44.44% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 163.903 ns/op
# Warmup Iteration   2: 162.457 ns/op
# Warmup Iteration   3: 162.342 ns/op
# Warmup Iteration   4: 162.196 ns/op
# Warmup Iteration   5: 162.038 ns/op
Iteration   1: 162.331 ns/op
Iteration   2: 162.104 ns/op
Iteration   3: 162.014 ns/op
Iteration   4: 159.151 ns/op
Iteration   5: 159.130 ns/op

# Run progress: 55.56% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 163.041 ns/op
# Warmup Iteration   2: 159.242 ns/op
# Warmup Iteration   3: 159.140 ns/op
# Warmup Iteration   4: 159.135 ns/op
# Warmup Iteration   5: 159.187 ns/op
Iteration   1: 159.155 ns/op
Iteration   2: 159.214 ns/op
Iteration   3: 159.120 ns/op
Iteration   4: 159.115 ns/op
Iteration   5: 159.202 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_native_method_calls":
  159.756 ±(99.9%) 1.326 ns/op [Average]
  (min, avg, max) = (159.115, 159.756, 162.331), stdev = 1.241
  CI (99.9%): [158.430, 161.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_user_defined_method_calls
# Parameters: (circleRadius = 42, iterations = 32768)

# Run progress: 66.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 7045.902 ns/op
# Warmup Iteration   2: 6938.539 ns/op
# Warmup Iteration   3: 6880.983 ns/op
# Warmup Iteration   4: 7073.604 ns/op
# Warmup Iteration   5: 6895.929 ns/op
Iteration   1: 6898.424 ns/op
Iteration   2: 6864.875 ns/op
Iteration   3: 6851.077 ns/op
Iteration   4: 6846.906 ns/op
Iteration   5: 6850.390 ns/op

# Run progress: 77.78% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 7005.989 ns/op
# Warmup Iteration   2: 6854.335 ns/op
# Warmup Iteration   3: 6847.168 ns/op
# Warmup Iteration   4: 6851.246 ns/op
# Warmup Iteration   5: 6847.491 ns/op
Iteration   1: 6852.815 ns/op
Iteration   2: 6847.840 ns/op
Iteration   3: 6853.010 ns/op
Iteration   4: 6847.178 ns/op
Iteration   5: 6852.433 ns/op

# Run progress: 88.89% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 6997.956 ns/op
# Warmup Iteration   2: 6852.904 ns/op
# Warmup Iteration   3: 6846.072 ns/op
# Warmup Iteration   4: 6851.214 ns/op
# Warmup Iteration   5: 6848.367 ns/op
Iteration   1: 6850.064 ns/op
Iteration   2: 6846.678 ns/op
Iteration   3: 6851.536 ns/op
Iteration   4: 6847.505 ns/op
Iteration   5: 6850.829 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DeadCodeEliminationBenchmark.dead_user_defined_method_calls":
  6854.104 ±(99.9%) 13.940 ns/op [Average]
  (min, avg, max) = (6846.678, 6854.104, 6898.424), stdev = 13.039
  CI (99.9%): [6840.164, 6868.044] (assumes normal distribution)


# Run complete. Total time: 00:15:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (circleRadius)  (iterations)  Mode  Cnt     Score    Error  Units
DeadCodeEliminationBenchmark.baseline                                    42         32768  avgt   15     1.013 ±  0.001  ns/op
DeadCodeEliminationBenchmark.dead_native_method_calls                    42         32768  avgt   15   159.756 ±  1.326  ns/op
DeadCodeEliminationBenchmark.dead_user_defined_method_calls              42         32768  avgt   15  6854.104 ± 13.940  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/DeadCodeEliminationBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*CanonicalizeInductionVariableBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/CanonicalizeInductionVariableBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.baseline

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 8119.513 us/op
# Warmup Iteration   2: 6600.370 us/op
# Warmup Iteration   3: 6609.157 us/op
# Warmup Iteration   4: 6621.162 us/op
# Warmup Iteration   5: 6634.780 us/op
Iteration   1: 6705.002 us/op
Iteration   2: 6681.852 us/op
Iteration   3: 6633.032 us/op
Iteration   4: 6631.108 us/op
Iteration   5: 6632.309 us/op

# Run progress: 16.67% complete, ETA 00:08:22
# Fork: 2 of 3
# Warmup Iteration   1: 7101.864 us/op
# Warmup Iteration   2: 7419.043 us/op
# Warmup Iteration   3: 6728.757 us/op
# Warmup Iteration   4: 6761.970 us/op
# Warmup Iteration   5: 6774.360 us/op
Iteration   1: 6625.670 us/op
Iteration   2: 6625.770 us/op
Iteration   3: 6628.956 us/op
Iteration   4: 6633.225 us/op
Iteration   5: 6635.430 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 7780.250 us/op
# Warmup Iteration   2: 6729.075 us/op
# Warmup Iteration   3: 7551.718 us/op
# Warmup Iteration   4: 7494.199 us/op
# Warmup Iteration   5: 7463.870 us/op
Iteration   1: 7459.590 us/op
Iteration   2: 7432.781 us/op
Iteration   3: 7416.804 us/op
Iteration   4: 7414.425 us/op
Iteration   5: 7403.135 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.baseline":
  6903.939 ±(99.9%) 408.843 us/op [Average]
  (min, avg, max) = (6625.670, 6903.939, 7459.590), stdev = 382.432
  CI (99.9%): [6495.096, 7312.783] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.canonicalize_induction_var

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 7524.991 us/op
# Warmup Iteration   2: 7169.446 us/op
# Warmup Iteration   3: 7172.311 us/op
# Warmup Iteration   4: 7187.671 us/op
# Warmup Iteration   5: 7183.550 us/op
Iteration   1: 7193.349 us/op
Iteration   2: 7200.054 us/op
Iteration   3: 7216.484 us/op
Iteration   4: 7213.021 us/op
Iteration   5: 7203.653 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 8166.730 us/op
# Warmup Iteration   2: 7777.140 us/op
# Warmup Iteration   3: 7745.479 us/op
# Warmup Iteration   4: 7725.201 us/op
# Warmup Iteration   5: 7709.183 us/op
Iteration   1: 7698.683 us/op
Iteration   2: 7709.897 us/op
Iteration   3: 7712.280 us/op
Iteration   4: 7710.959 us/op
Iteration   5: 7715.893 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 8137.459 us/op
# Warmup Iteration   2: 7908.004 us/op
# Warmup Iteration   3: 7839.985 us/op
# Warmup Iteration   4: 7833.831 us/op
# Warmup Iteration   5: 7823.234 us/op
Iteration   1: 7818.848 us/op
Iteration   2: 7849.534 us/op
Iteration   3: 7913.142 us/op
Iteration   4: 7846.634 us/op
Iteration   5: 7836.826 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.CanonicalizeInductionVariableBenchmark.canonicalize_induction_var":
  7589.284 ±(99.9%) 308.103 us/op [Average]
  (min, avg, max) = (7193.349, 7589.284, 7913.142), stdev = 288.200
  CI (99.9%): [7281.181, 7897.387] (assumes normal distribution)


# Run complete. Total time: 00:10:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt     Score     Error  Units
CanonicalizeInductionVariableBenchmark.baseline                    avgt   15  6903.939 ± 408.843  us/op
CanonicalizeInductionVariableBenchmark.canonicalize_induction_var  avgt   15  7589.284 ± 308.103  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/CanonicalizeInductionVariableBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LoopFusionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LoopFusionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.baseline
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 432.754 us/op
# Warmup Iteration   2: 409.448 us/op
# Warmup Iteration   3: 409.178 us/op
# Warmup Iteration   4: 409.140 us/op
# Warmup Iteration   5: 416.388 us/op
Iteration   1: 410.885 us/op
Iteration   2: 412.002 us/op
Iteration   3: 411.751 us/op
Iteration   4: 410.638 us/op
Iteration   5: 411.473 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 432.802 us/op
# Warmup Iteration   2: 406.416 us/op
# Warmup Iteration   3: 406.413 us/op
# Warmup Iteration   4: 406.434 us/op
# Warmup Iteration   5: 413.445 us/op
Iteration   1: 406.296 us/op
Iteration   2: 406.528 us/op
Iteration   3: 407.270 us/op
Iteration   4: 406.573 us/op
Iteration   5: 406.067 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 491.191 us/op
# Warmup Iteration   2: 461.258 us/op
# Warmup Iteration   3: 458.105 us/op
# Warmup Iteration   4: 457.145 us/op
# Warmup Iteration   5: 455.392 us/op
Iteration   1: 469.240 us/op
Iteration   2: 453.698 us/op
Iteration   3: 453.329 us/op
Iteration   4: 453.186 us/op
Iteration   5: 453.351 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.baseline":
  424.819 ±(99.9%) 25.262 us/op [Average]
  (min, avg, max) = (406.067, 424.819, 469.240), stdev = 23.630
  CI (99.9%): [399.557, 450.081] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.loop_fusion
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 773.510 us/op
# Warmup Iteration   2: 739.023 us/op
# Warmup Iteration   3: 741.089 us/op
# Warmup Iteration   4: 743.095 us/op
# Warmup Iteration   5: 746.470 us/op
Iteration   1: 743.573 us/op
Iteration   2: 742.408 us/op
Iteration   3: 742.894 us/op
Iteration   4: 739.472 us/op
Iteration   5: 738.318 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 871.466 us/op
# Warmup Iteration   2: 846.200 us/op
# Warmup Iteration   3: 838.084 us/op
# Warmup Iteration   4: 833.213 us/op
# Warmup Iteration   5: 831.253 us/op
Iteration   1: 832.269 us/op
Iteration   2: 829.872 us/op
Iteration   3: 831.041 us/op
Iteration   4: 830.570 us/op
Iteration   5: 826.523 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 779.322 us/op
# Warmup Iteration   2: 751.920 us/op
# Warmup Iteration   3: 753.612 us/op
# Warmup Iteration   4: 755.555 us/op
# Warmup Iteration   5: 756.677 us/op
Iteration   1: 759.691 us/op
Iteration   2: 759.372 us/op
Iteration   3: 759.366 us/op
Iteration   4: 756.864 us/op
Iteration   5: 756.231 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopFusionBenchmark.loop_fusion":
  776.564 ±(99.9%) 42.600 us/op [Average]
  (min, avg, max) = (738.318, 776.564, 832.269), stdev = 39.848
  CI (99.9%): [733.964, 819.164] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                        (size)  Mode  Cnt    Score    Error  Units
LoopFusionBenchmark.baseline     262144  avgt   15  424.819 ± 25.262  us/op
LoopFusionBenchmark.loop_fusion  262144  avgt   15  776.564 ± 42.600  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/LoopFusionBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LoopInterchangeBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LoopInterchangeBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.loop
# Parameters: (size = 512)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 425.147 us/op
# Warmup Iteration   2: 431.485 us/op
# Warmup Iteration   3: 378.862 us/op
# Warmup Iteration   4: 381.604 us/op
# Warmup Iteration   5: 383.061 us/op
Iteration   1: 383.020 us/op
Iteration   2: 384.146 us/op
Iteration   3: 383.524 us/op
Iteration   4: 384.531 us/op
Iteration   5: 384.933 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 455.712 us/op
# Warmup Iteration   2: 430.737 us/op
# Warmup Iteration   3: 426.924 us/op
# Warmup Iteration   4: 425.081 us/op
# Warmup Iteration   5: 423.922 us/op
Iteration   1: 424.641 us/op
Iteration   2: 423.280 us/op
Iteration   3: 423.824 us/op
Iteration   4: 423.446 us/op
Iteration   5: 422.674 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 433.467 us/op
# Warmup Iteration   2: 367.396 us/op
# Warmup Iteration   3: 369.422 us/op
# Warmup Iteration   4: 371.127 us/op
# Warmup Iteration   5: 371.361 us/op
Iteration   1: 372.495 us/op
Iteration   2: 373.315 us/op
Iteration   3: 372.438 us/op
Iteration   4: 374.154 us/op
Iteration   5: 374.638 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.loop":
  393.671 ±(99.9%) 23.899 us/op [Average]
  (min, avg, max) = (372.438, 393.671, 424.641), stdev = 22.355
  CI (99.9%): [369.771, 417.570] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.manual_interchange
# Parameters: (size = 512)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 175.568 us/op
# Warmup Iteration   2: 145.196 us/op
# Warmup Iteration   3: 144.732 us/op
# Warmup Iteration   4: 145.839 us/op
# Warmup Iteration   5: 145.895 us/op
Iteration   1: 146.261 us/op
Iteration   2: 146.011 us/op
Iteration   3: 145.846 us/op
Iteration   4: 145.849 us/op
Iteration   5: 145.758 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 171.779 us/op
# Warmup Iteration   2: 161.531 us/op
# Warmup Iteration   3: 159.803 us/op
# Warmup Iteration   4: 159.522 us/op
# Warmup Iteration   5: 159.394 us/op
Iteration   1: 158.930 us/op
Iteration   2: 158.576 us/op
Iteration   3: 158.353 us/op
Iteration   4: 158.469 us/op
Iteration   5: 158.337 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 152.134 us/op
# Warmup Iteration   2: 143.382 us/op
# Warmup Iteration   3: 142.996 us/op
# Warmup Iteration   4: 143.077 us/op
# Warmup Iteration   5: 143.082 us/op
Iteration   1: 143.093 us/op
Iteration   2: 143.115 us/op
Iteration   3: 143.298 us/op
Iteration   4: 143.284 us/op
Iteration   5: 143.521 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInterchangeBenchmark.manual_interchange":
  149.247 ±(99.9%) 7.369 us/op [Average]
  (min, avg, max) = (143.093, 149.247, 158.930), stdev = 6.893
  CI (99.9%): [141.877, 156.616] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (size)  Mode  Cnt    Score    Error  Units
LoopInterchangeBenchmark.loop                   512  avgt   15  393.671 ± 23.899  us/op
LoopInterchangeBenchmark.manual_interchange     512  avgt   15  149.247 ±  7.369  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/LoopInterchangeBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LoopInvariantCodeMotionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LoopInvariantCodeMotionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.loop_with_invariant_code
# Parameters: (iterations = 16384, value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 4574.172 us/op
# Warmup Iteration   2: 4464.971 us/op
# Warmup Iteration   3: 4406.435 us/op
# Warmup Iteration   4: 4377.943 us/op
# Warmup Iteration   5: 4369.295 us/op
Iteration   1: 4366.198 us/op
Iteration   2: 4347.351 us/op
Iteration   3: 4347.891 us/op
Iteration   4: 4348.835 us/op
Iteration   5: 4340.583 us/op

# Run progress: 16.67% complete, ETA 00:08:22
# Fork: 2 of 3
# Warmup Iteration   1: 4167.572 us/op
# Warmup Iteration   2: 4121.658 us/op
# Warmup Iteration   3: 4119.609 us/op
# Warmup Iteration   4: 4117.448 us/op
# Warmup Iteration   5: 4118.710 us/op
Iteration   1: 4118.345 us/op
Iteration   2: 4118.466 us/op
Iteration   3: 4121.730 us/op
Iteration   4: 4119.301 us/op
Iteration   5: 4118.229 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 4445.073 us/op
# Warmup Iteration   2: 4400.493 us/op
# Warmup Iteration   3: 4373.818 us/op
# Warmup Iteration   4: 4362.749 us/op
# Warmup Iteration   5: 4347.160 us/op
Iteration   1: 4346.066 us/op
Iteration   2: 4337.350 us/op
Iteration   3: 4338.666 us/op
Iteration   4: 4339.357 us/op
Iteration   5: 4345.915 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.loop_with_invariant_code":
  4270.286 ±(99.9%) 118.427 us/op [Average]
  (min, avg, max) = (4118.229, 4270.286, 4366.198), stdev = 110.777
  CI (99.9%): [4151.859, 4388.713] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.manual_hoisting_and_sinking
# Parameters: (iterations = 16384, value = 42)

# Run progress: 50.00% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 907.051 us/op
# Warmup Iteration   2: 875.380 us/op
# Warmup Iteration   3: 874.868 us/op
# Warmup Iteration   4: 874.780 us/op
# Warmup Iteration   5: 874.989 us/op
Iteration   1: 874.711 us/op
Iteration   2: 874.770 us/op
Iteration   3: 875.004 us/op
Iteration   4: 874.857 us/op
Iteration   5: 874.824 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 892.301 us/op
# Warmup Iteration   2: 875.487 us/op
# Warmup Iteration   3: 874.676 us/op
# Warmup Iteration   4: 874.757 us/op
# Warmup Iteration   5: 874.575 us/op
Iteration   1: 874.474 us/op
Iteration   2: 875.836 us/op
Iteration   3: 874.469 us/op
Iteration   4: 875.096 us/op
Iteration   5: 874.857 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 928.952 us/op
# Warmup Iteration   2: 910.809 us/op
# Warmup Iteration   3: 905.216 us/op
# Warmup Iteration   4: 903.789 us/op
# Warmup Iteration   5: 901.404 us/op
Iteration   1: 900.343 us/op
Iteration   2: 907.160 us/op
Iteration   3: 891.859 us/op
Iteration   4: 876.329 us/op
Iteration   5: 878.364 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopInvariantCodeMotionBenchmark.manual_hoisting_and_sinking":
  880.197 ±(99.9%) 11.322 us/op [Average]
  (min, avg, max) = (874.469, 880.197, 907.160), stdev = 10.590
  CI (99.9%): [868.875, 891.519] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (iterations)  (value)  Mode  Cnt     Score     Error  Units
LoopInvariantCodeMotionBenchmark.loop_with_invariant_code            16384       42  avgt   15  4270.286 ± 118.427  us/op
LoopInvariantCodeMotionBenchmark.manual_hoisting_and_sinking         16384       42  avgt   15   880.197 ±  11.322  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/LoopInvariantCodeMotionBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LoopReductionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LoopReductionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.baseline
# Parameters: (iterations = 1048576, offset = 128)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.166 ns/op
# Warmup Iteration   2: 3.688 ns/op
# Warmup Iteration   3: 3.621 ns/op
# Warmup Iteration   4: 3.615 ns/op
# Warmup Iteration   5: 3.612 ns/op
Iteration   1: 3.623 ns/op
Iteration   2: 3.620 ns/op
Iteration   3: 3.620 ns/op
Iteration   4: 3.623 ns/op
Iteration   5: 3.613 ns/op

# Run progress: 16.67% complete, ETA 00:08:22
# Fork: 2 of 3
# Warmup Iteration   1: 4.261 ns/op
# Warmup Iteration   2: 4.114 ns/op
# Warmup Iteration   3: 4.074 ns/op
# Warmup Iteration   4: 4.046 ns/op
# Warmup Iteration   5: 4.034 ns/op
Iteration   1: 4.027 ns/op
Iteration   2: 3.552 ns/op
Iteration   3: 3.570 ns/op
Iteration   4: 3.577 ns/op
Iteration   5: 3.592 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.897 ns/op
# Warmup Iteration   2: 3.711 ns/op
# Warmup Iteration   3: 3.692 ns/op
# Warmup Iteration   4: 3.690 ns/op
# Warmup Iteration   5: 3.687 ns/op
Iteration   1: 3.692 ns/op
Iteration   2: 3.686 ns/op
Iteration   3: 3.685 ns/op
Iteration   4: 3.681 ns/op
Iteration   5: 3.681 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.baseline":
  3.656 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (3.552, 3.656, 4.027), stdev = 0.113
  CI (99.9%): [3.536, 3.776] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.loop_reduction
# Parameters: (iterations = 1048576, offset = 128)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 18935.607 ns/op
# Warmup Iteration   2: 17712.339 ns/op
# Warmup Iteration   3: 17638.240 ns/op
# Warmup Iteration   4: 17325.647 ns/op
# Warmup Iteration   5: 17401.230 ns/op
Iteration   1: 17282.308 ns/op
Iteration   2: 16665.610 ns/op
Iteration   3: 16657.808 ns/op
Iteration   4: 16660.992 ns/op
Iteration   5: 16658.860 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 17669.272 ns/op
# Warmup Iteration   2: 16676.215 ns/op
# Warmup Iteration   3: 16658.140 ns/op
# Warmup Iteration   4: 16661.873 ns/op
# Warmup Iteration   5: 16663.409 ns/op
Iteration   1: 16665.844 ns/op
Iteration   2: 16669.874 ns/op
Iteration   3: 16680.887 ns/op
Iteration   4: 16672.216 ns/op
Iteration   5: 16662.374 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 18937.496 ns/op
# Warmup Iteration   2: 18283.962 ns/op
# Warmup Iteration   3: 17254.590 ns/op
# Warmup Iteration   4: 17209.091 ns/op
# Warmup Iteration   5: 17192.585 ns/op
Iteration   1: 17229.906 ns/op
Iteration   2: 17185.784 ns/op
Iteration   3: 16654.147 ns/op
Iteration   4: 16667.079 ns/op
Iteration   5: 16670.860 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopReductionBenchmark.loop_reduction":
  16778.970 ±(99.9%) 251.881 ns/op [Average]
  (min, avg, max) = (16654.147, 16778.970, 17282.308), stdev = 235.610
  CI (99.9%): [16527.089, 17030.851] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (iterations)  (offset)  Mode  Cnt      Score     Error  Units
LoopReductionBenchmark.baseline             1048576       128  avgt   15      3.656 ±   0.120  ns/op
LoopReductionBenchmark.loop_reduction       1048576       128  avgt   15  16778.970 ± 251.881  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/LoopReductionBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LoopUnswitchBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LoopUnswitchBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.baseline
# Parameters: (magicNumber = 64, size = 262144)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 631.459 us/op
# Warmup Iteration   2: 580.190 us/op
# Warmup Iteration   3: 576.645 us/op
# Warmup Iteration   4: 577.262 us/op
# Warmup Iteration   5: 576.009 us/op
Iteration   1: 516.653 us/op
Iteration   2: 527.762 us/op
Iteration   3: 533.943 us/op
Iteration   4: 536.053 us/op
Iteration   5: 599.130 us/op

# Run progress: 16.67% complete, ETA 00:08:22
# Fork: 2 of 3
# Warmup Iteration   1: 591.329 us/op
# Warmup Iteration   2: 559.769 us/op
# Warmup Iteration   3: 556.012 us/op
# Warmup Iteration   4: 553.370 us/op
# Warmup Iteration   5: 552.907 us/op
Iteration   1: 552.146 us/op
Iteration   2: 562.770 us/op
Iteration   3: 564.560 us/op
Iteration   4: 564.826 us/op
Iteration   5: 563.770 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 531.774 us/op
# Warmup Iteration   2: 555.459 us/op
# Warmup Iteration   3: 552.036 us/op
# Warmup Iteration   4: 550.127 us/op
# Warmup Iteration   5: 550.021 us/op
Iteration   1: 549.659 us/op
Iteration   2: 558.383 us/op
Iteration   3: 560.353 us/op
Iteration   4: 560.702 us/op
Iteration   5: 559.868 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.baseline":
  554.039 ±(99.9%) 21.009 us/op [Average]
  (min, avg, max) = (516.653, 554.039, 599.130), stdev = 19.652
  CI (99.9%): [533.030, 575.047] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.loop_unswitch
# Parameters: (magicNumber = 64, size = 262144)

# Run progress: 50.00% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 1400.034 us/op
# Warmup Iteration   2: 1299.643 us/op
# Warmup Iteration   3: 1184.641 us/op
# Warmup Iteration   4: 1194.897 us/op
# Warmup Iteration   5: 1199.708 us/op
Iteration   1: 1200.611 us/op
Iteration   2: 1200.184 us/op
Iteration   3: 1201.388 us/op
Iteration   4: 1203.111 us/op
Iteration   5: 1203.292 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 1280.559 us/op
# Warmup Iteration   2: 1321.537 us/op
# Warmup Iteration   3: 1313.508 us/op
# Warmup Iteration   4: 1305.431 us/op
# Warmup Iteration   5: 1302.136 us/op
Iteration   1: 1301.402 us/op
Iteration   2: 1301.331 us/op
Iteration   3: 1298.791 us/op
Iteration   4: 1298.631 us/op
Iteration   5: 1297.594 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 1227.193 us/op
# Warmup Iteration   2: 1345.236 us/op
# Warmup Iteration   3: 1331.101 us/op
# Warmup Iteration   4: 1327.168 us/op
# Warmup Iteration   5: 1325.571 us/op
Iteration   1: 1324.098 us/op
Iteration   2: 1322.900 us/op
Iteration   3: 1321.924 us/op
Iteration   4: 1320.566 us/op
Iteration   5: 1324.535 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.LoopUnswitchBenchmark.loop_unswitch":
  1274.691 ±(99.9%) 58.080 us/op [Average]
  (min, avg, max) = (1200.184, 1274.691, 1324.535), stdev = 54.328
  CI (99.9%): [1216.611, 1332.770] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            (magicNumber)  (size)  Mode  Cnt     Score    Error  Units
LoopUnswitchBenchmark.baseline                  64  262144  avgt   15   554.039 ± 21.009  us/op
LoopUnswitchBenchmark.loop_unswitch             64  262144  avgt   15  1274.691 ± 58.080  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/LoopUnswitchBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ScalarEvolutionAndLoopOptimizationBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ScalarEvolutionAndLoopOptimizationBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.reduction_formula
# Parameters: (size = 16384)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.821 ns/op
# Warmup Iteration   2: 3.440 ns/op
# Warmup Iteration   3: 3.000 ns/op
# Warmup Iteration   4: 3.017 ns/op
# Warmup Iteration   5: 3.021 ns/op
Iteration   1: 3.020 ns/op
Iteration   2: 3.020 ns/op
Iteration   3: 3.022 ns/op
Iteration   4: 3.034 ns/op
Iteration   5: 3.031 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.828 ns/op
# Warmup Iteration   2: 3.522 ns/op
# Warmup Iteration   3: 3.389 ns/op
# Warmup Iteration   4: 3.383 ns/op
# Warmup Iteration   5: 3.378 ns/op
Iteration   1: 3.377 ns/op
Iteration   2: 3.297 ns/op
Iteration   3: 3.300 ns/op
Iteration   4: 3.302 ns/op
Iteration   5: 3.293 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.312 ns/op
# Warmup Iteration   2: 3.112 ns/op
# Warmup Iteration   3: 3.017 ns/op
# Warmup Iteration   4: 3.020 ns/op
# Warmup Iteration   5: 3.023 ns/op
Iteration   1: 3.024 ns/op
Iteration   2: 3.025 ns/op
Iteration   3: 3.029 ns/op
Iteration   4: 3.036 ns/op
Iteration   5: 3.033 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.reduction_formula":
  3.123 ±(99.9%) 0.151 ns/op [Average]
  (min, avg, max) = (3.020, 3.123, 3.377), stdev = 0.141
  CI (99.9%): [2.972, 3.274] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.sum_from_0_to_N
# Parameters: (size = 16384)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 4384.654 ns/op
# Warmup Iteration   2: 4161.188 ns/op
# Warmup Iteration   3: 4157.710 ns/op
# Warmup Iteration   4: 4157.535 ns/op
# Warmup Iteration   5: 4158.526 ns/op
Iteration   1: 4158.610 ns/op
Iteration   2: 4157.440 ns/op
Iteration   3: 4157.313 ns/op
Iteration   4: 4157.487 ns/op
Iteration   5: 4157.779 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 4407.858 ns/op
# Warmup Iteration   2: 4160.052 ns/op
# Warmup Iteration   3: 4157.714 ns/op
# Warmup Iteration   4: 4165.016 ns/op
# Warmup Iteration   5: 4158.591 ns/op
Iteration   1: 4158.444 ns/op
Iteration   2: 4159.664 ns/op
Iteration   3: 4159.022 ns/op
Iteration   4: 4158.531 ns/op
Iteration   5: 4157.647 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 4395.537 ns/op
# Warmup Iteration   2: 4159.934 ns/op
# Warmup Iteration   3: 4157.529 ns/op
# Warmup Iteration   4: 4157.360 ns/op
# Warmup Iteration   5: 4156.923 ns/op
Iteration   1: 4156.900 ns/op
Iteration   2: 4156.895 ns/op
Iteration   3: 4157.362 ns/op
Iteration   4: 4158.143 ns/op
Iteration   5: 4158.679 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarEvolutionAndLoopOptimizationBenchmark.sum_from_0_to_N":
  4157.994 ±(99.9%) 0.867 ns/op [Average]
  (min, avg, max) = (4156.895, 4157.994, 4159.664), stdev = 0.811
  CI (99.9%): [4157.127, 4158.861] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (size)  Mode  Cnt     Score   Error  Units
ScalarEvolutionAndLoopOptimizationBenchmark.reduction_formula   16384  avgt   15     3.123 ± 0.151  ns/op
ScalarEvolutionAndLoopOptimizationBenchmark.sum_from_0_to_N     16384  avgt   15  4157.994 ± 0.867  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/ScalarEvolutionAndLoopOptimizationBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*StraightenCodeBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/StraightenCodeBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_int
# Parameters: (size = 65536)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 210.513 us/op
# Warmup Iteration   2: 175.661 us/op
# Warmup Iteration   3: 174.093 us/op
# Warmup Iteration   4: 173.453 us/op
# Warmup Iteration   5: 173.515 us/op
Iteration   1: 173.616 us/op
Iteration   2: 173.812 us/op
Iteration   3: 173.576 us/op
Iteration   4: 173.730 us/op
Iteration   5: 173.961 us/op

# Run progress: 5.56% complete, ETA 00:28:27
# Fork: 2 of 3
# Warmup Iteration   1: 181.678 us/op
# Warmup Iteration   2: 176.243 us/op
# Warmup Iteration   3: 176.398 us/op
# Warmup Iteration   4: 175.389 us/op
# Warmup Iteration   5: 175.411 us/op
Iteration   1: 175.388 us/op
Iteration   2: 175.685 us/op
Iteration   3: 175.713 us/op
Iteration   4: 175.766 us/op
Iteration   5: 175.289 us/op

# Run progress: 11.11% complete, ETA 00:26:48
# Fork: 3 of 3
# Warmup Iteration   1: 203.391 us/op
# Warmup Iteration   2: 175.784 us/op
# Warmup Iteration   3: 174.869 us/op
# Warmup Iteration   4: 175.043 us/op
# Warmup Iteration   5: 175.174 us/op
Iteration   1: 175.179 us/op
Iteration   2: 175.229 us/op
Iteration   3: 175.132 us/op
Iteration   4: 175.645 us/op
Iteration   5: 175.547 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_int":
  174.885 ±(99.9%) 0.924 us/op [Average]
  (min, avg, max) = (173.576, 174.885, 175.766), stdev = 0.865
  CI (99.9%): [173.960, 175.809] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_long
# Parameters: (size = 65536)

# Run progress: 16.67% complete, ETA 00:25:06
# Fork: 1 of 3
# Warmup Iteration   1: 184.394 us/op
# Warmup Iteration   2: 174.386 us/op
# Warmup Iteration   3: 174.268 us/op
# Warmup Iteration   4: 178.415 us/op
# Warmup Iteration   5: 178.436 us/op
Iteration   1: 178.183 us/op
Iteration   2: 178.488 us/op
Iteration   3: 178.159 us/op
Iteration   4: 178.213 us/op
Iteration   5: 178.286 us/op

# Run progress: 22.22% complete, ETA 00:23:25
# Fork: 2 of 3
# Warmup Iteration   1: 191.171 us/op
# Warmup Iteration   2: 179.817 us/op
# Warmup Iteration   3: 181.995 us/op
# Warmup Iteration   4: 181.660 us/op
# Warmup Iteration   5: 181.238 us/op
Iteration   1: 181.732 us/op
Iteration   2: 182.486 us/op
Iteration   3: 184.777 us/op
Iteration   4: 184.019 us/op
Iteration   5: 183.755 us/op

# Run progress: 27.78% complete, ETA 00:21:44
# Fork: 3 of 3
# Warmup Iteration   1: 212.846 us/op
# Warmup Iteration   2: 176.396 us/op
# Warmup Iteration   3: 180.915 us/op
# Warmup Iteration   4: 179.620 us/op
# Warmup Iteration   5: 178.506 us/op
Iteration   1: 178.957 us/op
Iteration   2: 179.449 us/op
Iteration   3: 179.644 us/op
Iteration   4: 179.163 us/op
Iteration   5: 179.183 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_1_long":
  180.300 ±(99.9%) 2.538 us/op [Average]
  (min, avg, max) = (178.159, 180.300, 184.777), stdev = 2.374
  CI (99.9%): [177.762, 182.838] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_int
# Parameters: (size = 65536)

# Run progress: 33.33% complete, ETA 00:20:04
# Fork: 1 of 3
# Warmup Iteration   1: 293.319 us/op
# Warmup Iteration   2: 275.543 us/op
# Warmup Iteration   3: 272.944 us/op
# Warmup Iteration   4: 267.952 us/op
# Warmup Iteration   5: 267.432 us/op
Iteration   1: 267.527 us/op
Iteration   2: 267.418 us/op
Iteration   3: 267.267 us/op
Iteration   4: 266.494 us/op
Iteration   5: 266.546 us/op

# Run progress: 38.89% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 274.652 us/op
# Warmup Iteration   2: 254.016 us/op
# Warmup Iteration   3: 269.619 us/op
# Warmup Iteration   4: 267.811 us/op
# Warmup Iteration   5: 266.260 us/op
Iteration   1: 266.796 us/op
Iteration   2: 266.726 us/op
Iteration   3: 266.655 us/op
Iteration   4: 265.945 us/op
Iteration   5: 266.367 us/op

# Run progress: 44.44% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 278.363 us/op
# Warmup Iteration   2: 251.947 us/op
# Warmup Iteration   3: 262.596 us/op
# Warmup Iteration   4: 261.698 us/op
# Warmup Iteration   5: 259.055 us/op
Iteration   1: 258.573 us/op
Iteration   2: 258.594 us/op
Iteration   3: 258.629 us/op
Iteration   4: 258.760 us/op
Iteration   5: 258.410 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_int":
  264.047 ±(99.9%) 4.289 us/op [Average]
  (min, avg, max) = (258.410, 264.047, 267.527), stdev = 4.012
  CI (99.9%): [259.758, 268.337] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_long
# Parameters: (size = 65536)

# Run progress: 50.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 277.067 us/op
# Warmup Iteration   2: 264.118 us/op
# Warmup Iteration   3: 264.506 us/op
# Warmup Iteration   4: 252.270 us/op
# Warmup Iteration   5: 252.081 us/op
Iteration   1: 253.611 us/op
Iteration   2: 251.847 us/op
Iteration   3: 252.372 us/op
Iteration   4: 251.836 us/op
Iteration   5: 252.130 us/op

# Run progress: 55.56% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 283.370 us/op
# Warmup Iteration   2: 279.661 us/op
# Warmup Iteration   3: 279.257 us/op
# Warmup Iteration   4: 269.885 us/op
# Warmup Iteration   5: 252.380 us/op
Iteration   1: 252.194 us/op
Iteration   2: 251.885 us/op
Iteration   3: 252.240 us/op
Iteration   4: 252.896 us/op
Iteration   5: 251.495 us/op

# Run progress: 61.11% complete, ETA 00:11:45
# Fork: 3 of 3
# Warmup Iteration   1: 290.666 us/op
# Warmup Iteration   2: 274.354 us/op
# Warmup Iteration   3: 273.775 us/op
# Warmup Iteration   4: 289.113 us/op
# Warmup Iteration   5: 270.110 us/op
Iteration   1: 269.786 us/op
Iteration   2: 269.701 us/op
Iteration   3: 268.824 us/op
Iteration   4: 268.529 us/op
Iteration   5: 268.803 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_2_long":
  257.877 ±(99.9%) 8.826 us/op [Average]
  (min, avg, max) = (251.495, 257.877, 269.786), stdev = 8.256
  CI (99.9%): [249.051, 266.703] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_int
# Parameters: (size = 65536)

# Run progress: 66.67% complete, ETA 00:10:04
# Fork: 1 of 3
# Warmup Iteration   1: 245.912 us/op
# Warmup Iteration   2: 234.250 us/op
# Warmup Iteration   3: 239.398 us/op
# Warmup Iteration   4: 240.712 us/op
# Warmup Iteration   5: 240.888 us/op
Iteration   1: 240.290 us/op
Iteration   2: 240.254 us/op
Iteration   3: 240.334 us/op
Iteration   4: 240.568 us/op
Iteration   5: 241.580 us/op

# Run progress: 72.22% complete, ETA 00:08:23
# Fork: 2 of 3
# Warmup Iteration   1: 248.463 us/op
# Warmup Iteration   2: 252.307 us/op
# Warmup Iteration   3: 255.927 us/op
# Warmup Iteration   4: 260.828 us/op
# Warmup Iteration   5: 260.140 us/op
Iteration   1: 260.956 us/op
Iteration   2: 242.610 us/op
Iteration   3: 242.755 us/op
Iteration   4: 242.733 us/op
Iteration   5: 242.798 us/op

# Run progress: 77.78% complete, ETA 00:06:42
# Fork: 3 of 3
# Warmup Iteration   1: 247.137 us/op
# Warmup Iteration   2: 249.170 us/op
# Warmup Iteration   3: 253.482 us/op
# Warmup Iteration   4: 258.105 us/op
# Warmup Iteration   5: 257.398 us/op
Iteration   1: 257.010 us/op
Iteration   2: 259.515 us/op
Iteration   3: 261.600 us/op
Iteration   4: 256.108 us/op
Iteration   5: 256.131 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_int":
  248.350 ±(99.9%) 9.401 us/op [Average]
  (min, avg, max) = (240.254, 248.350, 261.600), stdev = 8.794
  CI (99.9%): [238.948, 257.751] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_long
# Parameters: (size = 65536)

# Run progress: 83.33% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 264.018 us/op
# Warmup Iteration   2: 250.488 us/op
# Warmup Iteration   3: 251.090 us/op
# Warmup Iteration   4: 252.027 us/op
# Warmup Iteration   5: 251.635 us/op
Iteration   1: 251.525 us/op
Iteration   2: 251.344 us/op
Iteration   3: 251.686 us/op
Iteration   4: 251.623 us/op
Iteration   5: 251.639 us/op

# Run progress: 88.89% complete, ETA 00:03:21
# Fork: 2 of 3
# Warmup Iteration   1: 264.690 us/op
# Warmup Iteration   2: 232.536 us/op
# Warmup Iteration   3: 233.440 us/op
# Warmup Iteration   4: 239.808 us/op
# Warmup Iteration   5: 263.818 us/op
Iteration   1: 262.219 us/op
Iteration   2: 261.364 us/op
Iteration   3: 260.400 us/op
Iteration   4: 260.350 us/op
Iteration   5: 259.936 us/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 244.968 us/op
# Warmup Iteration   2: 232.395 us/op
# Warmup Iteration   3: 234.850 us/op
# Warmup Iteration   4: 235.179 us/op
# Warmup Iteration   5: 235.177 us/op
Iteration   1: 235.192 us/op
Iteration   2: 235.335 us/op
Iteration   3: 235.271 us/op
Iteration   4: 235.234 us/op
Iteration   5: 235.195 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.StraightenCodeBenchmark.straighten_3_long":
  249.221 ±(99.9%) 11.725 us/op [Average]
  (min, avg, max) = (235.192, 249.221, 262.219), stdev = 10.968
  CI (99.9%): [237.495, 260.946] (assumes normal distribution)


# Run complete. Total time: 00:30:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  (size)  Mode  Cnt    Score    Error  Units
StraightenCodeBenchmark.straighten_1_int    65536  avgt   15  174.885 ±  0.924  us/op
StraightenCodeBenchmark.straighten_1_long   65536  avgt   15  180.300 ±  2.538  us/op
StraightenCodeBenchmark.straighten_2_int    65536  avgt   15  264.047 ±  4.289  us/op
StraightenCodeBenchmark.straighten_2_long   65536  avgt   15  257.877 ±  8.826  us/op
StraightenCodeBenchmark.straighten_3_int    65536  avgt   15  248.350 ±  9.401  us/op
StraightenCodeBenchmark.straighten_3_long   65536  avgt   15  249.221 ± 11.725  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/StraightenCodeBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*StrengthReductionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/StrengthReductionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.addition
# Parameters: (heavyComputation = true, value = 179426549)

# Run progress: 0.00% complete, ETA 00:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 11.055 ns/op
# Warmup Iteration   2: 10.663 ns/op
# Warmup Iteration   3: 10.525 ns/op
# Warmup Iteration   4: 10.469 ns/op
# Warmup Iteration   5: 10.428 ns/op
Iteration   1: 10.413 ns/op
Iteration   2: 10.433 ns/op
Iteration   3: 10.406 ns/op
Iteration   4: 10.403 ns/op
Iteration   5: 10.398 ns/op

# Run progress: 11.11% complete, ETA 00:13:23
# Fork: 2 of 3
# Warmup Iteration   1: 10.520 ns/op
# Warmup Iteration   2: 10.104 ns/op
# Warmup Iteration   3: 10.128 ns/op
# Warmup Iteration   4: 10.083 ns/op
# Warmup Iteration   5: 10.664 ns/op
Iteration   1: 10.630 ns/op
Iteration   2: 10.619 ns/op
Iteration   3: 10.610 ns/op
Iteration   4: 10.598 ns/op
Iteration   5: 10.606 ns/op

# Run progress: 22.22% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 10.578 ns/op
# Warmup Iteration   2: 10.106 ns/op
# Warmup Iteration   3: 10.080 ns/op
# Warmup Iteration   4: 10.084 ns/op
# Warmup Iteration   5: 10.085 ns/op
Iteration   1: 10.083 ns/op
Iteration   2: 10.081 ns/op
Iteration   3: 10.087 ns/op
Iteration   4: 10.110 ns/op
Iteration   5: 10.223 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.addition":
  10.380 ±(99.9%) 0.228 ns/op [Average]
  (min, avg, max) = (10.081, 10.380, 10.630), stdev = 0.213
  CI (99.9%): [10.152, 10.608] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.multiplication
# Parameters: (heavyComputation = true, value = 179426549)

# Run progress: 33.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 2.449 ns/op
# Warmup Iteration   2: 2.285 ns/op
# Warmup Iteration   3: 2.281 ns/op
# Warmup Iteration   4: 2.280 ns/op
# Warmup Iteration   5: 2.301 ns/op
Iteration   1: 2.616 ns/op
Iteration   2: 2.288 ns/op
Iteration   3: 2.464 ns/op
Iteration   4: 2.259 ns/op
Iteration   5: 2.228 ns/op

# Run progress: 44.44% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.464 ns/op
# Warmup Iteration   2: 2.305 ns/op
# Warmup Iteration   3: 2.287 ns/op
# Warmup Iteration   4: 2.285 ns/op
# Warmup Iteration   5: 2.281 ns/op
Iteration   1: 2.281 ns/op
Iteration   2: 2.286 ns/op
Iteration   3: 2.285 ns/op
Iteration   4: 2.280 ns/op
Iteration   5: 2.280 ns/op

# Run progress: 55.56% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.365 ns/op
# Warmup Iteration   2: 2.295 ns/op
# Warmup Iteration   3: 2.295 ns/op
# Warmup Iteration   4: 2.294 ns/op
# Warmup Iteration   5: 2.291 ns/op
Iteration   1: 2.293 ns/op
Iteration   2: 2.289 ns/op
Iteration   3: 2.288 ns/op
Iteration   4: 2.289 ns/op
Iteration   5: 2.289 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.multiplication":
  2.314 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (2.228, 2.314, 2.616), stdev = 0.097
  CI (99.9%): [2.210, 2.419] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.shift
# Parameters: (heavyComputation = true, value = 179426549)

# Run progress: 66.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.466 ns/op
# Warmup Iteration   2: 2.497 ns/op
# Warmup Iteration   3: 2.472 ns/op
# Warmup Iteration   4: 2.461 ns/op
# Warmup Iteration   5: 2.459 ns/op
Iteration   1: 2.456 ns/op
Iteration   2: 2.485 ns/op
Iteration   3: 2.462 ns/op
Iteration   4: 2.454 ns/op
Iteration   5: 2.451 ns/op

# Run progress: 77.78% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.366 ns/op
# Warmup Iteration   2: 2.470 ns/op
# Warmup Iteration   3: 2.454 ns/op
# Warmup Iteration   4: 2.444 ns/op
# Warmup Iteration   5: 2.440 ns/op
Iteration   1: 2.443 ns/op
Iteration   2: 2.442 ns/op
Iteration   3: 2.440 ns/op
Iteration   4: 2.440 ns/op
Iteration   5: 2.440 ns/op

# Run progress: 88.89% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.465 ns/op
# Warmup Iteration   2: 2.676 ns/op
# Warmup Iteration   3: 2.526 ns/op
# Warmup Iteration   4: 2.504 ns/op
# Warmup Iteration   5: 2.486 ns/op
Iteration   1: 2.481 ns/op
Iteration   2: 2.474 ns/op
Iteration   3: 2.468 ns/op
Iteration   4: 2.465 ns/op
Iteration   5: 2.467 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StrengthReductionBenchmark.shift":
  2.458 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (2.440, 2.458, 2.485), stdev = 0.015
  CI (99.9%): [2.441, 2.474] (assumes normal distribution)


# Run complete. Total time: 00:15:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  (heavyComputation)    (value)  Mode  Cnt   Score   Error  Units
StrengthReductionBenchmark.addition                      true  179426549  avgt   15  10.380 ± 0.228  ns/op
StrengthReductionBenchmark.multiplication                true  179426549  avgt   15   2.314 ± 0.104  ns/op
StrengthReductionBenchmark.shift                         true  179426549  avgt   15   2.458 ± 0.016  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/StrengthReductionBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*TailRecursionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/TailRecursionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xss20M
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_baseline
# Parameters: (param = 32768)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 46.965 us/op
# Warmup Iteration   2: 42.715 us/op
# Warmup Iteration   3: 43.547 us/op
# Warmup Iteration   4: 43.462 us/op
# Warmup Iteration   5: 43.418 us/op
Iteration   1: 43.349 us/op
Iteration   2: 39.589 us/op
Iteration   3: 39.585 us/op
Iteration   4: 39.604 us/op
Iteration   5: 39.630 us/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 41.259 us/op
# Warmup Iteration   2: 39.752 us/op
# Warmup Iteration   3: 39.963 us/op
# Warmup Iteration   4: 39.867 us/op
# Warmup Iteration   5: 39.890 us/op
Iteration   1: 39.707 us/op
Iteration   2: 39.580 us/op
Iteration   3: 39.588 us/op
Iteration   4: 39.587 us/op
Iteration   5: 39.582 us/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 41.325 us/op
# Warmup Iteration   2: 39.616 us/op
# Warmup Iteration   3: 39.582 us/op
# Warmup Iteration   4: 39.573 us/op
# Warmup Iteration   5: 39.575 us/op
Iteration   1: 39.574 us/op
Iteration   2: 39.584 us/op
Iteration   3: 39.586 us/op
Iteration   4: 39.580 us/op
Iteration   5: 39.570 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_baseline":
  39.846 ±(99.9%) 1.037 us/op [Average]
  (min, avg, max) = (39.570, 39.846, 43.349), stdev = 0.970
  CI (99.9%): [38.810, 40.883] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xss20M
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_tail_recursive
# Parameters: (param = 32768)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 20.595 us/op
# Warmup Iteration   2: 18.687 us/op
# Warmup Iteration   3: 18.447 us/op
# Warmup Iteration   4: 18.415 us/op
# Warmup Iteration   5: 18.369 us/op
Iteration   1: 18.333 us/op
Iteration   2: 18.294 us/op
Iteration   3: 18.233 us/op
Iteration   4: 18.282 us/op
Iteration   5: 18.328 us/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 19.283 us/op
# Warmup Iteration   2: 17.909 us/op
# Warmup Iteration   3: 18.023 us/op
# Warmup Iteration   4: 18.047 us/op
# Warmup Iteration   5: 18.083 us/op
Iteration   1: 18.098 us/op
Iteration   2: 18.101 us/op
Iteration   3: 18.097 us/op
Iteration   4: 18.102 us/op
Iteration   5: 18.096 us/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 19.422 us/op
# Warmup Iteration   2: 16.570 us/op
# Warmup Iteration   3: 16.560 us/op
# Warmup Iteration   4: 16.580 us/op
# Warmup Iteration   5: 16.572 us/op
Iteration   1: 16.584 us/op
Iteration   2: 16.578 us/op
Iteration   3: 16.569 us/op
Iteration   4: 16.589 us/op
Iteration   5: 16.561 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.TailRecursionBenchmark.fibonacci_tail_recursive":
  17.656 ±(99.9%) 0.850 us/op [Average]
  (min, avg, max) = (16.561, 17.656, 18.333), stdev = 0.795
  CI (99.9%): [16.806, 18.506] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (param)  Mode  Cnt   Score   Error  Units
TailRecursionBenchmark.fibonacci_baseline          32768  avgt   15  39.846 ± 1.037  us/op
TailRecursionBenchmark.fibonacci_tail_recursive    32768  avgt   15  17.656 ± 0.850  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/TailRecursionBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LockCoarseningBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LockCoarseningBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.669 ns/op
# Warmup Iteration   2: 4.149 ns/op
# Warmup Iteration   3: 4.111 ns/op
# Warmup Iteration   4: 4.110 ns/op
# Warmup Iteration   5: 4.099 ns/op
Iteration   1: 4.110 ns/op
Iteration   2: 4.094 ns/op
Iteration   3: 4.096 ns/op
Iteration   4: 4.098 ns/op
Iteration   5: 4.103 ns/op

# Run progress: 16.67% complete, ETA 00:08:22
# Fork: 2 of 3
# Warmup Iteration   1: 4.418 ns/op
# Warmup Iteration   2: 4.657 ns/op
# Warmup Iteration   3: 4.604 ns/op
# Warmup Iteration   4: 4.579 ns/op
# Warmup Iteration   5: 4.562 ns/op
Iteration   1: 4.559 ns/op
Iteration   2: 4.105 ns/op
Iteration   3: 4.122 ns/op
Iteration   4: 4.138 ns/op
Iteration   5: 4.146 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 4.465 ns/op
# Warmup Iteration   2: 4.191 ns/op
# Warmup Iteration   3: 4.096 ns/op
# Warmup Iteration   4: 4.105 ns/op
# Warmup Iteration   5: 4.091 ns/op
Iteration   1: 4.090 ns/op
Iteration   2: 4.185 ns/op
Iteration   3: 4.191 ns/op
Iteration   4: 4.190 ns/op
Iteration   5: 4.191 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_baseline":
  4.161 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (4.090, 4.161, 4.559), stdev = 0.117
  CI (99.9%): [4.036, 4.286] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_coarsening_10x
# Parameters: (value = 42)

# Run progress: 50.00% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 4.952 ns/op
# Warmup Iteration   2: 4.520 ns/op
# Warmup Iteration   3: 4.483 ns/op
# Warmup Iteration   4: 4.474 ns/op
# Warmup Iteration   5: 4.471 ns/op
Iteration   1: 4.465 ns/op
Iteration   2: 4.460 ns/op
Iteration   3: 4.457 ns/op
Iteration   4: 4.456 ns/op
Iteration   5: 4.452 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 4.981 ns/op
# Warmup Iteration   2: 4.560 ns/op
# Warmup Iteration   3: 4.530 ns/op
# Warmup Iteration   4: 4.527 ns/op
# Warmup Iteration   5: 4.511 ns/op
Iteration   1: 4.516 ns/op
Iteration   2: 4.515 ns/op
Iteration   3: 4.509 ns/op
Iteration   4: 4.510 ns/op
Iteration   5: 4.507 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 4.365 ns/op
# Warmup Iteration   2: 4.039 ns/op
# Warmup Iteration   3: 4.042 ns/op
# Warmup Iteration   4: 4.044 ns/op
# Warmup Iteration   5: 4.050 ns/op
Iteration   1: 4.054 ns/op
Iteration   2: 4.062 ns/op
Iteration   3: 4.069 ns/op
Iteration   4: 4.075 ns/op
Iteration   5: 4.087 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockCoarseningBenchmark.lock_coarsening_10x":
  4.346 ±(99.9%) 0.218 ns/op [Average]
  (min, avg, max) = (4.054, 4.346, 4.516), stdev = 0.204
  CI (99.9%): [4.128, 4.564] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (value)  Mode  Cnt  Score   Error  Units
LockCoarseningBenchmark.lock_baseline             42  avgt   15  4.161 ± 0.125  ns/op
LockCoarseningBenchmark.lock_coarsening_10x       42  avgt   15  4.346 ± 0.218  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/LockCoarseningBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LockElisionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LockElisionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.701 ns/op
# Warmup Iteration   2: 3.514 ns/op
# Warmup Iteration   3: 3.608 ns/op
# Warmup Iteration   4: 3.589 ns/op
# Warmup Iteration   5: 3.583 ns/op
Iteration   1: 3.586 ns/op
Iteration   2: 3.575 ns/op
Iteration   3: 3.576 ns/op
Iteration   4: 3.216 ns/op
Iteration   5: 3.253 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.506 ns/op
# Warmup Iteration   2: 3.227 ns/op
# Warmup Iteration   3: 3.327 ns/op
# Warmup Iteration   4: 3.330 ns/op
# Warmup Iteration   5: 3.334 ns/op
Iteration   1: 3.329 ns/op
Iteration   2: 3.323 ns/op
Iteration   3: 3.320 ns/op
Iteration   4: 3.327 ns/op
Iteration   5: 3.334 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.474 ns/op
# Warmup Iteration   2: 3.191 ns/op
# Warmup Iteration   3: 3.291 ns/op
# Warmup Iteration   4: 3.291 ns/op
# Warmup Iteration   5: 3.291 ns/op
Iteration   1: 3.291 ns/op
Iteration   2: 3.291 ns/op
Iteration   3: 3.291 ns/op
Iteration   4: 3.291 ns/op
Iteration   5: 3.291 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_baseline":
  3.353 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (3.216, 3.353, 3.586), stdev = 0.121
  CI (99.9%): [3.224, 3.482] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_elision_10x
# Parameters: (value = 42)

# Run progress: 50.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.873 ns/op
# Warmup Iteration   2: 3.177 ns/op
# Warmup Iteration   3: 3.291 ns/op
# Warmup Iteration   4: 3.291 ns/op
# Warmup Iteration   5: 3.291 ns/op
Iteration   1: 3.291 ns/op
Iteration   2: 3.291 ns/op
Iteration   3: 3.292 ns/op
Iteration   4: 3.292 ns/op
Iteration   5: 3.293 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3.901 ns/op
# Warmup Iteration   2: 3.614 ns/op
# Warmup Iteration   3: 3.689 ns/op
# Warmup Iteration   4: 3.681 ns/op
# Warmup Iteration   5: 3.674 ns/op
Iteration   1: 3.666 ns/op
Iteration   2: 3.663 ns/op
Iteration   3: 3.662 ns/op
Iteration   4: 3.658 ns/op
Iteration   5: 3.656 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 3.511 ns/op
# Warmup Iteration   2: 3.214 ns/op
# Warmup Iteration   3: 3.309 ns/op
# Warmup Iteration   4: 3.315 ns/op
# Warmup Iteration   5: 3.318 ns/op
Iteration   1: 3.325 ns/op
Iteration   2: 3.332 ns/op
Iteration   3: 3.334 ns/op
Iteration   4: 3.337 ns/op
Iteration   5: 3.336 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LockElisionBenchmark.lock_elision_10x":
  3.429 ±(99.9%) 0.183 ns/op [Average]
  (min, avg, max) = (3.291, 3.429, 3.666), stdev = 0.171
  CI (99.9%): [3.246, 3.611] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (value)  Mode  Cnt  Score   Error  Units
LockElisionBenchmark.lock_baseline          42  avgt   15  3.353 ± 0.129  ns/op
LockElisionBenchmark.lock_elision_10x       42  avgt   15  3.429 ± 0.183  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/LockElisionBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*RecursiveLockBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/RecursiveLockBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 5.037 ns/op
# Warmup Iteration   2: 4.092 ns/op
# Warmup Iteration   3: 4.096 ns/op
# Warmup Iteration   4: 4.098 ns/op
# Warmup Iteration   5: 4.094 ns/op
Iteration   1: 4.089 ns/op
Iteration   2: 4.086 ns/op
Iteration   3: 4.090 ns/op
Iteration   4: 4.090 ns/op
Iteration   5: 4.093 ns/op

# Run progress: 16.67% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 4.827 ns/op
# Warmup Iteration   2: 4.512 ns/op
# Warmup Iteration   3: 4.474 ns/op
# Warmup Iteration   4: 4.460 ns/op
# Warmup Iteration   5: 4.457 ns/op
Iteration   1: 4.462 ns/op
Iteration   2: 4.455 ns/op
Iteration   3: 4.448 ns/op
Iteration   4: 4.443 ns/op
Iteration   5: 4.442 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 4.838 ns/op
# Warmup Iteration   2: 4.568 ns/op
# Warmup Iteration   3: 4.526 ns/op
# Warmup Iteration   4: 4.522 ns/op
# Warmup Iteration   5: 4.520 ns/op
Iteration   1: 4.510 ns/op
Iteration   2: 4.511 ns/op
Iteration   3: 4.506 ns/op
Iteration   4: 4.508 ns/op
Iteration   5: 4.505 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_baseline":
  4.349 ±(99.9%) 0.205 ns/op [Average]
  (min, avg, max) = (4.086, 4.349, 4.511), stdev = 0.192
  CI (99.9%): [4.144, 4.554] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_recursive_10x
# Parameters: (value = 42)

# Run progress: 50.00% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 12.507 ns/op
# Warmup Iteration   2: 11.522 ns/op
# Warmup Iteration   3: 11.303 ns/op
# Warmup Iteration   4: 11.316 ns/op
# Warmup Iteration   5: 11.324 ns/op
Iteration   1: 11.327 ns/op
Iteration   2: 11.328 ns/op
Iteration   3: 11.046 ns/op
Iteration   4: 11.073 ns/op
Iteration   5: 11.107 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 12.724 ns/op
# Warmup Iteration   2: 11.586 ns/op
# Warmup Iteration   3: 11.327 ns/op
# Warmup Iteration   4: 11.316 ns/op
# Warmup Iteration   5: 11.326 ns/op
Iteration   1: 11.305 ns/op
Iteration   2: 12.275 ns/op
Iteration   3: 12.203 ns/op
Iteration   4: 12.164 ns/op
Iteration   5: 12.129 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 13.637 ns/op
# Warmup Iteration   2: 12.693 ns/op
# Warmup Iteration   3: 13.352 ns/op
# Warmup Iteration   4: 13.311 ns/op
# Warmup Iteration   5: 13.295 ns/op
Iteration   1: 13.296 ns/op
Iteration   2: 13.305 ns/op
Iteration   3: 13.281 ns/op
Iteration   4: 13.278 ns/op
Iteration   5: 13.283 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.RecursiveLockBenchmark.lock_recursive_10x":
  12.160 ±(99.9%) 0.991 ns/op [Average]
  (min, avg, max) = (11.046, 12.160, 13.305), stdev = 0.927
  CI (99.9%): [11.169, 13.151] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  (value)  Mode  Cnt   Score   Error  Units
RecursiveLockBenchmark.lock_baseline            42  avgt   15   4.349 ± 0.205  ns/op
RecursiveLockBenchmark.lock_recursive_10x       42  avgt   15  12.160 ± 0.991  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/RecursiveLockBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*LocksBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/LocksBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_lock

# Run progress: 0.00% complete, ETA 00:35:00
# Fork: 1 of 3
# Warmup Iteration   1: 11899.674 ±(99.9%) 1747.949 ns/op
# Warmup Iteration   2: 11277.478 ±(99.9%) 40.733 ns/op
# Warmup Iteration   3: 11153.811 ±(99.9%) 0.307 ns/op
# Warmup Iteration   4: 11430.971 ±(99.9%) 0.145 ns/op
# Warmup Iteration   5: 11337.626 ±(99.9%) 0.143 ns/op
Iteration   1: 11579.575 ±(99.9%) 0.331 ns/op
Iteration   2: 11473.329 ±(99.9%) 0.297 ns/op
Iteration   3: 11412.058 ±(99.9%) 0.110 ns/op
Iteration   4: 11464.867 ±(99.9%) 0.346 ns/op
Iteration   5: 11456.165 ±(99.9%) 0.565 ns/op

# Run progress: 4.76% complete, ETA 00:33:27
# Fork: 2 of 3
# Warmup Iteration   1: 12112.053 ±(99.9%) 0.688 ns/op
# Warmup Iteration   2: 11505.734 ±(99.9%) 0.580 ns/op
# Warmup Iteration   3: 11492.053 ±(99.9%) 0.268 ns/op
# Warmup Iteration   4: 11511.911 ±(99.9%) 0.513 ns/op
# Warmup Iteration   5: 11618.461 ±(99.9%) 0.276 ns/op
Iteration   1: 11469.874 ±(99.9%) 0.139 ns/op
Iteration   2: 11356.243 ±(99.9%) 0.285 ns/op
Iteration   3: 11533.304 ±(99.9%) 0.255 ns/op
Iteration   4: 11447.167 ±(99.9%) 0.696 ns/op
Iteration   5: 11471.212 ±(99.9%) 0.855 ns/op

# Run progress: 9.52% complete, ETA 00:31:46
# Fork: 3 of 3
# Warmup Iteration   1: 11737.881 ±(99.9%) 0.824 ns/op
# Warmup Iteration   2: 11532.677 ±(99.9%) 0.386 ns/op
# Warmup Iteration   3: 11316.398 ±(99.9%) 0.664 ns/op
# Warmup Iteration   4: 11307.012 ±(99.9%) 0.089 ns/op
# Warmup Iteration   5: 11509.142 ±(99.9%) 0.116 ns/op
Iteration   1: 11466.656 ±(99.9%) 0.515 ns/op
Iteration   2: 11386.703 ±(99.9%) 0.282 ns/op
Iteration   3: 11363.940 ±(99.9%) 0.590 ns/op
Iteration   4: 11558.484 ±(99.9%) 0.258 ns/op
Iteration   5: 11520.629 ±(99.9%) 0.263 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_lock":
  11464.014 ±(99.9%) 70.635 ns/op [Average]
  (min, avg, max) = (11356.243, 11464.014, 11579.575), stdev = 66.072
  CI (99.9%): [11393.379, 11534.649] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_read_write_lock

# Run progress: 14.29% complete, ETA 00:30:08
# Fork: 1 of 3
# Warmup Iteration   1: 24104.750 ±(99.9%) 12.808 ns/op
# Warmup Iteration   2: 23386.271 ±(99.9%) 1.280 ns/op
# Warmup Iteration   3: 23006.840 ±(99.9%) 0.969 ns/op
# Warmup Iteration   4: 22555.392 ±(99.9%) 1.303 ns/op
# Warmup Iteration   5: 23145.792 ±(99.9%) 0.747 ns/op
Iteration   1: 23086.030 ±(99.9%) 0.873 ns/op
Iteration   2: 23102.688 ±(99.9%) 0.978 ns/op
Iteration   3: 23289.322 ±(99.9%) 1.017 ns/op
Iteration   4: 22685.582 ±(99.9%) 1.337 ns/op
Iteration   5: 22488.322 ±(99.9%) 0.912 ns/op

# Run progress: 19.05% complete, ETA 00:28:27
# Fork: 2 of 3
# Warmup Iteration   1: 24778.205 ±(99.9%) 85.893 ns/op
# Warmup Iteration   2: 23054.299 ±(99.9%) 1.223 ns/op
# Warmup Iteration   3: 22871.440 ±(99.9%) 0.564 ns/op
# Warmup Iteration   4: 23167.902 ±(99.9%) 1.017 ns/op
# Warmup Iteration   5: 22558.697 ±(99.9%) 0.623 ns/op
Iteration   1: 22982.854 ±(99.9%) 7.940 ns/op
Iteration   2: 22317.306 ±(99.9%) 1.205 ns/op
Iteration   3: 22688.022 ±(99.9%) 1.006 ns/op
Iteration   4: 22856.260 ±(99.9%) 1.006 ns/op
Iteration   5: 22699.097 ±(99.9%) 0.368 ns/op

# Run progress: 23.81% complete, ETA 00:26:46
# Fork: 3 of 3
# Warmup Iteration   1: 24566.139 ±(99.9%) 10.463 ns/op
# Warmup Iteration   2: 23554.371 ±(99.9%) 0.563 ns/op
# Warmup Iteration   3: 23033.559 ±(99.9%) 1.448 ns/op
# Warmup Iteration   4: 22865.527 ±(99.9%) 9.053 ns/op
# Warmup Iteration   5: 23160.726 ±(99.9%) 3.305 ns/op
Iteration   1: 22919.734 ±(99.9%) 0.704 ns/op
Iteration   2: 23214.542 ±(99.9%) 0.570 ns/op
Iteration   3: 22997.951 ±(99.9%) 0.411 ns/op
Iteration   4: 22913.423 ±(99.9%) 33.497 ns/op
Iteration   5: 23164.502 ±(99.9%) 5.915 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_reentrant_read_write_lock":
  22893.709 ±(99.9%) 293.442 ns/op [Average]
  (min, avg, max) = (22317.306, 22893.709, 23289.322), stdev = 274.485
  CI (99.9%): [22600.267, 23187.150] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_semaphore

# Run progress: 28.57% complete, ETA 00:25:06
# Fork: 1 of 3
# Warmup Iteration   1: 783.836 ±(99.9%) 251.839 ns/op
# Warmup Iteration   2: 762.346 ±(99.9%) 273.212 ns/op
# Warmup Iteration   3: 750.408 ±(99.9%) 345.782 ns/op
# Warmup Iteration   4: 744.398 ±(99.9%) 328.326 ns/op
# Warmup Iteration   5: 761.422 ±(99.9%) 266.024 ns/op
Iteration   1: 763.674 ±(99.9%) 221.622 ns/op
Iteration   2: 759.128 ±(99.9%) 173.014 ns/op
Iteration   3: 750.863 ±(99.9%) 348.313 ns/op
Iteration   4: 755.798 ±(99.9%) 295.666 ns/op
Iteration   5: 755.440 ±(99.9%) 321.096 ns/op

# Run progress: 33.33% complete, ETA 00:23:25
# Fork: 2 of 3
# Warmup Iteration   1: 765.076 ±(99.9%) 1094.455 ns/op
# Warmup Iteration   2: 725.270 ±(99.9%) 1107.623 ns/op
# Warmup Iteration   3: 709.319 ±(99.9%) 956.759 ns/op
# Warmup Iteration   4: 714.098 ±(99.9%) 979.446 ns/op
# Warmup Iteration   5: 713.398 ±(99.9%) 975.579 ns/op
Iteration   1: 708.591 ±(99.9%) 1031.984 ns/op
Iteration   2: 711.060 ±(99.9%) 1074.899 ns/op
Iteration   3: 715.160 ±(99.9%) 1027.791 ns/op
Iteration   4: 712.355 ±(99.9%) 1081.747 ns/op
Iteration   5: 724.310 ±(99.9%) 1045.282 ns/op

# Run progress: 38.10% complete, ETA 00:21:44
# Fork: 3 of 3
# Warmup Iteration   1: 828.319 ±(99.9%) 512.443 ns/op
# Warmup Iteration   2: 759.861 ±(99.9%) 616.163 ns/op
# Warmup Iteration   3: 755.155 ±(99.9%) 674.011 ns/op
# Warmup Iteration   4: 755.764 ±(99.9%) 681.845 ns/op
# Warmup Iteration   5: 755.922 ±(99.9%) 668.089 ns/op
Iteration   1: 763.591 ±(99.9%) 691.088 ns/op
Iteration   2: 758.299 ±(99.9%) 658.055 ns/op
Iteration   3: 755.512 ±(99.9%) 615.414 ns/op
Iteration   4: 757.353 ±(99.9%) 650.872 ns/op
Iteration   5: 755.187 ±(99.9%) 670.622 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.fair_semaphore":
  743.088 ±(99.9%) 23.043 ns/op [Average]
  (min, avg, max) = (708.591, 743.088, 763.674), stdev = 21.555
  CI (99.9%): [720.045, 766.131] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_lock

# Run progress: 42.86% complete, ETA 00:20:04
# Fork: 1 of 3
# Warmup Iteration   1: 268.544 ±(99.9%) 219.572 ns/op
# Warmup Iteration   2: 250.379 ±(99.9%) 328.285 ns/op
# Warmup Iteration   3: 240.859 ±(99.9%) 290.647 ns/op
# Warmup Iteration   4: 244.327 ±(99.9%) 295.971 ns/op
# Warmup Iteration   5: 242.270 ±(99.9%) 311.173 ns/op
Iteration   1: 240.185 ±(99.9%) 310.259 ns/op
Iteration   2: 238.308 ±(99.9%) 278.340 ns/op
Iteration   3: 243.540 ±(99.9%) 293.554 ns/op
Iteration   4: 247.965 ±(99.9%) 305.863 ns/op
Iteration   5: 244.675 ±(99.9%) 263.697 ns/op

# Run progress: 47.62% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 261.171 ±(99.9%) 42.694 ns/op
# Warmup Iteration   2: 239.953 ±(99.9%) 54.242 ns/op
# Warmup Iteration   3: 242.039 ±(99.9%) 69.193 ns/op
# Warmup Iteration   4: 239.575 ±(99.9%) 44.388 ns/op
# Warmup Iteration   5: 230.812 ±(99.9%) 70.270 ns/op
Iteration   1: 236.450 ±(99.9%) 104.577 ns/op
Iteration   2: 231.874 ±(99.9%) 86.474 ns/op
Iteration   3: 235.963 ±(99.9%) 60.012 ns/op
Iteration   4: 235.743 ±(99.9%) 28.364 ns/op
Iteration   5: 237.730 ±(99.9%) 57.448 ns/op

# Run progress: 52.38% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 276.665 ±(99.9%) 157.860 ns/op
# Warmup Iteration   2: 246.571 ±(99.9%) 304.416 ns/op
# Warmup Iteration   3: 247.251 ±(99.9%) 347.359 ns/op
# Warmup Iteration   4: 245.879 ±(99.9%) 297.829 ns/op
# Warmup Iteration   5: 251.466 ±(99.9%) 313.367 ns/op
Iteration   1: 247.259 ±(99.9%) 265.756 ns/op
Iteration   2: 248.050 ±(99.9%) 337.960 ns/op
Iteration   3: 248.187 ±(99.9%) 296.356 ns/op
Iteration   4: 241.060 ±(99.9%) 334.552 ns/op
Iteration   5: 247.247 ±(99.9%) 290.750 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_lock":
  241.616 ±(99.9%) 5.841 ns/op [Average]
  (min, avg, max) = (231.874, 241.616, 248.187), stdev = 5.464
  CI (99.9%): [235.775, 247.457] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_read_write_lock

# Run progress: 57.14% complete, ETA 00:15:03
# Fork: 1 of 3
# Warmup Iteration   1: 2303.027 ±(99.9%) 202.037 ns/op
# Warmup Iteration   2: 2177.513 ±(99.9%) 205.542 ns/op
# Warmup Iteration   3: 2141.531 ±(99.9%) 60.189 ns/op
# Warmup Iteration   4: 2066.595 ±(99.9%) 73.612 ns/op
# Warmup Iteration   5: 2100.899 ±(99.9%) 124.810 ns/op
Iteration   1: 2073.749 ±(99.9%) 148.607 ns/op
Iteration   2: 2122.184 ±(99.9%) 95.808 ns/op
Iteration   3: 2112.474 ±(99.9%) 216.263 ns/op
Iteration   4: 2062.382 ±(99.9%) 96.070 ns/op
Iteration   5: 2067.927 ±(99.9%) 237.748 ns/op

# Run progress: 61.90% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 2298.146 ±(99.9%) 152.956 ns/op
# Warmup Iteration   2: 2180.059 ±(99.9%) 181.158 ns/op
# Warmup Iteration   3: 2081.204 ±(99.9%) 182.601 ns/op
# Warmup Iteration   4: 2133.411 ±(99.9%) 119.108 ns/op
# Warmup Iteration   5: 2044.479 ±(99.9%) 262.122 ns/op
Iteration   1: 2044.805 ±(99.9%) 125.771 ns/op
Iteration   2: 2128.658 ±(99.9%) 214.161 ns/op
Iteration   3: 2158.571 ±(99.9%) 96.890 ns/op
Iteration   4: 2131.049 ±(99.9%) 184.494 ns/op
Iteration   5: 2120.510 ±(99.9%) 165.804 ns/op

# Run progress: 66.67% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 2200.364 ±(99.9%) 77.981 ns/op
# Warmup Iteration   2: 2158.936 ±(99.9%) 208.421 ns/op
# Warmup Iteration   3: 2055.535 ±(99.9%) 112.269 ns/op
# Warmup Iteration   4: 2079.584 ±(99.9%) 89.326 ns/op
# Warmup Iteration   5: 2127.899 ±(99.9%) 168.224 ns/op
Iteration   1: 2102.537 ±(99.9%) 105.998 ns/op
Iteration   2: 2096.614 ±(99.9%) 145.099 ns/op
Iteration   3: 2084.675 ±(99.9%) 111.243 ns/op
Iteration   4: 2079.724 ±(99.9%) 186.970 ns/op
Iteration   5: 2108.642 ±(99.9%) 371.756 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.reentrant_read_write_lock":
  2099.633 ±(99.9%) 32.827 ns/op [Average]
  (min, avg, max) = (2044.805, 2099.633, 2158.571), stdev = 30.706
  CI (99.9%): [2066.807, 2132.460] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.semaphore

# Run progress: 71.43% complete, ETA 00:10:02
# Fork: 1 of 3
# Warmup Iteration   1: 779.409 ±(99.9%) 1137.930 ns/op
# Warmup Iteration   2: 718.167 ±(99.9%) 1026.531 ns/op
# Warmup Iteration   3: 704.261 ±(99.9%) 1064.960 ns/op
# Warmup Iteration   4: 702.506 ±(99.9%) 1000.057 ns/op
# Warmup Iteration   5: 705.120 ±(99.9%) 1007.680 ns/op
Iteration   1: 707.392 ±(99.9%) 975.730 ns/op
Iteration   2: 705.898 ±(99.9%) 948.625 ns/op
Iteration   3: 714.259 ±(99.9%) 1028.565 ns/op
Iteration   4: 714.540 ±(99.9%) 1032.152 ns/op
Iteration   5: 713.352 ±(99.9%) 991.782 ns/op

# Run progress: 76.19% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 745.413 ±(99.9%) 970.932 ns/op
# Warmup Iteration   2: 689.572 ±(99.9%) 894.213 ns/op
# Warmup Iteration   3: 683.038 ±(99.9%) 898.925 ns/op
# Warmup Iteration   4: 688.536 ±(99.9%) 952.355 ns/op
# Warmup Iteration   5: 682.132 ±(99.9%) 868.183 ns/op
Iteration   1: 685.718 ±(99.9%) 882.524 ns/op
Iteration   2: 689.424 ±(99.9%) 929.814 ns/op
Iteration   3: 690.122 ±(99.9%) 930.034 ns/op
Iteration   4: 684.186 ±(99.9%) 869.801 ns/op
Iteration   5: 672.088 ±(99.9%) 719.036 ns/op

# Run progress: 80.95% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 755.844 ±(99.9%) 1034.070 ns/op
# Warmup Iteration   2: 707.547 ±(99.9%) 929.836 ns/op
# Warmup Iteration   3: 706.402 ±(99.9%) 982.744 ns/op
# Warmup Iteration   4: 697.143 ±(99.9%) 996.683 ns/op
# Warmup Iteration   5: 705.424 ±(99.9%) 1064.190 ns/op
Iteration   1: 697.787 ±(99.9%) 1113.808 ns/op
Iteration   2: 686.959 ±(99.9%) 972.125 ns/op
Iteration   3: 689.911 ±(99.9%) 1016.532 ns/op
Iteration   4: 701.044 ±(99.9%) 996.125 ns/op
Iteration   5: 703.764 ±(99.9%) 1033.563 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.semaphore":
  697.096 ±(99.9%) 13.674 ns/op [Average]
  (min, avg, max) = (672.088, 697.096, 714.540), stdev = 12.791
  CI (99.9%): [683.422, 710.771] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.synchronized

# Run progress: 85.71% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 1166.318 ±(99.9%) 2010.659 ns/op
# Warmup Iteration   2: 1144.278 ±(99.9%) 2078.598 ns/op
# Warmup Iteration   3: 1145.155 ±(99.9%) 2076.101 ns/op
# Warmup Iteration   4: 1094.497 ±(99.9%) 1014.976 ns/op
# Warmup Iteration   5: 1107.117 ±(99.9%) 1318.937 ns/op
Iteration   1: 1134.559 ±(99.9%) 2004.607 ns/op
Iteration   2: 1150.986 ±(99.9%) 2212.010 ns/op
Iteration   3: 1157.063 ±(99.9%) 2236.261 ns/op
Iteration   4: 1154.911 ±(99.9%) 2226.447 ns/op
Iteration   5: 1147.038 ±(99.9%) 2100.137 ns/op

# Run progress: 90.48% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 1164.143 ±(99.9%) 1201.609 ns/op
# Warmup Iteration   2: 1119.759 ±(99.9%) 1160.803 ns/op
# Warmup Iteration   3: 1166.381 ±(99.9%) 2125.343 ns/op
# Warmup Iteration   4: 1107.246 ±(99.9%) 760.803 ns/op
# Warmup Iteration   5: 1110.643 ±(99.9%) 882.491 ns/op
Iteration   1: 1149.344 ±(99.9%) 1795.179 ns/op
Iteration   2: 1104.931 ±(99.9%) 684.173 ns/op
Iteration   3: 1169.150 ±(99.9%) 2078.153 ns/op
Iteration   4: 1122.541 ±(99.9%) 1173.660 ns/op
Iteration   5: 1156.580 ±(99.9%) 1949.241 ns/op

# Run progress: 95.24% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 1162.007 ±(99.9%) 1584.788 ns/op
# Warmup Iteration   2: 1167.276 ±(99.9%) 1688.399 ns/op
# Warmup Iteration   3: 1167.391 ±(99.9%) 1708.372 ns/op
# Warmup Iteration   4: 1194.786 ±(99.9%) 2461.479 ns/op
# Warmup Iteration   5: 1204.443 ±(99.9%) 2520.529 ns/op
Iteration   1: 1202.147 ±(99.9%) 2374.470 ns/op
Iteration   2: 1137.563 ±(99.9%) 1109.682 ns/op
Iteration   3: 1157.446 ±(99.9%) 1286.867 ns/op
Iteration   4: 1168.850 ±(99.9%) 1617.426 ns/op
Iteration   5: 1183.714 ±(99.9%) 1847.512 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.locks.LocksBenchmark.synchronized":
  1153.122 ±(99.9%) 25.223 ns/op [Average]
  (min, avg, max) = (1104.931, 1153.122, 1202.147), stdev = 23.593
  CI (99.9%): [1127.899, 1178.344] (assumes normal distribution)


# Run complete. Total time: 00:35:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt      Score     Error  Units
LocksBenchmark.fair_reentrant_lock             avgt   15  11464.014 ±  70.635  ns/op
LocksBenchmark.fair_reentrant_read_write_lock  avgt   15  22893.709 ± 293.442  ns/op
LocksBenchmark.fair_semaphore                  avgt   15    743.088 ±  23.043  ns/op
LocksBenchmark.reentrant_lock                  avgt   15    241.616 ±   5.841  ns/op
LocksBenchmark.reentrant_read_write_lock       avgt   15   2099.633 ±  32.827  ns/op
LocksBenchmark.semaphore                       avgt   15    697.096 ±  13.674  ns/op
LocksBenchmark.synchronized                    avgt   15   1153.122 ±  25.223  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/LocksBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*StoreAfterStoreBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/StoreAfterStoreBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_non_zero_volatile_stores

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 9.030 ns/op
# Warmup Iteration   2: 8.229 ns/op
# Warmup Iteration   3: 7.754 ns/op
# Warmup Iteration   4: 7.229 ns/op
# Warmup Iteration   5: 7.494 ns/op
Iteration   1: 7.539 ns/op
Iteration   2: 7.640 ns/op
Iteration   3: 7.865 ns/op
Iteration   4: 7.316 ns/op
Iteration   5: 7.837 ns/op

# Run progress: 16.67% complete, ETA 00:08:22
# Fork: 2 of 3
# Warmup Iteration   1: 8.310 ns/op
# Warmup Iteration   2: 8.025 ns/op
# Warmup Iteration   3: 7.779 ns/op
# Warmup Iteration   4: 7.781 ns/op
# Warmup Iteration   5: 7.239 ns/op
Iteration   1: 7.820 ns/op
Iteration   2: 7.875 ns/op
Iteration   3: 7.609 ns/op
Iteration   4: 7.557 ns/op
Iteration   5: 7.655 ns/op

# Run progress: 33.33% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 8.080 ns/op
# Warmup Iteration   2: 7.353 ns/op
# Warmup Iteration   3: 7.317 ns/op
# Warmup Iteration   4: 7.549 ns/op
# Warmup Iteration   5: 7.322 ns/op
Iteration   1: 7.415 ns/op
Iteration   2: 7.321 ns/op
Iteration   3: 8.053 ns/op
Iteration   4: 7.401 ns/op
Iteration   5: 7.140 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_non_zero_volatile_stores":
  7.603 ±(99.9%) 0.272 ns/op [Average]
  (min, avg, max) = (7.140, 7.603, 8.053), stdev = 0.255
  CI (99.9%): [7.330, 7.875] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_zero_volatile_stores

# Run progress: 50.00% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 9.061 ns/op
# Warmup Iteration   2: 8.232 ns/op
# Warmup Iteration   3: 7.867 ns/op
# Warmup Iteration   4: 8.103 ns/op
# Warmup Iteration   5: 8.568 ns/op
Iteration   1: 8.072 ns/op
Iteration   2: 8.271 ns/op
Iteration   3: 8.288 ns/op
Iteration   4: 7.807 ns/op
Iteration   5: 8.206 ns/op

# Run progress: 66.67% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 8.515 ns/op
# Warmup Iteration   2: 7.847 ns/op
# Warmup Iteration   3: 8.015 ns/op
# Warmup Iteration   4: 8.587 ns/op
# Warmup Iteration   5: 8.284 ns/op
Iteration   1: 8.427 ns/op
Iteration   2: 8.713 ns/op
Iteration   3: 8.193 ns/op
Iteration   4: 7.991 ns/op
Iteration   5: 7.843 ns/op

# Run progress: 83.33% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 8.785 ns/op
# Warmup Iteration   2: 8.052 ns/op
# Warmup Iteration   3: 8.143 ns/op
# Warmup Iteration   4: 8.121 ns/op
# Warmup Iteration   5: 7.922 ns/op
Iteration   1: 7.960 ns/op
Iteration   2: 7.986 ns/op
Iteration   3: 8.385 ns/op
Iteration   4: 8.039 ns/op
Iteration   5: 8.015 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.StoreAfterStoreBenchmark.redundant_zero_volatile_stores":
  8.146 ±(99.9%) 0.259 ns/op [Average]
  (min, avg, max) = (7.807, 8.146, 8.713), stdev = 0.243
  CI (99.9%): [7.887, 8.406] (assumes normal distribution)


# Run complete. Total time: 00:10:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt  Score   Error  Units
StoreAfterStoreBenchmark.redundant_non_zero_volatile_stores  avgt   15  7.603 ± 0.272  ns/op
StoreAfterStoreBenchmark.redundant_zero_volatile_stores      avgt   15  8.146 ± 0.259  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/StoreAfterStoreBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*PostAllocationStoresBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/PostAllocationStoresBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.no_store

# Run progress: 0.00% complete, ETA 00:20:00
# Fork: 1 of 3
# Warmup Iteration   1: 17.480 ns/op
# Warmup Iteration   2: 15.770 ns/op
# Warmup Iteration   3: 15.645 ns/op
# Warmup Iteration   4: 15.612 ns/op
# Warmup Iteration   5: 15.628 ns/op
Iteration   1: 15.606 ns/op
Iteration   2: 15.696 ns/op
Iteration   3: 15.630 ns/op
Iteration   4: 15.643 ns/op
Iteration   5: 15.624 ns/op

# Run progress: 8.33% complete, ETA 00:18:24
# Fork: 2 of 3
# Warmup Iteration   1: 16.925 ns/op
# Warmup Iteration   2: 15.760 ns/op
# Warmup Iteration   3: 15.652 ns/op
# Warmup Iteration   4: 15.688 ns/op
# Warmup Iteration   5: 15.662 ns/op
Iteration   1: 15.611 ns/op
Iteration   2: 15.681 ns/op
Iteration   3: 15.612 ns/op
Iteration   4: 15.677 ns/op
Iteration   5: 15.701 ns/op

# Run progress: 16.67% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 16.913 ns/op
# Warmup Iteration   2: 15.723 ns/op
# Warmup Iteration   3: 15.691 ns/op
# Warmup Iteration   4: 15.674 ns/op
# Warmup Iteration   5: 15.682 ns/op
Iteration   1: 15.661 ns/op
Iteration   2: 15.666 ns/op
Iteration   3: 15.645 ns/op
Iteration   4: 15.694 ns/op
Iteration   5: 15.721 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.no_store":
  15.658 ±(99.9%) 0.039 ns/op [Average]
  (min, avg, max) = (15.606, 15.658, 15.721), stdev = 0.037
  CI (99.9%): [15.619, 15.697] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.non_null_or_zero_store

# Run progress: 25.00% complete, ETA 00:15:03
# Fork: 1 of 3
# Warmup Iteration   1: 19.135 ns/op
# Warmup Iteration   2: 18.664 ns/op
# Warmup Iteration   3: 18.708 ns/op
# Warmup Iteration   4: 18.696 ns/op
# Warmup Iteration   5: 18.535 ns/op
Iteration   1: 18.578 ns/op
Iteration   2: 18.653 ns/op
Iteration   3: 18.362 ns/op
Iteration   4: 19.200 ns/op
Iteration   5: 19.095 ns/op

# Run progress: 33.33% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 19.180 ns/op
# Warmup Iteration   2: 18.814 ns/op
# Warmup Iteration   3: 18.900 ns/op
# Warmup Iteration   4: 18.679 ns/op
# Warmup Iteration   5: 19.115 ns/op
Iteration   1: 18.549 ns/op
Iteration   2: 18.199 ns/op
Iteration   3: 18.304 ns/op
Iteration   4: 18.515 ns/op
Iteration   5: 18.406 ns/op

# Run progress: 41.67% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 19.112 ns/op
# Warmup Iteration   2: 18.734 ns/op
# Warmup Iteration   3: 18.863 ns/op
# Warmup Iteration   4: 18.640 ns/op
# Warmup Iteration   5: 18.487 ns/op
Iteration   1: 18.257 ns/op
Iteration   2: 18.208 ns/op
Iteration   3: 18.527 ns/op
Iteration   4: 18.889 ns/op
Iteration   5: 18.054 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.non_null_or_zero_store":
  18.520 ±(99.9%) 0.353 ns/op [Average]
  (min, avg, max) = (18.054, 18.520, 19.200), stdev = 0.330
  CI (99.9%): [18.167, 18.872] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_store

# Run progress: 50.00% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 16.966 ns/op
# Warmup Iteration   2: 15.820 ns/op
# Warmup Iteration   3: 15.722 ns/op
# Warmup Iteration   4: 15.746 ns/op
# Warmup Iteration   5: 15.715 ns/op
Iteration   1: 15.686 ns/op
Iteration   2: 15.689 ns/op
Iteration   3: 15.778 ns/op
Iteration   4: 15.794 ns/op
Iteration   5: 15.647 ns/op

# Run progress: 58.33% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 17.032 ns/op
# Warmup Iteration   2: 15.791 ns/op
# Warmup Iteration   3: 15.740 ns/op
# Warmup Iteration   4: 15.739 ns/op
# Warmup Iteration   5: 15.762 ns/op
Iteration   1: 15.746 ns/op
Iteration   2: 15.809 ns/op
Iteration   3: 15.797 ns/op
Iteration   4: 15.797 ns/op
Iteration   5: 15.752 ns/op

# Run progress: 66.67% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 16.994 ns/op
# Warmup Iteration   2: 15.694 ns/op
# Warmup Iteration   3: 15.676 ns/op
# Warmup Iteration   4: 15.644 ns/op
# Warmup Iteration   5: 15.700 ns/op
Iteration   1: 15.641 ns/op
Iteration   2: 15.695 ns/op
Iteration   3: 15.661 ns/op
Iteration   4: 15.676 ns/op
Iteration   5: 15.696 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_store":
  15.724 ±(99.9%) 0.064 ns/op [Average]
  (min, avg, max) = (15.641, 15.724, 15.809), stdev = 0.060
  CI (99.9%): [15.660, 15.788] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_volatile_store

# Run progress: 75.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 17.413 ns/op
# Warmup Iteration   2: 15.794 ns/op
# Warmup Iteration   3: 15.701 ns/op
# Warmup Iteration   4: 15.737 ns/op
# Warmup Iteration   5: 15.768 ns/op
Iteration   1: 15.796 ns/op
Iteration   2: 15.740 ns/op
Iteration   3: 15.647 ns/op
Iteration   4: 15.752 ns/op
Iteration   5: 15.675 ns/op

# Run progress: 83.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 17.596 ns/op
# Warmup Iteration   2: 15.785 ns/op
# Warmup Iteration   3: 15.748 ns/op
# Warmup Iteration   4: 15.693 ns/op
# Warmup Iteration   5: 15.691 ns/op
Iteration   1: 15.673 ns/op
Iteration   2: 15.718 ns/op
Iteration   3: 15.714 ns/op
Iteration   4: 15.649 ns/op
Iteration   5: 15.726 ns/op

# Run progress: 91.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 17.243 ns/op
# Warmup Iteration   2: 15.803 ns/op
# Warmup Iteration   3: 15.657 ns/op
# Warmup Iteration   4: 15.677 ns/op
# Warmup Iteration   5: 15.767 ns/op
Iteration   1: 15.691 ns/op
Iteration   2: 15.804 ns/op
Iteration   3: 15.709 ns/op
Iteration   4: 15.725 ns/op
Iteration   5: 15.681 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.PostAllocationStoresBenchmark.redundant_null_or_zero_volatile_store":
  15.713 ±(99.9%) 0.050 ns/op [Average]
  (min, avg, max) = (15.647, 15.713, 15.804), stdev = 0.047
  CI (99.9%): [15.663, 15.763] (assumes normal distribution)


# Run complete. Total time: 00:20:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt   Score   Error  Units
PostAllocationStoresBenchmark.no_store                               avgt   15  15.658 ± 0.039  ns/op
PostAllocationStoresBenchmark.non_null_or_zero_store                 avgt   15  18.520 ± 0.353  ns/op
PostAllocationStoresBenchmark.redundant_null_or_zero_store           avgt   15  15.724 ± 0.064  ns/op
PostAllocationStoresBenchmark.redundant_null_or_zero_volatile_store  avgt   15  15.713 ± 0.050  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/PostAllocationStoresBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ExceptionBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ExceptionBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception
# Parameters: (stackDepth = 1)

# Run progress: 0.00% complete, ETA 00:45:00
# Fork: 1 of 3
# Warmup Iteration   1: 1342.280 ns/op
# Warmup Iteration   2: 1193.351 ns/op
# Warmup Iteration   3: 1194.586 ns/op
# Warmup Iteration   4: 1204.706 ns/op
# Warmup Iteration   5: 1160.495 ns/op
Iteration   1: 1218.940 ns/op
Iteration   2: 1110.455 ns/op
Iteration   3: 1135.624 ns/op
Iteration   4: 1173.902 ns/op
Iteration   5: 1097.383 ns/op

# Run progress: 3.70% complete, ETA 00:43:31
# Fork: 2 of 3
# Warmup Iteration   1: 1358.321 ns/op
# Warmup Iteration   2: 1297.383 ns/op
# Warmup Iteration   3: 1276.839 ns/op
# Warmup Iteration   4: 1270.709 ns/op
# Warmup Iteration   5: 1264.921 ns/op
Iteration   1: 1166.650 ns/op
Iteration   2: 1235.719 ns/op
Iteration   3: 1269.923 ns/op
Iteration   4: 1243.374 ns/op
Iteration   5: 1169.742 ns/op

# Run progress: 7.41% complete, ETA 00:41:48
# Fork: 3 of 3
# Warmup Iteration   1: 1193.215 ns/op
# Warmup Iteration   2: 1193.416 ns/op
# Warmup Iteration   3: 1108.164 ns/op
# Warmup Iteration   4: 1075.588 ns/op
# Warmup Iteration   5: 1076.613 ns/op
Iteration   1: 1125.607 ns/op
Iteration   2: 1081.839 ns/op
Iteration   3: 1240.750 ns/op
Iteration   4: 1230.700 ns/op
Iteration   5: 1220.368 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception":
  1181.398 ±(99.9%) 64.607 ns/op [Average]
  (min, avg, max) = (1081.839, 1181.398, 1269.923), stdev = 60.433
  CI (99.9%): [1116.791, 1246.005] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception
# Parameters: (stackDepth = 64)

# Run progress: 11.11% complete, ETA 00:40:07
# Fork: 1 of 3
# Warmup Iteration   1: 3166.362 ns/op
# Warmup Iteration   2: 3264.345 ns/op
# Warmup Iteration   3: 3222.980 ns/op
# Warmup Iteration   4: 3205.636 ns/op
# Warmup Iteration   5: 3120.725 ns/op
Iteration   1: 3192.742 ns/op
Iteration   2: 3042.835 ns/op
Iteration   3: 2971.476 ns/op
Iteration   4: 3218.911 ns/op
Iteration   5: 3201.286 ns/op

# Run progress: 14.81% complete, ETA 00:38:27
# Fork: 2 of 3
# Warmup Iteration   1: 3438.181 ns/op
# Warmup Iteration   2: 3080.782 ns/op
# Warmup Iteration   3: 2858.890 ns/op
# Warmup Iteration   4: 2908.534 ns/op
# Warmup Iteration   5: 3126.960 ns/op
Iteration   1: 3231.268 ns/op
Iteration   2: 3037.363 ns/op
Iteration   3: 3001.070 ns/op
Iteration   4: 3137.951 ns/op
Iteration   5: 3131.077 ns/op

# Run progress: 18.52% complete, ETA 00:36:46
# Fork: 3 of 3
# Warmup Iteration   1: 3241.267 ns/op
# Warmup Iteration   2: 2924.363 ns/op
# Warmup Iteration   3: 2870.067 ns/op
# Warmup Iteration   4: 3076.763 ns/op
# Warmup Iteration   5: 3168.376 ns/op
Iteration   1: 3185.863 ns/op
Iteration   2: 3044.979 ns/op
Iteration   3: 2963.332 ns/op
Iteration   4: 2963.402 ns/op
Iteration   5: 2925.565 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception":
  3083.275 ±(99.9%) 114.324 ns/op [Average]
  (min, avg, max) = (2925.565, 3083.275, 3231.268), stdev = 106.938
  CI (99.9%): [2968.951, 3197.598] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception
# Parameters: (stackDepth = 128)

# Run progress: 22.22% complete, ETA 00:35:06
# Fork: 1 of 3
# Warmup Iteration   1: 5102.269 ns/op
# Warmup Iteration   2: 4814.086 ns/op
# Warmup Iteration   3: 4806.112 ns/op
# Warmup Iteration   4: 5123.060 ns/op
# Warmup Iteration   5: 4776.042 ns/op
Iteration   1: 4774.261 ns/op
Iteration   2: 5146.498 ns/op
Iteration   3: 4896.847 ns/op
Iteration   4: 5155.777 ns/op
Iteration   5: 5159.775 ns/op

# Run progress: 25.93% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 4943.681 ns/op
# Warmup Iteration   2: 4957.076 ns/op
# Warmup Iteration   3: 4629.516 ns/op
# Warmup Iteration   4: 4744.176 ns/op
# Warmup Iteration   5: 4741.419 ns/op
Iteration   1: 4745.517 ns/op
Iteration   2: 4796.954 ns/op
Iteration   3: 4912.548 ns/op
Iteration   4: 5222.710 ns/op
Iteration   5: 4778.569 ns/op

# Run progress: 29.63% complete, ETA 00:31:45
# Fork: 3 of 3
# Warmup Iteration   1: 5207.020 ns/op
# Warmup Iteration   2: 5174.056 ns/op
# Warmup Iteration   3: 4838.570 ns/op
# Warmup Iteration   4: 4609.122 ns/op
# Warmup Iteration   5: 4937.444 ns/op
Iteration   1: 5012.535 ns/op
Iteration   2: 5080.600 ns/op
Iteration   3: 5191.881 ns/op
Iteration   4: 5188.316 ns/op
Iteration   5: 5178.037 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception":
  5016.055 ±(99.9%) 192.068 ns/op [Average]
  (min, avg, max) = (4745.517, 5016.055, 5222.710), stdev = 179.660
  CI (99.9%): [4823.987, 5208.123] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace
# Parameters: (stackDepth = 1)

# Run progress: 33.33% complete, ETA 00:30:05
# Fork: 1 of 3
# Warmup Iteration   1: 6.384 ns/op
# Warmup Iteration   2: 5.784 ns/op
# Warmup Iteration   3: 5.734 ns/op
# Warmup Iteration   4: 5.751 ns/op
# Warmup Iteration   5: 5.812 ns/op
Iteration   1: 5.683 ns/op
Iteration   2: 5.873 ns/op
Iteration   3: 5.824 ns/op
Iteration   4: 5.749 ns/op
Iteration   5: 5.774 ns/op

# Run progress: 37.04% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 6.474 ns/op
# Warmup Iteration   2: 5.998 ns/op
# Warmup Iteration   3: 5.890 ns/op
# Warmup Iteration   4: 5.662 ns/op
# Warmup Iteration   5: 5.803 ns/op
Iteration   1: 5.874 ns/op
Iteration   2: 5.848 ns/op
Iteration   3: 5.857 ns/op
Iteration   4: 5.853 ns/op
Iteration   5: 6.014 ns/op

# Run progress: 40.74% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 6.187 ns/op
# Warmup Iteration   2: 5.930 ns/op
# Warmup Iteration   3: 5.689 ns/op
# Warmup Iteration   4: 5.776 ns/op
# Warmup Iteration   5: 5.928 ns/op
Iteration   1: 5.790 ns/op
Iteration   2: 5.864 ns/op
Iteration   3: 5.798 ns/op
Iteration   4: 5.821 ns/op
Iteration   5: 6.025 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace":
  5.843 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (5.683, 5.843, 6.025), stdev = 0.088
  CI (99.9%): [5.749, 5.938] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace
# Parameters: (stackDepth = 64)

# Run progress: 44.44% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 37.078 ns/op
# Warmup Iteration   2: 34.805 ns/op
# Warmup Iteration   3: 35.879 ns/op
# Warmup Iteration   4: 34.790 ns/op
# Warmup Iteration   5: 34.407 ns/op
Iteration   1: 32.152 ns/op
Iteration   2: 31.757 ns/op
Iteration   3: 31.729 ns/op
Iteration   4: 34.113 ns/op
Iteration   5: 34.842 ns/op

# Run progress: 48.15% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 35.713 ns/op
# Warmup Iteration   2: 33.528 ns/op
# Warmup Iteration   3: 35.789 ns/op
# Warmup Iteration   4: 35.143 ns/op
# Warmup Iteration   5: 35.540 ns/op
Iteration   1: 33.724 ns/op
Iteration   2: 35.169 ns/op
Iteration   3: 32.769 ns/op
Iteration   4: 32.519 ns/op
Iteration   5: 33.889 ns/op

# Run progress: 51.85% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 34.552 ns/op
# Warmup Iteration   2: 34.388 ns/op
# Warmup Iteration   3: 32.544 ns/op
# Warmup Iteration   4: 33.315 ns/op
# Warmup Iteration   5: 31.828 ns/op
Iteration   1: 33.797 ns/op
Iteration   2: 34.950 ns/op
Iteration   3: 35.451 ns/op
Iteration   4: 32.159 ns/op
Iteration   5: 32.208 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace":
  33.415 ±(99.9%) 1.400 ns/op [Average]
  (min, avg, max) = (31.729, 33.415, 35.451), stdev = 1.310
  CI (99.9%): [32.015, 34.815] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace
# Parameters: (stackDepth = 128)

# Run progress: 55.56% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 87.031 ns/op
# Warmup Iteration   2: 78.139 ns/op
# Warmup Iteration   3: 74.052 ns/op
# Warmup Iteration   4: 79.900 ns/op
# Warmup Iteration   5: 79.516 ns/op
Iteration   1: 78.724 ns/op
Iteration   2: 72.801 ns/op
Iteration   3: 75.293 ns/op
Iteration   4: 81.034 ns/op
Iteration   5: 81.681 ns/op

# Run progress: 59.26% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 82.461 ns/op
# Warmup Iteration   2: 74.203 ns/op
# Warmup Iteration   3: 73.163 ns/op
# Warmup Iteration   4: 74.416 ns/op
# Warmup Iteration   5: 80.148 ns/op
Iteration   1: 80.176 ns/op
Iteration   2: 78.347 ns/op
Iteration   3: 75.661 ns/op
Iteration   4: 80.408 ns/op
Iteration   5: 74.092 ns/op

# Run progress: 62.96% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 84.033 ns/op
# Warmup Iteration   2: 79.742 ns/op
# Warmup Iteration   3: 81.565 ns/op
# Warmup Iteration   4: 79.428 ns/op
# Warmup Iteration   5: 76.273 ns/op
Iteration   1: 73.097 ns/op
Iteration   2: 73.785 ns/op
Iteration   3: 74.502 ns/op
Iteration   4: 75.474 ns/op
Iteration   5: 80.115 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace":
  77.013 ±(99.9%) 3.372 ns/op [Average]
  (min, avg, max) = (72.801, 77.013, 81.681), stdev = 3.154
  CI (99.9%): [73.640, 80.385] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace
# Parameters: (stackDepth = 1)

# Run progress: 66.67% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 21851.404 ns/op
# Warmup Iteration   2: 20909.683 ns/op
# Warmup Iteration   3: 21501.012 ns/op
# Warmup Iteration   4: 22403.418 ns/op
# Warmup Iteration   5: 23150.740 ns/op
Iteration   1: 20713.268 ns/op
Iteration   2: 20759.842 ns/op
Iteration   3: 20775.696 ns/op
Iteration   4: 20800.001 ns/op
Iteration   5: 20810.196 ns/op

# Run progress: 70.37% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 24462.941 ns/op
# Warmup Iteration   2: 22823.407 ns/op
# Warmup Iteration   3: 22852.996 ns/op
# Warmup Iteration   4: 22833.836 ns/op
# Warmup Iteration   5: 22776.912 ns/op
Iteration   1: 20380.609 ns/op
Iteration   2: 20608.912 ns/op
Iteration   3: 20696.389 ns/op
Iteration   4: 20668.392 ns/op
Iteration   5: 20840.705 ns/op

# Run progress: 74.07% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 23306.134 ns/op
# Warmup Iteration   2: 21248.604 ns/op
# Warmup Iteration   3: 22623.816 ns/op
# Warmup Iteration   4: 22542.526 ns/op
# Warmup Iteration   5: 22446.486 ns/op
Iteration   1: 22426.618 ns/op
Iteration   2: 22389.429 ns/op
Iteration   3: 22418.185 ns/op
Iteration   4: 21313.311 ns/op
Iteration   5: 22436.405 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace":
  21202.531 ±(99.9%) 835.622 ns/op [Average]
  (min, avg, max) = (20380.609, 21202.531, 22436.405), stdev = 781.641
  CI (99.9%): [20366.908, 22038.153] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace
# Parameters: (stackDepth = 64)

# Run progress: 77.78% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 90836.092 ns/op
# Warmup Iteration   2: 88793.462 ns/op
# Warmup Iteration   3: 89121.119 ns/op
# Warmup Iteration   4: 88963.963 ns/op
# Warmup Iteration   5: 89011.728 ns/op
Iteration   1: 88939.711 ns/op
Iteration   2: 89137.646 ns/op
Iteration   3: 91825.282 ns/op
Iteration   4: 96301.169 ns/op
Iteration   5: 88133.424 ns/op

# Run progress: 81.48% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 92808.004 ns/op
# Warmup Iteration   2: 88196.936 ns/op
# Warmup Iteration   3: 98208.416 ns/op
# Warmup Iteration   4: 97341.910 ns/op
# Warmup Iteration   5: 96714.162 ns/op
Iteration   1: 91507.082 ns/op
Iteration   2: 85889.738 ns/op
Iteration   3: 86049.341 ns/op
Iteration   4: 86312.422 ns/op
Iteration   5: 86500.919 ns/op

# Run progress: 85.19% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 105132.854 ns/op
# Warmup Iteration   2: 100845.080 ns/op
# Warmup Iteration   3: 89191.935 ns/op
# Warmup Iteration   4: 87920.961 ns/op
# Warmup Iteration   5: 94633.319 ns/op
Iteration   1: 100118.322 ns/op
Iteration   2: 98943.686 ns/op
Iteration   3: 98864.667 ns/op
Iteration   4: 98805.426 ns/op
Iteration   5: 98618.533 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace":
  92396.491 ±(99.9%) 5963.396 ns/op [Average]
  (min, avg, max) = (85889.738, 92396.491, 100118.322), stdev = 5578.164
  CI (99.9%): [86433.096, 98359.887] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace
# Parameters: (stackDepth = 128)

# Run progress: 88.89% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 165084.480 ns/op
# Warmup Iteration   2: 168304.952 ns/op
# Warmup Iteration   3: 167470.641 ns/op
# Warmup Iteration   4: 165926.695 ns/op
# Warmup Iteration   5: 162565.995 ns/op
Iteration   1: 171504.497 ns/op
Iteration   2: 171272.324 ns/op
Iteration   3: 170842.517 ns/op
Iteration   4: 170417.804 ns/op
Iteration   5: 171001.179 ns/op

# Run progress: 92.59% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 181352.743 ns/op
# Warmup Iteration   2: 154916.043 ns/op
# Warmup Iteration   3: 155805.990 ns/op
# Warmup Iteration   4: 155971.765 ns/op
# Warmup Iteration   5: 156195.500 ns/op
Iteration   1: 156148.851 ns/op
Iteration   2: 156318.620 ns/op
Iteration   3: 156441.344 ns/op
Iteration   4: 156772.717 ns/op
Iteration   5: 156553.952 ns/op

# Run progress: 96.30% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 184791.213 ns/op
# Warmup Iteration   2: 166728.010 ns/op
# Warmup Iteration   3: 172201.193 ns/op
# Warmup Iteration   4: 171205.058 ns/op
# Warmup Iteration   5: 171781.809 ns/op
Iteration   1: 174261.815 ns/op
Iteration   2: 152974.455 ns/op
Iteration   3: 152779.135 ns/op
Iteration   4: 153577.560 ns/op
Iteration   5: 154459.517 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ExceptionBenchmark.get_stack_trace":
  161688.419 ±(99.9%) 9053.065 ns/op [Average]
  (min, avg, max) = (152779.135, 161688.419, 174261.815), stdev = 8468.243
  CI (99.9%): [152635.354, 170741.484] (assumes normal distribution)


# Run complete. Total time: 00:45:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (stackDepth)  Mode  Cnt       Score      Error  Units
ExceptionBenchmark.create_exception                                            1  avgt   15    1181.398 ±   64.607  ns/op
ExceptionBenchmark.create_exception                                           64  avgt   15    3083.275 ±  114.324  ns/op
ExceptionBenchmark.create_exception                                          128  avgt   15    5016.055 ±  192.068  ns/op
ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace             1  avgt   15       5.843 ±    0.095  ns/op
ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace            64  avgt   15      33.415 ±    1.400  ns/op
ExceptionBenchmark.create_exception_by_overriding_fillInStackTrace           128  avgt   15      77.013 ±    3.372  ns/op
ExceptionBenchmark.get_stack_trace                                             1  avgt   15   21202.531 ±  835.622  ns/op
ExceptionBenchmark.get_stack_trace                                            64  avgt   15   92396.491 ± 5963.396  ns/op
ExceptionBenchmark.get_stack_trace                                           128  avgt   15  161688.419 ± 9053.065  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/ExceptionBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*DoubleMathBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/DoubleMathBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.abs
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.766 ns/op
# Warmup Iteration   2: 0.690 ns/op
# Warmup Iteration   3: 0.677 ns/op
# Warmup Iteration   4: 0.669 ns/op
# Warmup Iteration   5: 0.666 ns/op
Iteration   1: 0.666 ns/op
Iteration   2: 0.665 ns/op
Iteration   3: 0.665 ns/op
Iteration   4: 0.664 ns/op
Iteration   5: 0.665 ns/op

# Run progress: 2.38% complete, ETA 01:08:39
# Fork: 2 of 3
# Warmup Iteration   1: 0.635 ns/op
# Warmup Iteration   2: 0.652 ns/op
# Warmup Iteration   3: 0.647 ns/op
# Warmup Iteration   4: 0.648 ns/op
# Warmup Iteration   5: 0.646 ns/op
Iteration   1: 0.647 ns/op
Iteration   2: 0.646 ns/op
Iteration   3: 0.648 ns/op
Iteration   4: 0.651 ns/op
Iteration   5: 0.671 ns/op

# Run progress: 4.76% complete, ETA 01:06:56
# Fork: 3 of 3
# Warmup Iteration   1: 0.713 ns/op
# Warmup Iteration   2: 0.597 ns/op
# Warmup Iteration   3: 0.599 ns/op
# Warmup Iteration   4: 0.601 ns/op
# Warmup Iteration   5: 0.603 ns/op
Iteration   1: 0.605 ns/op
Iteration   2: 0.603 ns/op
Iteration   3: 0.604 ns/op
Iteration   4: 0.603 ns/op
Iteration   5: 0.671 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.abs":
  0.645 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (0.603, 0.645, 0.671), stdev = 0.027
  CI (99.9%): [0.616, 0.674] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.ceil
# Parameters: (size = 262144)

# Run progress: 7.14% complete, ETA 01:05:14
# Fork: 1 of 3
# Warmup Iteration   1: 0.667 ns/op
# Warmup Iteration   2: 0.602 ns/op
# Warmup Iteration   3: 0.599 ns/op
# Warmup Iteration   4: 0.595 ns/op
# Warmup Iteration   5: 0.593 ns/op
Iteration   1: 0.597 ns/op
Iteration   2: 0.594 ns/op
Iteration   3: 0.594 ns/op
Iteration   4: 0.594 ns/op
Iteration   5: 0.594 ns/op

# Run progress: 9.52% complete, ETA 01:03:34
# Fork: 2 of 3
# Warmup Iteration   1: 0.728 ns/op
# Warmup Iteration   2: 0.671 ns/op
# Warmup Iteration   3: 0.662 ns/op
# Warmup Iteration   4: 0.657 ns/op
# Warmup Iteration   5: 0.657 ns/op
Iteration   1: 0.654 ns/op
Iteration   2: 0.588 ns/op
Iteration   3: 0.596 ns/op
Iteration   4: 0.595 ns/op
Iteration   5: 0.596 ns/op

# Run progress: 11.90% complete, ETA 01:01:53
# Fork: 3 of 3
# Warmup Iteration   1: 0.718 ns/op
# Warmup Iteration   2: 0.613 ns/op
# Warmup Iteration   3: 0.668 ns/op
# Warmup Iteration   4: 0.662 ns/op
# Warmup Iteration   5: 0.659 ns/op
Iteration   1: 0.659 ns/op
Iteration   2: 0.658 ns/op
Iteration   3: 0.657 ns/op
Iteration   4: 0.655 ns/op
Iteration   5: 0.656 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.ceil":
  0.619 ±(99.9%) 0.034 ns/op [Average]
  (min, avg, max) = (0.588, 0.619, 0.659), stdev = 0.032
  CI (99.9%): [0.585, 0.653] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.cos
# Parameters: (size = 262144)

# Run progress: 14.29% complete, ETA 01:00:13
# Fork: 1 of 3
# Warmup Iteration   1: 27.639 ns/op
# Warmup Iteration   2: 26.731 ns/op
# Warmup Iteration   3: 26.739 ns/op
# Warmup Iteration   4: 26.759 ns/op
# Warmup Iteration   5: 26.724 ns/op
Iteration   1: 26.738 ns/op
Iteration   2: 26.759 ns/op
Iteration   3: 26.739 ns/op
Iteration   4: 26.650 ns/op
Iteration   5: 26.737 ns/op

# Run progress: 16.67% complete, ETA 00:58:32
# Fork: 2 of 3
# Warmup Iteration   1: 27.811 ns/op
# Warmup Iteration   2: 26.760 ns/op
# Warmup Iteration   3: 26.711 ns/op
# Warmup Iteration   4: 26.726 ns/op
# Warmup Iteration   5: 26.700 ns/op
Iteration   1: 29.800 ns/op
Iteration   2: 29.631 ns/op
Iteration   3: 29.552 ns/op
Iteration   4: 29.447 ns/op
Iteration   5: 29.361 ns/op

# Run progress: 19.05% complete, ETA 00:56:52
# Fork: 3 of 3
# Warmup Iteration   1: 27.926 ns/op
# Warmup Iteration   2: 28.776 ns/op
# Warmup Iteration   3: 28.891 ns/op
# Warmup Iteration   4: 28.822 ns/op
# Warmup Iteration   5: 28.796 ns/op
Iteration   1: 28.797 ns/op
Iteration   2: 28.752 ns/op
Iteration   3: 28.711 ns/op
Iteration   4: 28.679 ns/op
Iteration   5: 28.717 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.cos":
  28.338 ±(99.9%) 1.320 ns/op [Average]
  (min, avg, max) = (26.650, 28.338, 29.800), stdev = 1.235
  CI (99.9%): [27.018, 29.658] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.exp
# Parameters: (size = 262144)

# Run progress: 21.43% complete, ETA 00:55:11
# Fork: 1 of 3
# Warmup Iteration   1: 4.450 ns/op
# Warmup Iteration   2: 4.261 ns/op
# Warmup Iteration   3: 4.259 ns/op
# Warmup Iteration   4: 4.269 ns/op
# Warmup Iteration   5: 4.255 ns/op
Iteration   1: 4.260 ns/op
Iteration   2: 4.652 ns/op
Iteration   3: 4.622 ns/op
Iteration   4: 4.602 ns/op
Iteration   5: 4.593 ns/op

# Run progress: 23.81% complete, ETA 00:53:31
# Fork: 2 of 3
# Warmup Iteration   1: 4.830 ns/op
# Warmup Iteration   2: 4.745 ns/op
# Warmup Iteration   3: 4.713 ns/op
# Warmup Iteration   4: 4.709 ns/op
# Warmup Iteration   5: 4.696 ns/op
Iteration   1: 4.572 ns/op
Iteration   2: 4.575 ns/op
Iteration   3: 4.582 ns/op
Iteration   4: 4.579 ns/op
Iteration   5: 4.575 ns/op

# Run progress: 26.19% complete, ETA 00:51:50
# Fork: 3 of 3
# Warmup Iteration   1: 4.905 ns/op
# Warmup Iteration   2: 4.703 ns/op
# Warmup Iteration   3: 4.682 ns/op
# Warmup Iteration   4: 4.683 ns/op
# Warmup Iteration   5: 4.207 ns/op
Iteration   1: 4.231 ns/op
Iteration   2: 4.239 ns/op
Iteration   3: 4.243 ns/op
Iteration   4: 4.240 ns/op
Iteration   5: 4.247 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.exp":
  4.454 ±(99.9%) 0.192 ns/op [Average]
  (min, avg, max) = (4.231, 4.454, 4.652), stdev = 0.179
  CI (99.9%): [4.263, 4.646] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.floor
# Parameters: (size = 262144)

# Run progress: 28.57% complete, ETA 00:50:10
# Fork: 1 of 3
# Warmup Iteration   1: 0.645 ns/op
# Warmup Iteration   2: 0.660 ns/op
# Warmup Iteration   3: 0.654 ns/op
# Warmup Iteration   4: 0.649 ns/op
# Warmup Iteration   5: 0.595 ns/op
Iteration   1: 0.600 ns/op
Iteration   2: 0.602 ns/op
Iteration   3: 0.603 ns/op
Iteration   4: 0.603 ns/op
Iteration   5: 0.604 ns/op

# Run progress: 30.95% complete, ETA 00:48:29
# Fork: 2 of 3
# Warmup Iteration   1: 0.647 ns/op
# Warmup Iteration   2: 0.597 ns/op
# Warmup Iteration   3: 0.595 ns/op
# Warmup Iteration   4: 0.594 ns/op
# Warmup Iteration   5: 0.595 ns/op
Iteration   1: 0.600 ns/op
Iteration   2: 0.666 ns/op
Iteration   3: 0.592 ns/op
Iteration   4: 0.594 ns/op
Iteration   5: 0.595 ns/op

# Run progress: 33.33% complete, ETA 00:46:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.739 ns/op
# Warmup Iteration   2: 0.664 ns/op
# Warmup Iteration   3: 0.657 ns/op
# Warmup Iteration   4: 0.654 ns/op
# Warmup Iteration   5: 0.653 ns/op
Iteration   1: 0.584 ns/op
Iteration   2: 0.591 ns/op
Iteration   3: 0.592 ns/op
Iteration   4: 0.592 ns/op
Iteration   5: 0.593 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.floor":
  0.601 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (0.584, 0.601, 0.666), stdev = 0.019
  CI (99.9%): [0.581, 0.621] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.fma
# Parameters: (size = 262144)

# Run progress: 35.71% complete, ETA 00:45:09
# Fork: 1 of 3
# Warmup Iteration   1: 4.294 ns/op
# Warmup Iteration   2: 2.360 ns/op
# Warmup Iteration   3: 2.351 ns/op
# Warmup Iteration   4: 2.346 ns/op
# Warmup Iteration   5: 3.359 ns/op
Iteration   1: 3.598 ns/op
Iteration   2: 3.592 ns/op
Iteration   3: 3.588 ns/op
Iteration   4: 3.279 ns/op
Iteration   5: 2.333 ns/op

# Run progress: 38.10% complete, ETA 00:43:28
# Fork: 2 of 3
# Warmup Iteration   1: 4.894 ns/op
# Warmup Iteration   2: 2.608 ns/op
# Warmup Iteration   3: 2.583 ns/op
# Warmup Iteration   4: 2.572 ns/op
# Warmup Iteration   5: 3.007 ns/op
Iteration   1: 3.965 ns/op
Iteration   2: 3.950 ns/op
Iteration   3: 3.949 ns/op
Iteration   4: 3.938 ns/op
Iteration   5: 2.543 ns/op

# Run progress: 40.48% complete, ETA 00:41:48
# Fork: 3 of 3
# Warmup Iteration   1: 5.120 ns/op
# Warmup Iteration   2: 2.636 ns/op
# Warmup Iteration   3: 2.614 ns/op
# Warmup Iteration   4: 2.606 ns/op
# Warmup Iteration   5: 2.955 ns/op
Iteration   1: 4.012 ns/op
Iteration   2: 4.018 ns/op
Iteration   3: 4.015 ns/op
Iteration   4: 4.010 ns/op
Iteration   5: 2.328 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.fma":
  3.541 ±(99.9%) 0.674 ns/op [Average]
  (min, avg, max) = (2.328, 3.541, 4.018), stdev = 0.631
  CI (99.9%): [2.867, 4.215] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log
# Parameters: (size = 262144)

# Run progress: 42.86% complete, ETA 00:40:08
# Fork: 1 of 3
# Warmup Iteration   1: 16.327 ns/op
# Warmup Iteration   2: 16.040 ns/op
# Warmup Iteration   3: 16.026 ns/op
# Warmup Iteration   4: 16.016 ns/op
# Warmup Iteration   5: 16.029 ns/op
Iteration   1: 16.022 ns/op
Iteration   2: 16.021 ns/op
Iteration   3: 16.021 ns/op
Iteration   4: 16.013 ns/op
Iteration   5: 16.027 ns/op

# Run progress: 45.24% complete, ETA 00:38:27
# Fork: 2 of 3
# Warmup Iteration   1: 16.367 ns/op
# Warmup Iteration   2: 16.061 ns/op
# Warmup Iteration   3: 16.015 ns/op
# Warmup Iteration   4: 16.047 ns/op
# Warmup Iteration   5: 16.024 ns/op
Iteration   1: 16.006 ns/op
Iteration   2: 16.028 ns/op
Iteration   3: 16.024 ns/op
Iteration   4: 16.030 ns/op
Iteration   5: 16.024 ns/op

# Run progress: 47.62% complete, ETA 00:36:47
# Fork: 3 of 3
# Warmup Iteration   1: 16.400 ns/op
# Warmup Iteration   2: 16.038 ns/op
# Warmup Iteration   3: 16.018 ns/op
# Warmup Iteration   4: 16.017 ns/op
# Warmup Iteration   5: 16.029 ns/op
Iteration   1: 16.011 ns/op
Iteration   2: 16.024 ns/op
Iteration   3: 16.026 ns/op
Iteration   4: 16.008 ns/op
Iteration   5: 16.027 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log":
  16.021 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (16.006, 16.021, 16.030), stdev = 0.008
  CI (99.9%): [16.013, 16.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log10
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:35:07
# Fork: 1 of 3
# Warmup Iteration   1: 16.399 ns/op
# Warmup Iteration   2: 16.017 ns/op
# Warmup Iteration   3: 16.209 ns/op
# Warmup Iteration   4: 16.074 ns/op
# Warmup Iteration   5: 16.061 ns/op
Iteration   1: 16.077 ns/op
Iteration   2: 16.333 ns/op
Iteration   3: 16.529 ns/op
Iteration   4: 16.606 ns/op
Iteration   5: 16.110 ns/op

# Run progress: 52.38% complete, ETA 00:33:26
# Fork: 2 of 3
# Warmup Iteration   1: 16.567 ns/op
# Warmup Iteration   2: 16.284 ns/op
# Warmup Iteration   3: 16.188 ns/op
# Warmup Iteration   4: 16.109 ns/op
# Warmup Iteration   5: 16.095 ns/op
Iteration   1: 16.106 ns/op
Iteration   2: 16.096 ns/op
Iteration   3: 16.124 ns/op
Iteration   4: 16.077 ns/op
Iteration   5: 16.116 ns/op

# Run progress: 54.76% complete, ETA 00:31:46
# Fork: 3 of 3
# Warmup Iteration   1: 16.611 ns/op
# Warmup Iteration   2: 16.184 ns/op
# Warmup Iteration   3: 16.130 ns/op
# Warmup Iteration   4: 16.094 ns/op
# Warmup Iteration   5: 16.073 ns/op
Iteration   1: 16.064 ns/op
Iteration   2: 16.060 ns/op
Iteration   3: 16.063 ns/op
Iteration   4: 16.042 ns/op
Iteration   5: 16.067 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.log10":
  16.165 ±(99.9%) 0.190 ns/op [Average]
  (min, avg, max) = (16.042, 16.165, 16.606), stdev = 0.178
  CI (99.9%): [15.975, 16.355] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.max
# Parameters: (size = 262144)

# Run progress: 57.14% complete, ETA 00:30:06
# Fork: 1 of 3
# Warmup Iteration   1: 5.467 ns/op
# Warmup Iteration   2: 5.298 ns/op
# Warmup Iteration   3: 5.308 ns/op
# Warmup Iteration   4: 5.309 ns/op
# Warmup Iteration   5: 5.305 ns/op
Iteration   1: 5.310 ns/op
Iteration   2: 5.309 ns/op
Iteration   3: 5.318 ns/op
Iteration   4: 5.333 ns/op
Iteration   5: 5.684 ns/op

# Run progress: 59.52% complete, ETA 00:28:25
# Fork: 2 of 3
# Warmup Iteration   1: 5.385 ns/op
# Warmup Iteration   2: 5.261 ns/op
# Warmup Iteration   3: 5.245 ns/op
# Warmup Iteration   4: 5.242 ns/op
# Warmup Iteration   5: 5.242 ns/op
Iteration   1: 5.244 ns/op
Iteration   2: 5.258 ns/op
Iteration   3: 5.250 ns/op
Iteration   4: 5.242 ns/op
Iteration   5: 5.234 ns/op

# Run progress: 61.90% complete, ETA 00:26:45
# Fork: 3 of 3
# Warmup Iteration   1: 5.566 ns/op
# Warmup Iteration   2: 5.237 ns/op
# Warmup Iteration   3: 5.229 ns/op
# Warmup Iteration   4: 5.225 ns/op
# Warmup Iteration   5: 5.219 ns/op
Iteration   1: 5.228 ns/op
Iteration   2: 5.216 ns/op
Iteration   3: 5.216 ns/op
Iteration   4: 5.218 ns/op
Iteration   5: 5.239 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.max":
  5.287 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (5.216, 5.287, 5.684), stdev = 0.117
  CI (99.9%): [5.161, 5.412] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.min
# Parameters: (size = 262144)

# Run progress: 64.29% complete, ETA 00:25:05
# Fork: 1 of 3
# Warmup Iteration   1: 5.833 ns/op
# Warmup Iteration   2: 5.166 ns/op
# Warmup Iteration   3: 5.268 ns/op
# Warmup Iteration   4: 5.392 ns/op
# Warmup Iteration   5: 5.156 ns/op
Iteration   1: 5.155 ns/op
Iteration   2: 5.129 ns/op
Iteration   3: 5.147 ns/op
Iteration   4: 5.136 ns/op
Iteration   5: 5.141 ns/op

# Run progress: 66.67% complete, ETA 00:23:24
# Fork: 2 of 3
# Warmup Iteration   1: 5.478 ns/op
# Warmup Iteration   2: 5.199 ns/op
# Warmup Iteration   3: 5.193 ns/op
# Warmup Iteration   4: 5.187 ns/op
# Warmup Iteration   5: 5.174 ns/op
Iteration   1: 5.173 ns/op
Iteration   2: 5.167 ns/op
Iteration   3: 5.187 ns/op
Iteration   4: 5.175 ns/op
Iteration   5: 5.186 ns/op

# Run progress: 69.05% complete, ETA 00:21:44
# Fork: 3 of 3
# Warmup Iteration   1: 5.506 ns/op
# Warmup Iteration   2: 5.937 ns/op
# Warmup Iteration   3: 5.841 ns/op
# Warmup Iteration   4: 5.809 ns/op
# Warmup Iteration   5: 5.793 ns/op
Iteration   1: 5.797 ns/op
Iteration   2: 5.779 ns/op
Iteration   3: 5.774 ns/op
Iteration   4: 5.762 ns/op
Iteration   5: 5.768 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.min":
  5.365 ±(99.9%) 0.322 ns/op [Average]
  (min, avg, max) = (5.129, 5.365, 5.797), stdev = 0.301
  CI (99.9%): [5.043, 5.687] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.pow
# Parameters: (size = 262144)

# Run progress: 71.43% complete, ETA 00:20:04
# Fork: 1 of 3
# Warmup Iteration   1: 13.290 ns/op
# Warmup Iteration   2: 14.357 ns/op
# Warmup Iteration   3: 14.417 ns/op
# Warmup Iteration   4: 14.726 ns/op
# Warmup Iteration   5: 14.563 ns/op
Iteration   1: 14.308 ns/op
Iteration   2: 14.274 ns/op
Iteration   3: 14.266 ns/op
Iteration   4: 14.244 ns/op
Iteration   5: 14.230 ns/op

# Run progress: 73.81% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 13.442 ns/op
# Warmup Iteration   2: 13.908 ns/op
# Warmup Iteration   3: 13.979 ns/op
# Warmup Iteration   4: 13.955 ns/op
# Warmup Iteration   5: 13.942 ns/op
Iteration   1: 13.930 ns/op
Iteration   2: 13.917 ns/op
Iteration   3: 13.905 ns/op
Iteration   4: 13.918 ns/op
Iteration   5: 13.900 ns/op

# Run progress: 76.19% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 13.285 ns/op
# Warmup Iteration   2: 12.744 ns/op
# Warmup Iteration   3: 12.776 ns/op
# Warmup Iteration   4: 12.821 ns/op
# Warmup Iteration   5: 12.808 ns/op
Iteration   1: 12.827 ns/op
Iteration   2: 12.832 ns/op
Iteration   3: 12.857 ns/op
Iteration   4: 12.843 ns/op
Iteration   5: 12.830 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.pow":
  13.672 ±(99.9%) 0.672 ns/op [Average]
  (min, avg, max) = (12.827, 13.672, 14.308), stdev = 0.629
  CI (99.9%): [13.000, 14.344] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.round
# Parameters: (size = 262144)

# Run progress: 78.57% complete, ETA 00:15:03
# Fork: 1 of 3
# Warmup Iteration   1: 1.792 ns/op
# Warmup Iteration   2: 1.644 ns/op
# Warmup Iteration   3: 1.634 ns/op
# Warmup Iteration   4: 1.635 ns/op
# Warmup Iteration   5: 1.640 ns/op
Iteration   1: 1.629 ns/op
Iteration   2: 1.630 ns/op
Iteration   3: 1.629 ns/op
Iteration   4: 1.627 ns/op
Iteration   5: 1.629 ns/op

# Run progress: 80.95% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 1.943 ns/op
# Warmup Iteration   2: 1.631 ns/op
# Warmup Iteration   3: 1.636 ns/op
# Warmup Iteration   4: 1.637 ns/op
# Warmup Iteration   5: 1.640 ns/op
Iteration   1: 1.637 ns/op
Iteration   2: 1.638 ns/op
Iteration   3: 1.635 ns/op
Iteration   4: 1.857 ns/op
Iteration   5: 1.845 ns/op

# Run progress: 83.33% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 1.905 ns/op
# Warmup Iteration   2: 1.801 ns/op
# Warmup Iteration   3: 1.793 ns/op
# Warmup Iteration   4: 1.788 ns/op
# Warmup Iteration   5: 1.788 ns/op
Iteration   1: 1.781 ns/op
Iteration   2: 1.778 ns/op
Iteration   3: 1.776 ns/op
Iteration   4: 1.776 ns/op
Iteration   5: 1.775 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.round":
  1.710 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (1.627, 1.710, 1.857), stdev = 0.089
  CI (99.9%): [1.614, 1.805] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sin
# Parameters: (size = 262144)

# Run progress: 85.71% complete, ETA 00:10:02
# Fork: 1 of 3
# Warmup Iteration   1: 27.791 ns/op
# Warmup Iteration   2: 26.927 ns/op
# Warmup Iteration   3: 26.916 ns/op
# Warmup Iteration   4: 27.076 ns/op
# Warmup Iteration   5: 27.099 ns/op
Iteration   1: 27.113 ns/op
Iteration   2: 27.018 ns/op
Iteration   3: 26.945 ns/op
Iteration   4: 27.018 ns/op
Iteration   5: 26.889 ns/op

# Run progress: 88.10% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 28.322 ns/op
# Warmup Iteration   2: 27.041 ns/op
# Warmup Iteration   3: 26.952 ns/op
# Warmup Iteration   4: 27.030 ns/op
# Warmup Iteration   5: 26.962 ns/op
Iteration   1: 26.960 ns/op
Iteration   2: 26.973 ns/op
Iteration   3: 26.970 ns/op
Iteration   4: 26.947 ns/op
Iteration   5: 26.971 ns/op

# Run progress: 90.48% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 28.151 ns/op
# Warmup Iteration   2: 29.174 ns/op
# Warmup Iteration   3: 29.185 ns/op
# Warmup Iteration   4: 29.022 ns/op
# Warmup Iteration   5: 28.925 ns/op
Iteration   1: 28.897 ns/op
Iteration   2: 28.912 ns/op
Iteration   3: 28.891 ns/op
Iteration   4: 28.887 ns/op
Iteration   5: 28.864 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sin":
  27.617 ±(99.9%) 0.997 ns/op [Average]
  (min, avg, max) = (26.889, 27.617, 28.912), stdev = 0.933
  CI (99.9%): [26.620, 28.615] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sqrt
# Parameters: (size = 262144)

# Run progress: 92.86% complete, ETA 00:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 1.590 ns/op
# Warmup Iteration   2: 1.525 ns/op
# Warmup Iteration   3: 1.523 ns/op
# Warmup Iteration   4: 1.523 ns/op
# Warmup Iteration   5: 1.525 ns/op
Iteration   1: 1.523 ns/op
Iteration   2: 1.523 ns/op
Iteration   3: 1.523 ns/op
Iteration   4: 1.523 ns/op
Iteration   5: 1.523 ns/op

# Run progress: 95.24% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 1.595 ns/op
# Warmup Iteration   2: 1.525 ns/op
# Warmup Iteration   3: 1.523 ns/op
# Warmup Iteration   4: 1.522 ns/op
# Warmup Iteration   5: 1.610 ns/op
Iteration   1: 1.610 ns/op
Iteration   2: 1.607 ns/op
Iteration   3: 1.604 ns/op
Iteration   4: 1.602 ns/op
Iteration   5: 1.603 ns/op

# Run progress: 97.62% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 1.593 ns/op
# Warmup Iteration   2: 1.622 ns/op
# Warmup Iteration   3: 1.615 ns/op
# Warmup Iteration   4: 1.606 ns/op
# Warmup Iteration   5: 1.604 ns/op
Iteration   1: 1.603 ns/op
Iteration   2: 1.602 ns/op
Iteration   3: 1.602 ns/op
Iteration   4: 1.601 ns/op
Iteration   5: 1.603 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.DoubleMathBenchmark.sqrt":
  1.577 ±(99.9%) 0.042 ns/op [Average]
  (min, avg, max) = (1.523, 1.577, 1.610), stdev = 0.040
  CI (99.9%): [1.534, 1.619] (assumes normal distribution)


# Run complete. Total time: 01:10:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                  (size)  Mode  Cnt   Score   Error  Units
DoubleMathBenchmark.abs    262144  avgt   15   0.645 ± 0.029  ns/op
DoubleMathBenchmark.ceil   262144  avgt   15   0.619 ± 0.034  ns/op
DoubleMathBenchmark.cos    262144  avgt   15  28.338 ± 1.320  ns/op
DoubleMathBenchmark.exp    262144  avgt   15   4.454 ± 0.192  ns/op
DoubleMathBenchmark.floor  262144  avgt   15   0.601 ± 0.020  ns/op
DoubleMathBenchmark.fma    262144  avgt   15   3.541 ± 0.674  ns/op
DoubleMathBenchmark.log    262144  avgt   15  16.021 ± 0.008  ns/op
DoubleMathBenchmark.log10  262144  avgt   15  16.165 ± 0.190  ns/op
DoubleMathBenchmark.max    262144  avgt   15   5.287 ± 0.125  ns/op
DoubleMathBenchmark.min    262144  avgt   15   5.365 ± 0.322  ns/op
DoubleMathBenchmark.pow    262144  avgt   15  13.672 ± 0.672  ns/op
DoubleMathBenchmark.round  262144  avgt   15   1.710 ± 0.095  ns/op
DoubleMathBenchmark.sin    262144  avgt   15  27.617 ± 0.997  ns/op
DoubleMathBenchmark.sqrt   262144  avgt   15   1.577 ± 0.042  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/DoubleMathBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*VectorizationPatternsSingleIntArrayBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/VectorizationPatternsSingleIntArrayBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.add_const_to_each_array_element
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 153.528 us/op
# Warmup Iteration   2: 143.680 us/op
# Warmup Iteration   3: 134.276 us/op
# Warmup Iteration   4: 134.015 us/op
# Warmup Iteration   5: 133.817 us/op
Iteration   1: 133.466 us/op
Iteration   2: 133.594 us/op
Iteration   3: 133.275 us/op
Iteration   4: 133.218 us/op
Iteration   5: 133.019 us/op

# Run progress: 2.78% complete, ETA 00:58:35
# Fork: 2 of 3
# Warmup Iteration   1: 141.493 us/op
# Warmup Iteration   2: 143.295 us/op
# Warmup Iteration   3: 119.696 us/op
# Warmup Iteration   4: 120.513 us/op
# Warmup Iteration   5: 120.431 us/op
Iteration   1: 120.659 us/op
Iteration   2: 120.981 us/op
Iteration   3: 121.133 us/op
Iteration   4: 121.338 us/op
Iteration   5: 121.354 us/op

# Run progress: 5.56% complete, ETA 00:56:52
# Fork: 3 of 3
# Warmup Iteration   1: 143.114 us/op
# Warmup Iteration   2: 148.150 us/op
# Warmup Iteration   3: 123.494 us/op
# Warmup Iteration   4: 123.654 us/op
# Warmup Iteration   5: 123.950 us/op
Iteration   1: 124.269 us/op
Iteration   2: 124.199 us/op
Iteration   3: 124.156 us/op
Iteration   4: 124.267 us/op
Iteration   5: 138.509 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.add_const_to_each_array_element":
  127.162 ±(99.9%) 6.623 us/op [Average]
  (min, avg, max) = (120.659, 127.162, 138.509), stdev = 6.195
  CI (99.9%): [120.540, 133.785] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.increment_arrays_elements_backward_iterator
# Parameters: (size = 262144)

# Run progress: 8.33% complete, ETA 00:55:11
# Fork: 1 of 3
# Warmup Iteration   1: 143.659 us/op
# Warmup Iteration   2: 125.028 us/op
# Warmup Iteration   3: 155.938 us/op
# Warmup Iteration   4: 155.377 us/op
# Warmup Iteration   5: 155.101 us/op
Iteration   1: 154.788 us/op
Iteration   2: 154.423 us/op
Iteration   3: 154.482 us/op
Iteration   4: 154.365 us/op
Iteration   5: 154.344 us/op

# Run progress: 11.11% complete, ETA 00:53:30
# Fork: 2 of 3
# Warmup Iteration   1: 146.292 us/op
# Warmup Iteration   2: 138.415 us/op
# Warmup Iteration   3: 158.672 us/op
# Warmup Iteration   4: 158.288 us/op
# Warmup Iteration   5: 157.932 us/op
Iteration   1: 157.973 us/op
Iteration   2: 157.987 us/op
Iteration   3: 157.908 us/op
Iteration   4: 157.906 us/op
Iteration   5: 157.566 us/op

# Run progress: 13.89% complete, ETA 00:51:49
# Fork: 3 of 3
# Warmup Iteration   1: 130.515 us/op
# Warmup Iteration   2: 124.659 us/op
# Warmup Iteration   3: 143.785 us/op
# Warmup Iteration   4: 143.862 us/op
# Warmup Iteration   5: 143.792 us/op
Iteration   1: 143.783 us/op
Iteration   2: 143.773 us/op
Iteration   3: 143.859 us/op
Iteration   4: 144.156 us/op
Iteration   5: 144.023 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.increment_arrays_elements_backward_iterator":
  152.089 ±(99.9%) 6.576 us/op [Average]
  (min, avg, max) = (143.773, 152.089, 157.987), stdev = 6.151
  CI (99.9%): [145.513, 158.665] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.mod_each_array_element_by_const
# Parameters: (size = 262144)

# Run progress: 16.67% complete, ETA 00:50:09
# Fork: 1 of 3
# Warmup Iteration   1: 566.617 us/op
# Warmup Iteration   2: 588.947 us/op
# Warmup Iteration   3: 585.532 us/op
# Warmup Iteration   4: 583.195 us/op
# Warmup Iteration   5: 582.096 us/op
Iteration   1: 581.028 us/op
Iteration   2: 580.471 us/op
Iteration   3: 585.135 us/op
Iteration   4: 585.840 us/op
Iteration   5: 586.040 us/op

# Run progress: 19.44% complete, ETA 00:48:29
# Fork: 2 of 3
# Warmup Iteration   1: 559.353 us/op
# Warmup Iteration   2: 603.974 us/op
# Warmup Iteration   3: 599.208 us/op
# Warmup Iteration   4: 596.801 us/op
# Warmup Iteration   5: 594.614 us/op
Iteration   1: 594.289 us/op
Iteration   2: 581.209 us/op
Iteration   3: 587.782 us/op
Iteration   4: 587.609 us/op
Iteration   5: 586.908 us/op

# Run progress: 22.22% complete, ETA 00:46:48
# Fork: 3 of 3
# Warmup Iteration   1: 557.887 us/op
# Warmup Iteration   2: 598.631 us/op
# Warmup Iteration   3: 593.728 us/op
# Warmup Iteration   4: 591.181 us/op
# Warmup Iteration   5: 590.481 us/op
Iteration   1: 590.371 us/op
Iteration   2: 589.549 us/op
Iteration   3: 595.861 us/op
Iteration   4: 596.418 us/op
Iteration   5: 595.731 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.mod_each_array_element_by_const":
  588.283 ±(99.9%) 5.773 us/op [Average]
  (min, avg, max) = (580.471, 588.283, 596.418), stdev = 5.400
  CI (99.9%): [582.509, 594.056] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.multiply_each_array_element_by_const
# Parameters: (size = 262144)

# Run progress: 25.00% complete, ETA 00:45:08
# Fork: 1 of 3
# Warmup Iteration   1: 147.881 us/op
# Warmup Iteration   2: 145.432 us/op
# Warmup Iteration   3: 143.619 us/op
# Warmup Iteration   4: 144.014 us/op
# Warmup Iteration   5: 144.031 us/op
Iteration   1: 144.475 us/op
Iteration   2: 143.790 us/op
Iteration   3: 144.265 us/op
Iteration   4: 144.078 us/op
Iteration   5: 144.001 us/op

# Run progress: 27.78% complete, ETA 00:43:27
# Fork: 2 of 3
# Warmup Iteration   1: 166.630 us/op
# Warmup Iteration   2: 156.484 us/op
# Warmup Iteration   3: 156.273 us/op
# Warmup Iteration   4: 155.444 us/op
# Warmup Iteration   5: 154.697 us/op
Iteration   1: 154.667 us/op
Iteration   2: 154.174 us/op
Iteration   3: 154.545 us/op
Iteration   4: 154.442 us/op
Iteration   5: 155.506 us/op

# Run progress: 30.56% complete, ETA 00:41:47
# Fork: 3 of 3
# Warmup Iteration   1: 169.095 us/op
# Warmup Iteration   2: 155.667 us/op
# Warmup Iteration   3: 155.628 us/op
# Warmup Iteration   4: 154.205 us/op
# Warmup Iteration   5: 155.381 us/op
Iteration   1: 154.983 us/op
Iteration   2: 155.215 us/op
Iteration   3: 154.933 us/op
Iteration   4: 155.403 us/op
Iteration   5: 155.269 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.multiply_each_array_element_by_const":
  151.316 ±(99.9%) 5.645 us/op [Average]
  (min, avg, max) = (143.790, 151.316, 155.506), stdev = 5.280
  CI (99.9%): [145.672, 156.961] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.saves_induction_variable_to_each_array_element
# Parameters: (size = 262144)

# Run progress: 33.33% complete, ETA 00:40:07
# Fork: 1 of 3
# Warmup Iteration   1: 141.144 us/op
# Warmup Iteration   2: 112.321 us/op
# Warmup Iteration   3: 95.327 us/op
# Warmup Iteration   4: 95.311 us/op
# Warmup Iteration   5: 95.264 us/op
Iteration   1: 95.295 us/op
Iteration   2: 95.264 us/op
Iteration   3: 95.379 us/op
Iteration   4: 95.373 us/op
Iteration   5: 95.369 us/op

# Run progress: 36.11% complete, ETA 00:38:26
# Fork: 2 of 3
# Warmup Iteration   1: 141.598 us/op
# Warmup Iteration   2: 114.486 us/op
# Warmup Iteration   3: 96.219 us/op
# Warmup Iteration   4: 95.831 us/op
# Warmup Iteration   5: 95.700 us/op
Iteration   1: 97.093 us/op
Iteration   2: 97.203 us/op
Iteration   3: 97.521 us/op
Iteration   4: 97.238 us/op
Iteration   5: 97.188 us/op

# Run progress: 38.89% complete, ETA 00:36:46
# Fork: 3 of 3
# Warmup Iteration   1: 141.152 us/op
# Warmup Iteration   2: 120.872 us/op
# Warmup Iteration   3: 107.495 us/op
# Warmup Iteration   4: 106.175 us/op
# Warmup Iteration   5: 105.820 us/op
Iteration   1: 105.598 us/op
Iteration   2: 105.748 us/op
Iteration   3: 105.408 us/op
Iteration   4: 105.348 us/op
Iteration   5: 105.259 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.saves_induction_variable_to_each_array_element":
  99.352 ±(99.9%) 4.868 us/op [Average]
  (min, avg, max) = (95.264, 99.352, 105.748), stdev = 4.554
  CI (99.9%): [94.484, 104.221] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.shl_each_array_element_by_const
# Parameters: (size = 262144)

# Run progress: 41.67% complete, ETA 00:35:06
# Fork: 1 of 3
# Warmup Iteration   1: 115.936 us/op
# Warmup Iteration   2: 109.438 us/op
# Warmup Iteration   3: 139.994 us/op
# Warmup Iteration   4: 140.046 us/op
# Warmup Iteration   5: 140.158 us/op
Iteration   1: 140.120 us/op
Iteration   2: 140.099 us/op
Iteration   3: 140.387 us/op
Iteration   4: 140.271 us/op
Iteration   5: 140.344 us/op

# Run progress: 44.44% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 128.533 us/op
# Warmup Iteration   2: 122.057 us/op
# Warmup Iteration   3: 139.807 us/op
# Warmup Iteration   4: 156.603 us/op
# Warmup Iteration   5: 158.061 us/op
Iteration   1: 157.134 us/op
Iteration   2: 156.843 us/op
Iteration   3: 156.522 us/op
Iteration   4: 156.478 us/op
Iteration   5: 156.421 us/op

# Run progress: 47.22% complete, ETA 00:31:45
# Fork: 3 of 3
# Warmup Iteration   1: 115.443 us/op
# Warmup Iteration   2: 109.513 us/op
# Warmup Iteration   3: 140.133 us/op
# Warmup Iteration   4: 140.109 us/op
# Warmup Iteration   5: 140.131 us/op
Iteration   1: 140.088 us/op
Iteration   2: 140.074 us/op
Iteration   3: 140.125 us/op
Iteration   4: 140.189 us/op
Iteration   5: 140.266 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.shl_each_array_element_by_const":
  145.691 ±(99.9%) 8.601 us/op [Average]
  (min, avg, max) = (140.074, 145.691, 157.134), stdev = 8.045
  CI (99.9%): [137.090, 154.292] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:30:05
# Fork: 1 of 3
# Warmup Iteration   1: 147.068 us/op
# Warmup Iteration   2: 109.611 us/op
# Warmup Iteration   3: 82.338 us/op
# Warmup Iteration   4: 82.313 us/op
# Warmup Iteration   5: 83.895 us/op
Iteration   1: 91.680 us/op
Iteration   2: 90.886 us/op
Iteration   3: 90.521 us/op
Iteration   4: 90.446 us/op
Iteration   5: 90.342 us/op

# Run progress: 52.78% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 142.516 us/op
# Warmup Iteration   2: 126.172 us/op
# Warmup Iteration   3: 93.550 us/op
# Warmup Iteration   4: 93.119 us/op
# Warmup Iteration   5: 92.640 us/op
Iteration   1: 92.882 us/op
Iteration   2: 92.561 us/op
Iteration   3: 92.282 us/op
Iteration   4: 92.246 us/op
Iteration   5: 92.080 us/op

# Run progress: 55.56% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 140.269 us/op
# Warmup Iteration   2: 107.069 us/op
# Warmup Iteration   3: 82.965 us/op
# Warmup Iteration   4: 82.553 us/op
# Warmup Iteration   5: 82.435 us/op
Iteration   1: 82.327 us/op
Iteration   2: 82.301 us/op
Iteration   3: 82.349 us/op
Iteration   4: 94.982 us/op
Iteration   5: 94.086 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements":
  90.131 ±(99.9%) 4.532 us/op [Average]
  (min, avg, max) = (82.301, 90.131, 94.982), stdev = 4.239
  CI (99.9%): [85.599, 94.663] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_adding_a_const
# Parameters: (size = 262144)

# Run progress: 58.33% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 130.852 us/op
# Warmup Iteration   2: 134.401 us/op
# Warmup Iteration   3: 123.907 us/op
# Warmup Iteration   4: 123.704 us/op
# Warmup Iteration   5: 123.790 us/op
Iteration   1: 123.846 us/op
Iteration   2: 123.716 us/op
Iteration   3: 123.783 us/op
Iteration   4: 123.676 us/op
Iteration   5: 123.794 us/op

# Run progress: 61.11% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 143.034 us/op
# Warmup Iteration   2: 139.323 us/op
# Warmup Iteration   3: 133.811 us/op
# Warmup Iteration   4: 133.511 us/op
# Warmup Iteration   5: 133.293 us/op
Iteration   1: 133.128 us/op
Iteration   2: 133.038 us/op
Iteration   3: 132.902 us/op
Iteration   4: 132.796 us/op
Iteration   5: 132.632 us/op

# Run progress: 63.89% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 140.925 us/op
# Warmup Iteration   2: 131.561 us/op
# Warmup Iteration   3: 123.383 us/op
# Warmup Iteration   4: 123.306 us/op
# Warmup Iteration   5: 123.286 us/op
Iteration   1: 123.156 us/op
Iteration   2: 123.176 us/op
Iteration   3: 123.281 us/op
Iteration   4: 123.306 us/op
Iteration   5: 123.351 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_adding_a_const":
  126.639 ±(99.9%) 4.906 us/op [Average]
  (min, avg, max) = (123.156, 126.639, 133.128), stdev = 4.589
  CI (99.9%): [121.733, 131.545] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_shifting_and_masking
# Parameters: (size = 262144)

# Run progress: 66.67% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 166.032 us/op
# Warmup Iteration   2: 152.738 us/op
# Warmup Iteration   3: 152.148 us/op
# Warmup Iteration   4: 152.054 us/op
# Warmup Iteration   5: 151.961 us/op
Iteration   1: 151.886 us/op
Iteration   2: 151.580 us/op
Iteration   3: 151.425 us/op
Iteration   4: 151.528 us/op
Iteration   5: 151.711 us/op

# Run progress: 69.44% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 145.314 us/op
# Warmup Iteration   2: 138.935 us/op
# Warmup Iteration   3: 139.707 us/op
# Warmup Iteration   4: 139.822 us/op
# Warmup Iteration   5: 139.922 us/op
Iteration   1: 139.977 us/op
Iteration   2: 139.967 us/op
Iteration   3: 140.024 us/op
Iteration   4: 140.021 us/op
Iteration   5: 140.035 us/op

# Run progress: 72.22% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 150.203 us/op
# Warmup Iteration   2: 140.245 us/op
# Warmup Iteration   3: 158.874 us/op
# Warmup Iteration   4: 157.258 us/op
# Warmup Iteration   5: 156.497 us/op
Iteration   1: 156.299 us/op
Iteration   2: 156.074 us/op
Iteration   3: 155.810 us/op
Iteration   4: 155.734 us/op
Iteration   5: 155.528 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_shifting_and_masking":
  149.173 ±(99.9%) 7.431 us/op [Average]
  (min, avg, max) = (139.967, 149.173, 156.299), stdev = 6.951
  CI (99.9%): [141.743, 156.604] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_long_stride
# Parameters: (size = 262144)

# Run progress: 75.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 149.691 us/op
# Warmup Iteration   2: 143.640 us/op
# Warmup Iteration   3: 144.093 us/op
# Warmup Iteration   4: 144.393 us/op
# Warmup Iteration   5: 144.526 us/op
Iteration   1: 145.244 us/op
Iteration   2: 145.136 us/op
Iteration   3: 145.337 us/op
Iteration   4: 145.542 us/op
Iteration   5: 145.689 us/op

# Run progress: 77.78% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 169.310 us/op
# Warmup Iteration   2: 160.165 us/op
# Warmup Iteration   3: 159.295 us/op
# Warmup Iteration   4: 159.763 us/op
# Warmup Iteration   5: 159.293 us/op
Iteration   1: 159.344 us/op
Iteration   2: 159.085 us/op
Iteration   3: 159.038 us/op
Iteration   4: 158.856 us/op
Iteration   5: 158.744 us/op

# Run progress: 80.56% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 150.373 us/op
# Warmup Iteration   2: 143.957 us/op
# Warmup Iteration   3: 143.890 us/op
# Warmup Iteration   4: 144.313 us/op
# Warmup Iteration   5: 144.559 us/op
Iteration   1: 144.732 us/op
Iteration   2: 144.569 us/op
Iteration   3: 144.848 us/op
Iteration   4: 144.539 us/op
Iteration   5: 144.730 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_long_stride":
  149.695 ±(99.9%) 7.301 us/op [Average]
  (min, avg, max) = (144.539, 149.695, 159.344), stdev = 6.829
  CI (99.9%): [142.395, 156.996] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_matching_a_predicate
# Parameters: (size = 262144)

# Run progress: 83.33% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 291.662 us/op
# Warmup Iteration   2: 274.394 us/op
# Warmup Iteration   3: 273.363 us/op
# Warmup Iteration   4: 272.552 us/op
# Warmup Iteration   5: 271.519 us/op
Iteration   1: 270.427 us/op
Iteration   2: 270.333 us/op
Iteration   3: 269.713 us/op
Iteration   4: 269.576 us/op
Iteration   5: 269.838 us/op

# Run progress: 86.11% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 285.918 us/op
# Warmup Iteration   2: 271.282 us/op
# Warmup Iteration   3: 268.835 us/op
# Warmup Iteration   4: 264.179 us/op
# Warmup Iteration   5: 264.005 us/op
Iteration   1: 264.154 us/op
Iteration   2: 263.827 us/op
Iteration   3: 263.900 us/op
Iteration   4: 263.984 us/op
Iteration   5: 264.162 us/op

# Run progress: 88.89% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 254.045 us/op
# Warmup Iteration   2: 241.672 us/op
# Warmup Iteration   3: 242.023 us/op
# Warmup Iteration   4: 242.059 us/op
# Warmup Iteration   5: 241.797 us/op
Iteration   1: 242.443 us/op
Iteration   2: 242.123 us/op
Iteration   3: 242.370 us/op
Iteration   4: 242.971 us/op
Iteration   5: 242.578 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_matching_a_predicate":
  258.827 ±(99.9%) 13.063 us/op [Average]
  (min, avg, max) = (242.123, 258.827, 270.427), stdev = 12.219
  CI (99.9%): [245.764, 271.889] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_even_array_elements
# Parameters: (size = 262144)

# Run progress: 91.67% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 941.177 us/op
# Warmup Iteration   2: 904.258 us/op
# Warmup Iteration   3: 900.196 us/op
# Warmup Iteration   4: 897.310 us/op
# Warmup Iteration   5: 895.460 us/op
Iteration   1: 895.470 us/op
Iteration   2: 894.665 us/op
Iteration   3: 892.636 us/op
Iteration   4: 892.416 us/op
Iteration   5: 894.001 us/op

# Run progress: 94.44% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 935.532 us/op
# Warmup Iteration   2: 892.300 us/op
# Warmup Iteration   3: 889.309 us/op
# Warmup Iteration   4: 887.812 us/op
# Warmup Iteration   5: 886.923 us/op
Iteration   1: 887.297 us/op
Iteration   2: 887.508 us/op
Iteration   3: 886.855 us/op
Iteration   4: 885.466 us/op
Iteration   5: 887.437 us/op

# Run progress: 97.22% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 898.326 us/op
# Warmup Iteration   2: 858.536 us/op
# Warmup Iteration   3: 857.844 us/op
# Warmup Iteration   4: 857.741 us/op
# Warmup Iteration   5: 857.685 us/op
Iteration   1: 857.490 us/op
Iteration   2: 857.280 us/op
Iteration   3: 857.616 us/op
Iteration   4: 858.286 us/op
Iteration   5: 853.997 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_even_array_elements":
  879.228 ±(99.9%) 17.771 us/op [Average]
  (min, avg, max) = (853.997, 879.228, 895.470), stdev = 16.623
  CI (99.9%): [861.457, 896.999] (assumes normal distribution)


# Run complete. Total time: 01:00:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       (size)  Mode  Cnt    Score    Error  Units
VectorizationPatternsSingleIntArrayBenchmark.add_const_to_each_array_element                    262144  avgt   15  127.162 ±  6.623  us/op
VectorizationPatternsSingleIntArrayBenchmark.increment_arrays_elements_backward_iterator        262144  avgt   15  152.089 ±  6.576  us/op
VectorizationPatternsSingleIntArrayBenchmark.mod_each_array_element_by_const                    262144  avgt   15  588.283 ±  5.773  us/op
VectorizationPatternsSingleIntArrayBenchmark.multiply_each_array_element_by_const               262144  avgt   15  151.316 ±  5.645  us/op
VectorizationPatternsSingleIntArrayBenchmark.saves_induction_variable_to_each_array_element     262144  avgt   15   99.352 ±  4.868  us/op
VectorizationPatternsSingleIntArrayBenchmark.shl_each_array_element_by_const                    262144  avgt   15  145.691 ±  8.601  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements                          262144  avgt   15   90.131 ±  4.532  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_adding_a_const        262144  avgt   15  126.639 ±  4.906  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_by_shifting_and_masking  262144  avgt   15  149.173 ±  7.431  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_long_stride              262144  avgt   15  149.695 ±  7.301  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_array_elements_matching_a_predicate     262144  avgt   15  258.827 ± 13.063  us/op
VectorizationPatternsSingleIntArrayBenchmark.sum_of_all_even_array_elements                     262144  avgt   15  879.228 ± 17.771  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/VectorizationPatternsSingleIntArrayBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*VectorizationPatternsMultipleFloatArraysBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/VectorizationPatternsMultipleFloatArraysBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 244.593 us/op
# Warmup Iteration   2: 223.097 us/op
# Warmup Iteration   3: 235.934 us/op
# Warmup Iteration   4: 242.222 us/op
# Warmup Iteration   5: 241.710 us/op
Iteration   1: 240.757 us/op
Iteration   2: 240.099 us/op
Iteration   3: 239.936 us/op
Iteration   4: 239.893 us/op
Iteration   5: 219.273 us/op

# Run progress: 2.38% complete, ETA 01:08:39
# Fork: 2 of 3
# Warmup Iteration   1: 229.700 us/op
# Warmup Iteration   2: 216.885 us/op
# Warmup Iteration   3: 217.902 us/op
# Warmup Iteration   4: 219.752 us/op
# Warmup Iteration   5: 219.433 us/op
Iteration   1: 219.834 us/op
Iteration   2: 219.513 us/op
Iteration   3: 219.855 us/op
Iteration   4: 220.001 us/op
Iteration   5: 219.968 us/op

# Run progress: 4.76% complete, ETA 01:06:56
# Fork: 3 of 3
# Warmup Iteration   1: 258.434 us/op
# Warmup Iteration   2: 243.102 us/op
# Warmup Iteration   3: 233.801 us/op
# Warmup Iteration   4: 216.891 us/op
# Warmup Iteration   5: 218.329 us/op
Iteration   1: 219.233 us/op
Iteration   2: 219.663 us/op
Iteration   3: 219.603 us/op
Iteration   4: 219.873 us/op
Iteration   5: 219.926 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements":
  225.162 ±(99.9%) 10.021 us/op [Average]
  (min, avg, max) = (219.233, 225.162, 240.757), stdev = 9.373
  CI (99.9%): [215.141, 235.183] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_inc_index_access
# Parameters: (size = 262144)

# Run progress: 7.14% complete, ETA 01:05:14
# Fork: 1 of 3
# Warmup Iteration   1: 239.305 us/op
# Warmup Iteration   2: 227.178 us/op
# Warmup Iteration   3: 225.564 us/op
# Warmup Iteration   4: 227.224 us/op
# Warmup Iteration   5: 226.549 us/op
Iteration   1: 244.636 us/op
Iteration   2: 242.812 us/op
Iteration   3: 242.366 us/op
Iteration   4: 241.878 us/op
Iteration   5: 241.625 us/op

# Run progress: 9.52% complete, ETA 01:03:33
# Fork: 2 of 3
# Warmup Iteration   1: 251.555 us/op
# Warmup Iteration   2: 241.582 us/op
# Warmup Iteration   3: 240.876 us/op
# Warmup Iteration   4: 240.642 us/op
# Warmup Iteration   5: 240.412 us/op
Iteration   1: 240.391 us/op
Iteration   2: 240.463 us/op
Iteration   3: 240.349 us/op
Iteration   4: 240.305 us/op
Iteration   5: 240.188 us/op

# Run progress: 11.90% complete, ETA 01:01:53
# Fork: 3 of 3
# Warmup Iteration   1: 231.675 us/op
# Warmup Iteration   2: 220.083 us/op
# Warmup Iteration   3: 219.545 us/op
# Warmup Iteration   4: 220.555 us/op
# Warmup Iteration   5: 220.493 us/op
Iteration   1: 220.651 us/op
Iteration   2: 220.663 us/op
Iteration   3: 220.815 us/op
Iteration   4: 220.773 us/op
Iteration   5: 220.845 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_inc_index_access":
  234.584 ±(99.9%) 10.898 us/op [Average]
  (min, avg, max) = (220.651, 234.584, 244.636), stdev = 10.194
  CI (99.9%): [223.686, 245.482] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_modulo_index_access
# Parameters: (size = 262144)

# Run progress: 14.29% complete, ETA 01:00:12
# Fork: 1 of 3
# Warmup Iteration   1: 339.877 us/op
# Warmup Iteration   2: 329.324 us/op
# Warmup Iteration   3: 325.442 us/op
# Warmup Iteration   4: 325.028 us/op
# Warmup Iteration   5: 324.226 us/op
Iteration   1: 323.551 us/op
Iteration   2: 322.961 us/op
Iteration   3: 322.815 us/op
Iteration   4: 322.419 us/op
Iteration   5: 322.357 us/op

# Run progress: 16.67% complete, ETA 00:58:32
# Fork: 2 of 3
# Warmup Iteration   1: 298.352 us/op
# Warmup Iteration   2: 295.848 us/op
# Warmup Iteration   3: 295.134 us/op
# Warmup Iteration   4: 296.245 us/op
# Warmup Iteration   5: 295.590 us/op
Iteration   1: 295.685 us/op
Iteration   2: 295.762 us/op
Iteration   3: 295.645 us/op
Iteration   4: 295.536 us/op
Iteration   5: 295.643 us/op

# Run progress: 19.05% complete, ETA 00:56:53
# Fork: 3 of 3
# Warmup Iteration   1: 310.497 us/op
# Warmup Iteration   2: 295.563 us/op
# Warmup Iteration   3: 295.358 us/op
# Warmup Iteration   4: 295.679 us/op
# Warmup Iteration   5: 319.778 us/op
Iteration   1: 294.629 us/op
Iteration   2: 295.413 us/op
Iteration   3: 295.616 us/op
Iteration   4: 295.608 us/op
Iteration   5: 295.615 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_modulo_index_access":
  304.617 ±(99.9%) 14.249 us/op [Average]
  (min, avg, max) = (294.629, 304.617, 323.551), stdev = 13.329
  CI (99.9%): [290.368, 318.866] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.divide_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 21.43% complete, ETA 00:55:12
# Fork: 1 of 3
# Warmup Iteration   1: 232.019 us/op
# Warmup Iteration   2: 221.140 us/op
# Warmup Iteration   3: 221.510 us/op
# Warmup Iteration   4: 222.729 us/op
# Warmup Iteration   5: 222.429 us/op
Iteration   1: 222.761 us/op
Iteration   2: 247.609 us/op
Iteration   3: 245.141 us/op
Iteration   4: 243.781 us/op
Iteration   5: 223.053 us/op

# Run progress: 23.81% complete, ETA 00:53:31
# Fork: 2 of 3
# Warmup Iteration   1: 257.382 us/op
# Warmup Iteration   2: 250.243 us/op
# Warmup Iteration   3: 249.537 us/op
# Warmup Iteration   4: 249.603 us/op
# Warmup Iteration   5: 248.784 us/op
Iteration   1: 248.850 us/op
Iteration   2: 248.008 us/op
Iteration   3: 248.033 us/op
Iteration   4: 247.839 us/op
Iteration   5: 248.454 us/op

# Run progress: 26.19% complete, ETA 00:51:51
# Fork: 3 of 3
# Warmup Iteration   1: 235.338 us/op
# Warmup Iteration   2: 219.446 us/op
# Warmup Iteration   3: 221.166 us/op
# Warmup Iteration   4: 222.560 us/op
# Warmup Iteration   5: 222.478 us/op
Iteration   1: 222.480 us/op
Iteration   2: 222.731 us/op
Iteration   3: 222.909 us/op
Iteration   4: 222.994 us/op
Iteration   5: 222.962 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.divide_2_arrays_elements":
  235.841 ±(99.9%) 13.523 us/op [Average]
  (min, avg, max) = (222.480, 235.841, 248.850), stdev = 12.649
  CI (99.9%): [222.318, 249.364] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.extract_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 28.57% complete, ETA 00:50:10
# Fork: 1 of 3
# Warmup Iteration   1: 220.656 us/op
# Warmup Iteration   2: 186.827 us/op
# Warmup Iteration   3: 211.512 us/op
# Warmup Iteration   4: 220.065 us/op
# Warmup Iteration   5: 220.341 us/op
Iteration   1: 220.457 us/op
Iteration   2: 220.341 us/op
Iteration   3: 220.568 us/op
Iteration   4: 220.962 us/op
Iteration   5: 221.029 us/op

# Run progress: 30.95% complete, ETA 00:48:30
# Fork: 2 of 3
# Warmup Iteration   1: 224.443 us/op
# Warmup Iteration   2: 205.810 us/op
# Warmup Iteration   3: 227.795 us/op
# Warmup Iteration   4: 240.561 us/op
# Warmup Iteration   5: 240.510 us/op
Iteration   1: 241.608 us/op
Iteration   2: 239.811 us/op
Iteration   3: 240.100 us/op
Iteration   4: 239.843 us/op
Iteration   5: 239.625 us/op

# Run progress: 33.33% complete, ETA 00:46:50
# Fork: 3 of 3
# Warmup Iteration   1: 195.259 us/op
# Warmup Iteration   2: 186.223 us/op
# Warmup Iteration   3: 213.910 us/op
# Warmup Iteration   4: 219.251 us/op
# Warmup Iteration   5: 219.187 us/op
Iteration   1: 219.252 us/op
Iteration   2: 219.727 us/op
Iteration   3: 219.885 us/op
Iteration   4: 222.477 us/op
Iteration   5: 220.305 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.extract_2_arrays_elements":
  227.066 ±(99.9%) 10.313 us/op [Average]
  (min, avg, max) = (219.252, 227.066, 241.608), stdev = 9.647
  CI (99.9%): [216.753, 237.379] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.if_with_masking_conditional_flow
# Parameters: (size = 262144)

# Run progress: 35.71% complete, ETA 00:45:09
# Fork: 1 of 3
# Warmup Iteration   1: 242.273 us/op
# Warmup Iteration   2: 226.469 us/op
# Warmup Iteration   3: 233.446 us/op
# Warmup Iteration   4: 224.397 us/op
# Warmup Iteration   5: 224.143 us/op
Iteration   1: 224.216 us/op
Iteration   2: 223.378 us/op
Iteration   3: 222.939 us/op
Iteration   4: 222.960 us/op
Iteration   5: 223.222 us/op

# Run progress: 38.10% complete, ETA 00:43:29
# Fork: 2 of 3
# Warmup Iteration   1: 212.993 us/op
# Warmup Iteration   2: 203.366 us/op
# Warmup Iteration   3: 215.317 us/op
# Warmup Iteration   4: 203.188 us/op
# Warmup Iteration   5: 203.249 us/op
Iteration   1: 203.235 us/op
Iteration   2: 203.217 us/op
Iteration   3: 203.312 us/op
Iteration   4: 203.647 us/op
Iteration   5: 203.573 us/op

# Run progress: 40.48% complete, ETA 00:41:48
# Fork: 3 of 3
# Warmup Iteration   1: 243.023 us/op
# Warmup Iteration   2: 227.265 us/op
# Warmup Iteration   3: 233.330 us/op
# Warmup Iteration   4: 224.271 us/op
# Warmup Iteration   5: 223.675 us/op
Iteration   1: 223.544 us/op
Iteration   2: 223.634 us/op
Iteration   3: 222.638 us/op
Iteration   4: 223.484 us/op
Iteration   5: 223.217 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.if_with_masking_conditional_flow":
  216.681 ±(99.9%) 10.402 us/op [Average]
  (min, avg, max) = (203.217, 216.681, 224.216), stdev = 9.730
  CI (99.9%): [206.279, 227.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.mod_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 42.86% complete, ETA 00:40:08
# Fork: 1 of 3
# Warmup Iteration   1: 1833.168 us/op
# Warmup Iteration   2: 1755.298 us/op
# Warmup Iteration   3: 1755.171 us/op
# Warmup Iteration   4: 1754.973 us/op
# Warmup Iteration   5: 1755.245 us/op
Iteration   1: 1755.744 us/op
Iteration   2: 1759.483 us/op
Iteration   3: 1758.439 us/op
Iteration   4: 1763.167 us/op
Iteration   5: 1760.863 us/op

# Run progress: 45.24% complete, ETA 00:38:28
# Fork: 2 of 3
# Warmup Iteration   1: 2049.315 us/op
# Warmup Iteration   2: 1719.440 us/op
# Warmup Iteration   3: 1727.243 us/op
# Warmup Iteration   4: 1730.727 us/op
# Warmup Iteration   5: 1771.634 us/op
Iteration   1: 1773.415 us/op
Iteration   2: 1773.106 us/op
Iteration   3: 1774.240 us/op
Iteration   4: 1768.303 us/op
Iteration   5: 1771.094 us/op

# Run progress: 47.62% complete, ETA 00:36:47
# Fork: 3 of 3
# Warmup Iteration   1: 1810.621 us/op
# Warmup Iteration   2: 1978.599 us/op
# Warmup Iteration   3: 1955.987 us/op
# Warmup Iteration   4: 1948.239 us/op
# Warmup Iteration   5: 1939.109 us/op
Iteration   1: 1930.542 us/op
Iteration   2: 1927.799 us/op
Iteration   3: 1923.482 us/op
Iteration   4: 1929.415 us/op
Iteration   5: 1924.632 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.mod_2_arrays_elements":
  1819.582 ±(99.9%) 84.421 us/op [Average]
  (min, avg, max) = (1755.744, 1819.582, 1930.542), stdev = 78.967
  CI (99.9%): [1735.161, 1904.002] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 50.00% complete, ETA 00:35:07
# Fork: 1 of 3
# Warmup Iteration   1: 233.903 us/op
# Warmup Iteration   2: 222.565 us/op
# Warmup Iteration   3: 222.991 us/op
# Warmup Iteration   4: 224.426 us/op
# Warmup Iteration   5: 224.874 us/op
Iteration   1: 224.349 us/op
Iteration   2: 224.992 us/op
Iteration   3: 225.006 us/op
Iteration   4: 226.367 us/op
Iteration   5: 225.556 us/op

# Run progress: 52.38% complete, ETA 00:33:26
# Fork: 2 of 3
# Warmup Iteration   1: 233.743 us/op
# Warmup Iteration   2: 220.494 us/op
# Warmup Iteration   3: 220.165 us/op
# Warmup Iteration   4: 221.378 us/op
# Warmup Iteration   5: 221.506 us/op
Iteration   1: 221.199 us/op
Iteration   2: 221.040 us/op
Iteration   3: 221.202 us/op
Iteration   4: 221.142 us/op
Iteration   5: 221.195 us/op

# Run progress: 54.76% complete, ETA 00:31:46
# Fork: 3 of 3
# Warmup Iteration   1: 261.648 us/op
# Warmup Iteration   2: 245.012 us/op
# Warmup Iteration   3: 243.039 us/op
# Warmup Iteration   4: 242.779 us/op
# Warmup Iteration   5: 242.581 us/op
Iteration   1: 242.527 us/op
Iteration   2: 242.294 us/op
Iteration   3: 242.037 us/op
Iteration   4: 241.956 us/op
Iteration   5: 241.736 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements":
  229.507 ±(99.9%) 10.045 us/op [Average]
  (min, avg, max) = (221.040, 229.507, 242.527), stdev = 9.396
  CI (99.9%): [219.462, 239.551] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_backward_iterator
# Parameters: (size = 262144)

# Run progress: 57.14% complete, ETA 00:30:06
# Fork: 1 of 3
# Warmup Iteration   1: 238.082 us/op
# Warmup Iteration   2: 226.734 us/op
# Warmup Iteration   3: 226.506 us/op
# Warmup Iteration   4: 225.043 us/op
# Warmup Iteration   5: 225.345 us/op
Iteration   1: 225.258 us/op
Iteration   2: 224.873 us/op
Iteration   3: 225.203 us/op
Iteration   4: 225.627 us/op
Iteration   5: 225.174 us/op

# Run progress: 59.52% complete, ETA 00:28:25
# Fork: 2 of 3
# Warmup Iteration   1: 260.295 us/op
# Warmup Iteration   2: 219.675 us/op
# Warmup Iteration   3: 220.855 us/op
# Warmup Iteration   4: 221.404 us/op
# Warmup Iteration   5: 221.848 us/op
Iteration   1: 253.513 us/op
Iteration   2: 223.572 us/op
Iteration   3: 224.308 us/op
Iteration   4: 224.619 us/op
Iteration   5: 224.862 us/op

# Run progress: 61.90% complete, ETA 00:26:45
# Fork: 3 of 3
# Warmup Iteration   1: 236.269 us/op
# Warmup Iteration   2: 254.457 us/op
# Warmup Iteration   3: 252.149 us/op
# Warmup Iteration   4: 249.897 us/op
# Warmup Iteration   5: 248.701 us/op
Iteration   1: 247.784 us/op
Iteration   2: 247.497 us/op
Iteration   3: 246.767 us/op
Iteration   4: 246.667 us/op
Iteration   5: 246.405 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_backward_iterator":
  234.142 ±(99.9%) 12.743 us/op [Average]
  (min, avg, max) = (223.572, 234.142, 253.513), stdev = 11.920
  CI (99.9%): [221.399, 246.885] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_long_stride
# Parameters: (size = 262144)

# Run progress: 64.29% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 269.680 us/op
# Warmup Iteration   2: 288.848 us/op
# Warmup Iteration   3: 286.193 us/op
# Warmup Iteration   4: 285.846 us/op
# Warmup Iteration   5: 285.494 us/op
Iteration   1: 284.970 us/op
Iteration   2: 285.224 us/op
Iteration   3: 284.493 us/op
Iteration   4: 284.546 us/op
Iteration   5: 284.955 us/op

# Run progress: 66.67% complete, ETA 00:23:24
# Fork: 2 of 3
# Warmup Iteration   1: 280.652 us/op
# Warmup Iteration   2: 288.850 us/op
# Warmup Iteration   3: 287.208 us/op
# Warmup Iteration   4: 287.441 us/op
# Warmup Iteration   5: 286.489 us/op
Iteration   1: 285.900 us/op
Iteration   2: 285.554 us/op
Iteration   3: 285.594 us/op
Iteration   4: 285.625 us/op
Iteration   5: 285.579 us/op

# Run progress: 69.05% complete, ETA 00:21:44
# Fork: 3 of 3
# Warmup Iteration   1: 311.641 us/op
# Warmup Iteration   2: 292.254 us/op
# Warmup Iteration   3: 291.254 us/op
# Warmup Iteration   4: 291.722 us/op
# Warmup Iteration   5: 291.398 us/op
Iteration   1: 291.404 us/op
Iteration   2: 291.631 us/op
Iteration   3: 291.495 us/op
Iteration   4: 291.194 us/op
Iteration   5: 291.272 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_long_stride":
  287.296 ±(99.9%) 3.239 us/op [Average]
  (min, avg, max) = (284.493, 287.296, 291.631), stdev = 3.030
  CI (99.9%): [284.056, 290.535] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_of_mixed_types
# Parameters: (size = 262144)

# Run progress: 71.43% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 339.420 us/op
# Warmup Iteration   2: 326.355 us/op
# Warmup Iteration   3: 326.382 us/op
# Warmup Iteration   4: 326.700 us/op
# Warmup Iteration   5: 328.241 us/op
Iteration   1: 328.213 us/op
Iteration   2: 328.584 us/op
Iteration   3: 328.257 us/op
Iteration   4: 328.706 us/op
Iteration   5: 328.172 us/op

# Run progress: 73.81% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 342.580 us/op
# Warmup Iteration   2: 294.884 us/op
# Warmup Iteration   3: 294.990 us/op
# Warmup Iteration   4: 298.368 us/op
# Warmup Iteration   5: 301.245 us/op
Iteration   1: 301.652 us/op
Iteration   2: 301.432 us/op
Iteration   3: 301.717 us/op
Iteration   4: 302.165 us/op
Iteration   5: 302.167 us/op

# Run progress: 76.19% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 350.996 us/op
# Warmup Iteration   2: 297.941 us/op
# Warmup Iteration   3: 340.900 us/op
# Warmup Iteration   4: 338.709 us/op
# Warmup Iteration   5: 338.670 us/op
Iteration   1: 337.908 us/op
Iteration   2: 337.656 us/op
Iteration   3: 337.563 us/op
Iteration   4: 336.796 us/op
Iteration   5: 336.819 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_of_mixed_types":
  322.520 ±(99.9%) 16.695 us/op [Average]
  (min, avg, max) = (301.432, 322.520, 337.908), stdev = 15.616
  CI (99.9%): [305.825, 339.215] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_stride_2
# Parameters: (size = 262144)

# Run progress: 78.57% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 115.725 us/op
# Warmup Iteration   2: 111.522 us/op
# Warmup Iteration   3: 111.620 us/op
# Warmup Iteration   4: 111.728 us/op
# Warmup Iteration   5: 111.775 us/op
Iteration   1: 111.690 us/op
Iteration   2: 111.771 us/op
Iteration   3: 112.069 us/op
Iteration   4: 112.007 us/op
Iteration   5: 111.874 us/op

# Run progress: 80.95% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 133.011 us/op
# Warmup Iteration   2: 125.200 us/op
# Warmup Iteration   3: 124.273 us/op
# Warmup Iteration   4: 123.650 us/op
# Warmup Iteration   5: 123.367 us/op
Iteration   1: 123.011 us/op
Iteration   2: 123.066 us/op
Iteration   3: 122.993 us/op
Iteration   4: 122.828 us/op
Iteration   5: 123.027 us/op

# Run progress: 83.33% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 134.240 us/op
# Warmup Iteration   2: 112.017 us/op
# Warmup Iteration   3: 111.077 us/op
# Warmup Iteration   4: 111.620 us/op
# Warmup Iteration   5: 111.772 us/op
Iteration   1: 111.689 us/op
Iteration   2: 111.786 us/op
Iteration   3: 111.825 us/op
Iteration   4: 111.862 us/op
Iteration   5: 111.948 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_stride_2":
  115.563 ±(99.9%) 5.809 us/op [Average]
  (min, avg, max) = (111.689, 115.563, 123.066), stdev = 5.433
  CI (99.9%): [109.755, 121.372] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count
# Parameters: (size = 262144)

# Run progress: 85.71% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 260.614 us/op
# Warmup Iteration   2: 251.889 us/op
# Warmup Iteration   3: 249.425 us/op
# Warmup Iteration   4: 247.322 us/op
# Warmup Iteration   5: 246.022 us/op
Iteration   1: 245.299 us/op
Iteration   2: 244.848 us/op
Iteration   3: 244.830 us/op
Iteration   4: 244.925 us/op
Iteration   5: 245.427 us/op

# Run progress: 88.10% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 252.623 us/op
# Warmup Iteration   2: 241.626 us/op
# Warmup Iteration   3: 240.123 us/op
# Warmup Iteration   4: 239.651 us/op
# Warmup Iteration   5: 239.687 us/op
Iteration   1: 239.615 us/op
Iteration   2: 239.311 us/op
Iteration   3: 239.637 us/op
Iteration   4: 239.777 us/op
Iteration   5: 239.546 us/op

# Run progress: 90.48% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 227.977 us/op
# Warmup Iteration   2: 242.998 us/op
# Warmup Iteration   3: 220.734 us/op
# Warmup Iteration   4: 221.689 us/op
# Warmup Iteration   5: 221.894 us/op
Iteration   1: 221.764 us/op
Iteration   2: 222.067 us/op
Iteration   3: 222.096 us/op
Iteration   4: 222.130 us/op
Iteration   5: 222.137 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count":
  235.561 ±(99.9%) 10.869 us/op [Average]
  (min, avg, max) = (221.764, 235.561, 245.427), stdev = 10.167
  CI (99.9%): [224.691, 246.430] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 92.86% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 509.005 us/op
# Warmup Iteration   2: 482.774 us/op
# Warmup Iteration   3: 480.348 us/op
# Warmup Iteration   4: 477.809 us/op
# Warmup Iteration   5: 476.474 us/op
Iteration   1: 477.517 us/op
Iteration   2: 476.770 us/op
Iteration   3: 476.349 us/op
Iteration   4: 477.267 us/op
Iteration   5: 476.617 us/op

# Run progress: 95.24% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 513.071 us/op
# Warmup Iteration   2: 428.832 us/op
# Warmup Iteration   3: 431.649 us/op
# Warmup Iteration   4: 433.092 us/op
# Warmup Iteration   5: 435.675 us/op
Iteration   1: 436.633 us/op
Iteration   2: 436.593 us/op
Iteration   3: 436.536 us/op
Iteration   4: 436.642 us/op
Iteration   5: 436.642 us/op

# Run progress: 97.62% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 466.584 us/op
# Warmup Iteration   2: 437.669 us/op
# Warmup Iteration   3: 437.310 us/op
# Warmup Iteration   4: 437.854 us/op
# Warmup Iteration   5: 437.943 us/op
Iteration   1: 437.101 us/op
Iteration   2: 436.783 us/op
Iteration   3: 498.834 us/op
Iteration   4: 445.118 us/op
Iteration   5: 446.882 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleFloatArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements":
  455.486 ±(99.9%) 23.604 us/op [Average]
  (min, avg, max) = (436.536, 455.486, 498.834), stdev = 22.079
  CI (99.9%): [431.882, 479.089] (assumes normal distribution)


# Run complete. Total time: 01:10:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        (size)  Mode  Cnt     Score    Error  Units
VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements                          262144  avgt   15   225.162 ± 10.021  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_inc_index_access         262144  avgt   15   234.584 ± 10.898  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.add_2_arrays_elements_modulo_index_access      262144  avgt   15   304.617 ± 14.249  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.divide_2_arrays_elements                       262144  avgt   15   235.841 ± 13.523  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.extract_2_arrays_elements                      262144  avgt   15   227.066 ± 10.313  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.if_with_masking_conditional_flow               262144  avgt   15   216.681 ± 10.402  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.mod_2_arrays_elements                          262144  avgt   15  1819.582 ± 84.421  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements                     262144  avgt   15   229.507 ± 10.045  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_backward_iterator   262144  avgt   15   234.142 ± 12.743  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_long_stride         262144  avgt   15   287.296 ±  3.239  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_of_mixed_types      262144  avgt   15   322.520 ± 16.695  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_stride_2            262144  avgt   15   115.563 ±  5.809  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count  262144  avgt   15   235.561 ± 10.869  us/op
VectorizationPatternsMultipleFloatArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements     262144  avgt   15   455.486 ± 23.604  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/VectorizationPatternsMultipleFloatArraysBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*VectorizationPatternsMultipleIntArraysBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/VectorizationPatternsMultipleIntArraysBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 01:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 228.010 us/op
# Warmup Iteration   2: 211.285 us/op
# Warmup Iteration   3: 226.105 us/op
# Warmup Iteration   4: 204.794 us/op
# Warmup Iteration   5: 204.673 us/op
Iteration   1: 183.738 us/op
Iteration   2: 184.703 us/op
Iteration   3: 185.403 us/op
Iteration   4: 185.800 us/op
Iteration   5: 186.177 us/op

# Run progress: 2.22% complete, ETA 01:13:44
# Fork: 2 of 3
# Warmup Iteration   1: 188.680 us/op
# Warmup Iteration   2: 212.478 us/op
# Warmup Iteration   3: 227.347 us/op
# Warmup Iteration   4: 202.097 us/op
# Warmup Iteration   5: 201.607 us/op
Iteration   1: 201.187 us/op
Iteration   2: 201.410 us/op
Iteration   3: 200.929 us/op
Iteration   4: 200.895 us/op
Iteration   5: 200.773 us/op

# Run progress: 4.44% complete, ETA 01:12:06
# Fork: 3 of 3
# Warmup Iteration   1: 218.609 us/op
# Warmup Iteration   2: 207.264 us/op
# Warmup Iteration   3: 225.895 us/op
# Warmup Iteration   4: 204.821 us/op
# Warmup Iteration   5: 204.239 us/op
Iteration   1: 204.009 us/op
Iteration   2: 204.696 us/op
Iteration   3: 204.263 us/op
Iteration   4: 204.263 us/op
Iteration   5: 204.082 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements":
  196.822 ±(99.9%) 9.256 us/op [Average]
  (min, avg, max) = (183.738, 196.822, 204.696), stdev = 8.658
  CI (99.9%): [187.566, 206.078] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_inc_index_access
# Parameters: (size = 262144)

# Run progress: 6.67% complete, ETA 01:10:21
# Fork: 1 of 3
# Warmup Iteration   1: 254.525 us/op
# Warmup Iteration   2: 241.033 us/op
# Warmup Iteration   3: 240.461 us/op
# Warmup Iteration   4: 239.433 us/op
# Warmup Iteration   5: 239.244 us/op
Iteration   1: 215.361 us/op
Iteration   2: 216.650 us/op
Iteration   3: 217.564 us/op
Iteration   4: 218.572 us/op
Iteration   5: 218.755 us/op

# Run progress: 8.89% complete, ETA 01:08:39
# Fork: 2 of 3
# Warmup Iteration   1: 252.913 us/op
# Warmup Iteration   2: 243.497 us/op
# Warmup Iteration   3: 241.766 us/op
# Warmup Iteration   4: 241.161 us/op
# Warmup Iteration   5: 240.882 us/op
Iteration   1: 240.166 us/op
Iteration   2: 215.414 us/op
Iteration   3: 217.067 us/op
Iteration   4: 218.167 us/op
Iteration   5: 218.306 us/op

# Run progress: 11.11% complete, ETA 01:06:57
# Fork: 3 of 3
# Warmup Iteration   1: 251.182 us/op
# Warmup Iteration   2: 238.327 us/op
# Warmup Iteration   3: 236.498 us/op
# Warmup Iteration   4: 235.757 us/op
# Warmup Iteration   5: 235.468 us/op
Iteration   1: 235.322 us/op
Iteration   2: 235.117 us/op
Iteration   3: 234.909 us/op
Iteration   4: 234.867 us/op
Iteration   5: 234.955 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_inc_index_access":
  224.746 ±(99.9%) 10.211 us/op [Average]
  (min, avg, max) = (215.361, 224.746, 240.166), stdev = 9.551
  CI (99.9%): [214.535, 234.957] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_modulo_index_access
# Parameters: (size = 262144)

# Run progress: 13.33% complete, ETA 01:05:15
# Fork: 1 of 3
# Warmup Iteration   1: 343.414 us/op
# Warmup Iteration   2: 287.998 us/op
# Warmup Iteration   3: 320.738 us/op
# Warmup Iteration   4: 289.200 us/op
# Warmup Iteration   5: 285.115 us/op
Iteration   1: 286.132 us/op
Iteration   2: 286.975 us/op
Iteration   3: 287.314 us/op
Iteration   4: 287.639 us/op
Iteration   5: 287.509 us/op

# Run progress: 15.56% complete, ETA 01:03:34
# Fork: 2 of 3
# Warmup Iteration   1: 310.910 us/op
# Warmup Iteration   2: 318.692 us/op
# Warmup Iteration   3: 315.088 us/op
# Warmup Iteration   4: 314.823 us/op
# Warmup Iteration   5: 314.573 us/op
Iteration   1: 314.194 us/op
Iteration   2: 314.122 us/op
Iteration   3: 313.935 us/op
Iteration   4: 313.232 us/op
Iteration   5: 313.607 us/op

# Run progress: 17.78% complete, ETA 01:01:53
# Fork: 3 of 3
# Warmup Iteration   1: 337.847 us/op
# Warmup Iteration   2: 319.459 us/op
# Warmup Iteration   3: 318.296 us/op
# Warmup Iteration   4: 287.364 us/op
# Warmup Iteration   5: 290.835 us/op
Iteration   1: 291.561 us/op
Iteration   2: 291.933 us/op
Iteration   3: 292.275 us/op
Iteration   4: 292.651 us/op
Iteration   5: 292.225 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_modulo_index_access":
  297.687 ±(99.9%) 12.833 us/op [Average]
  (min, avg, max) = (286.132, 297.687, 314.194), stdev = 12.004
  CI (99.9%): [284.854, 310.520] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.extract_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 20.00% complete, ETA 01:00:13
# Fork: 1 of 3
# Warmup Iteration   1: 218.254 us/op
# Warmup Iteration   2: 189.073 us/op
# Warmup Iteration   3: 188.473 us/op
# Warmup Iteration   4: 187.965 us/op
# Warmup Iteration   5: 187.908 us/op
Iteration   1: 188.435 us/op
Iteration   2: 188.423 us/op
Iteration   3: 188.464 us/op
Iteration   4: 188.562 us/op
Iteration   5: 188.626 us/op

# Run progress: 22.22% complete, ETA 00:58:32
# Fork: 2 of 3
# Warmup Iteration   1: 227.486 us/op
# Warmup Iteration   2: 209.903 us/op
# Warmup Iteration   3: 213.134 us/op
# Warmup Iteration   4: 211.849 us/op
# Warmup Iteration   5: 211.428 us/op
Iteration   1: 210.727 us/op
Iteration   2: 210.453 us/op
Iteration   3: 210.346 us/op
Iteration   4: 209.990 us/op
Iteration   5: 209.971 us/op

# Run progress: 24.44% complete, ETA 00:56:51
# Fork: 3 of 3
# Warmup Iteration   1: 200.512 us/op
# Warmup Iteration   2: 205.558 us/op
# Warmup Iteration   3: 205.376 us/op
# Warmup Iteration   4: 205.134 us/op
# Warmup Iteration   5: 204.861 us/op
Iteration   1: 205.027 us/op
Iteration   2: 204.723 us/op
Iteration   3: 204.521 us/op
Iteration   4: 204.573 us/op
Iteration   5: 204.761 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.extract_2_arrays_elements":
  201.173 ±(99.9%) 10.233 us/op [Average]
  (min, avg, max) = (188.423, 201.173, 210.727), stdev = 9.571
  CI (99.9%): [190.941, 211.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.if_with_masking_conditional_flow
# Parameters: (size = 262144)

# Run progress: 26.67% complete, ETA 00:55:11
# Fork: 1 of 3
# Warmup Iteration   1: 202.508 us/op
# Warmup Iteration   2: 192.161 us/op
# Warmup Iteration   3: 191.968 us/op
# Warmup Iteration   4: 191.726 us/op
# Warmup Iteration   5: 192.077 us/op
Iteration   1: 191.835 us/op
Iteration   2: 191.854 us/op
Iteration   3: 192.170 us/op
Iteration   4: 193.106 us/op
Iteration   5: 192.174 us/op

# Run progress: 28.89% complete, ETA 00:53:30
# Fork: 2 of 3
# Warmup Iteration   1: 204.356 us/op
# Warmup Iteration   2: 213.680 us/op
# Warmup Iteration   3: 212.342 us/op
# Warmup Iteration   4: 211.373 us/op
# Warmup Iteration   5: 210.565 us/op
Iteration   1: 211.341 us/op
Iteration   2: 209.756 us/op
Iteration   3: 210.054 us/op
Iteration   4: 209.791 us/op
Iteration   5: 210.244 us/op

# Run progress: 31.11% complete, ETA 00:51:51
# Fork: 3 of 3
# Warmup Iteration   1: 204.131 us/op
# Warmup Iteration   2: 212.755 us/op
# Warmup Iteration   3: 190.725 us/op
# Warmup Iteration   4: 191.654 us/op
# Warmup Iteration   5: 191.708 us/op
Iteration   1: 191.795 us/op
Iteration   2: 191.778 us/op
Iteration   3: 191.794 us/op
Iteration   4: 192.133 us/op
Iteration   5: 192.171 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.if_with_masking_conditional_flow":
  198.133 ±(99.9%) 9.485 us/op [Average]
  (min, avg, max) = (191.778, 198.133, 211.341), stdev = 8.872
  CI (99.9%): [188.649, 207.618] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.mod_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 33.33% complete, ETA 00:50:10
# Fork: 1 of 3
# Warmup Iteration   1: 743.399 us/op
# Warmup Iteration   2: 700.199 us/op
# Warmup Iteration   3: 692.702 us/op
# Warmup Iteration   4: 689.092 us/op
# Warmup Iteration   5: 686.388 us/op
Iteration   1: 684.689 us/op
Iteration   2: 684.209 us/op
Iteration   3: 665.778 us/op
Iteration   4: 683.513 us/op
Iteration   5: 682.751 us/op

# Run progress: 35.56% complete, ETA 00:48:30
# Fork: 2 of 3
# Warmup Iteration   1: 692.380 us/op
# Warmup Iteration   2: 606.633 us/op
# Warmup Iteration   3: 674.225 us/op
# Warmup Iteration   4: 671.902 us/op
# Warmup Iteration   5: 668.690 us/op
Iteration   1: 667.515 us/op
Iteration   2: 646.746 us/op
Iteration   3: 566.835 us/op
Iteration   4: 610.007 us/op
Iteration   5: 612.598 us/op

# Run progress: 37.78% complete, ETA 00:46:49
# Fork: 3 of 3
# Warmup Iteration   1: 731.372 us/op
# Warmup Iteration   2: 676.535 us/op
# Warmup Iteration   3: 672.342 us/op
# Warmup Iteration   4: 671.513 us/op
# Warmup Iteration   5: 669.555 us/op
Iteration   1: 668.675 us/op
Iteration   2: 668.667 us/op
Iteration   3: 637.250 us/op
Iteration   4: 665.828 us/op
Iteration   5: 665.399 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.mod_2_arrays_elements":
  654.031 ±(99.9%) 36.315 us/op [Average]
  (min, avg, max) = (566.835, 654.031, 684.689), stdev = 33.969
  CI (99.9%): [617.716, 690.345] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 40.00% complete, ETA 00:45:09
# Fork: 1 of 3
# Warmup Iteration   1: 197.562 us/op
# Warmup Iteration   2: 187.418 us/op
# Warmup Iteration   3: 187.971 us/op
# Warmup Iteration   4: 187.399 us/op
# Warmup Iteration   5: 187.680 us/op
Iteration   1: 187.584 us/op
Iteration   2: 187.643 us/op
Iteration   3: 187.885 us/op
Iteration   4: 187.916 us/op
Iteration   5: 187.818 us/op

# Run progress: 42.22% complete, ETA 00:43:28
# Fork: 2 of 3
# Warmup Iteration   1: 202.025 us/op
# Warmup Iteration   2: 204.908 us/op
# Warmup Iteration   3: 204.971 us/op
# Warmup Iteration   4: 202.763 us/op
# Warmup Iteration   5: 201.869 us/op
Iteration   1: 201.710 us/op
Iteration   2: 201.809 us/op
Iteration   3: 201.071 us/op
Iteration   4: 201.094 us/op
Iteration   5: 201.098 us/op

# Run progress: 44.44% complete, ETA 00:41:48
# Fork: 3 of 3
# Warmup Iteration   1: 219.960 us/op
# Warmup Iteration   2: 189.393 us/op
# Warmup Iteration   3: 188.281 us/op
# Warmup Iteration   4: 187.025 us/op
# Warmup Iteration   5: 187.021 us/op
Iteration   1: 187.514 us/op
Iteration   2: 187.824 us/op
Iteration   3: 187.752 us/op
Iteration   4: 187.780 us/op
Iteration   5: 187.587 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements":
  192.272 ±(99.9%) 7.112 us/op [Average]
  (min, avg, max) = (187.514, 192.272, 201.809), stdev = 6.653
  CI (99.9%): [185.160, 199.384] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_backward_iterator
# Parameters: (size = 262144)

# Run progress: 46.67% complete, ETA 00:40:08
# Fork: 1 of 3
# Warmup Iteration   1: 201.761 us/op
# Warmup Iteration   2: 195.045 us/op
# Warmup Iteration   3: 208.716 us/op
# Warmup Iteration   4: 207.291 us/op
# Warmup Iteration   5: 205.964 us/op
Iteration   1: 205.438 us/op
Iteration   2: 205.675 us/op
Iteration   3: 205.575 us/op
Iteration   4: 205.137 us/op
Iteration   5: 204.720 us/op

# Run progress: 48.89% complete, ETA 00:38:27
# Fork: 2 of 3
# Warmup Iteration   1: 197.140 us/op
# Warmup Iteration   2: 187.646 us/op
# Warmup Iteration   3: 187.542 us/op
# Warmup Iteration   4: 186.940 us/op
# Warmup Iteration   5: 187.081 us/op
Iteration   1: 187.121 us/op
Iteration   2: 187.358 us/op
Iteration   3: 187.271 us/op
Iteration   4: 187.533 us/op
Iteration   5: 187.560 us/op

# Run progress: 51.11% complete, ETA 00:36:47
# Fork: 3 of 3
# Warmup Iteration   1: 224.267 us/op
# Warmup Iteration   2: 209.216 us/op
# Warmup Iteration   3: 195.191 us/op
# Warmup Iteration   4: 206.518 us/op
# Warmup Iteration   5: 205.628 us/op
Iteration   1: 205.545 us/op
Iteration   2: 205.088 us/op
Iteration   3: 204.868 us/op
Iteration   4: 204.655 us/op
Iteration   5: 204.077 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_backward_iterator":
  199.175 ±(99.9%) 9.249 us/op [Average]
  (min, avg, max) = (187.121, 199.175, 205.675), stdev = 8.651
  CI (99.9%): [189.926, 208.424] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_long_stride
# Parameters: (size = 262144)

# Run progress: 53.33% complete, ETA 00:35:06
# Fork: 1 of 3
# Warmup Iteration   1: 244.031 us/op
# Warmup Iteration   2: 230.967 us/op
# Warmup Iteration   3: 232.126 us/op
# Warmup Iteration   4: 251.717 us/op
# Warmup Iteration   5: 250.213 us/op
Iteration   1: 249.513 us/op
Iteration   2: 249.434 us/op
Iteration   3: 248.954 us/op
Iteration   4: 248.402 us/op
Iteration   5: 248.718 us/op

# Run progress: 55.56% complete, ETA 00:33:26
# Fork: 2 of 3
# Warmup Iteration   1: 264.953 us/op
# Warmup Iteration   2: 248.958 us/op
# Warmup Iteration   3: 248.577 us/op
# Warmup Iteration   4: 249.234 us/op
# Warmup Iteration   5: 249.069 us/op
Iteration   1: 248.449 us/op
Iteration   2: 248.202 us/op
Iteration   3: 248.456 us/op
Iteration   4: 248.228 us/op
Iteration   5: 248.179 us/op

# Run progress: 57.78% complete, ETA 00:31:46
# Fork: 3 of 3
# Warmup Iteration   1: 234.475 us/op
# Warmup Iteration   2: 223.970 us/op
# Warmup Iteration   3: 225.512 us/op
# Warmup Iteration   4: 227.214 us/op
# Warmup Iteration   5: 227.160 us/op
Iteration   1: 227.264 us/op
Iteration   2: 227.388 us/op
Iteration   3: 227.548 us/op
Iteration   4: 227.284 us/op
Iteration   5: 227.728 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_long_stride":
  241.583 ±(99.9%) 11.073 us/op [Average]
  (min, avg, max) = (227.264, 241.583, 249.513), stdev = 10.358
  CI (99.9%): [230.510, 252.656] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_of_mixed_types
# Parameters: (size = 262144)

# Run progress: 60.00% complete, ETA 00:30:05
# Fork: 1 of 3
# Warmup Iteration   1: 198.842 us/op
# Warmup Iteration   2: 191.588 us/op
# Warmup Iteration   3: 190.406 us/op
# Warmup Iteration   4: 190.917 us/op
# Warmup Iteration   5: 190.624 us/op
Iteration   1: 190.743 us/op
Iteration   2: 191.267 us/op
Iteration   3: 190.861 us/op
Iteration   4: 186.018 us/op
Iteration   5: 186.257 us/op

# Run progress: 62.22% complete, ETA 00:28:25
# Fork: 2 of 3
# Warmup Iteration   1: 220.107 us/op
# Warmup Iteration   2: 189.875 us/op
# Warmup Iteration   3: 190.123 us/op
# Warmup Iteration   4: 189.903 us/op
# Warmup Iteration   5: 190.553 us/op
Iteration   1: 189.929 us/op
Iteration   2: 189.870 us/op
Iteration   3: 189.975 us/op
Iteration   4: 189.672 us/op
Iteration   5: 189.967 us/op

# Run progress: 64.44% complete, ETA 00:26:45
# Fork: 3 of 3
# Warmup Iteration   1: 219.485 us/op
# Warmup Iteration   2: 212.344 us/op
# Warmup Iteration   3: 210.676 us/op
# Warmup Iteration   4: 209.883 us/op
# Warmup Iteration   5: 209.682 us/op
Iteration   1: 209.526 us/op
Iteration   2: 209.302 us/op
Iteration   3: 208.812 us/op
Iteration   4: 208.816 us/op
Iteration   5: 208.606 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_of_mixed_types":
  195.975 ±(99.9%) 10.323 us/op [Average]
  (min, avg, max) = (186.018, 195.975, 209.526), stdev = 9.656
  CI (99.9%): [185.652, 206.298] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_stride_2
# Parameters: (size = 262144)

# Run progress: 66.67% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 125.860 us/op
# Warmup Iteration   2: 119.099 us/op
# Warmup Iteration   3: 106.794 us/op
# Warmup Iteration   4: 106.678 us/op
# Warmup Iteration   5: 106.967 us/op
Iteration   1: 107.023 us/op
Iteration   2: 107.029 us/op
Iteration   3: 107.381 us/op
Iteration   4: 107.714 us/op
Iteration   5: 107.230 us/op

# Run progress: 68.89% complete, ETA 00:23:24
# Fork: 2 of 3
# Warmup Iteration   1: 129.243 us/op
# Warmup Iteration   2: 122.229 us/op
# Warmup Iteration   3: 111.245 us/op
# Warmup Iteration   4: 110.909 us/op
# Warmup Iteration   5: 110.662 us/op
Iteration   1: 110.445 us/op
Iteration   2: 110.525 us/op
Iteration   3: 110.546 us/op
Iteration   4: 110.291 us/op
Iteration   5: 110.784 us/op

# Run progress: 71.11% complete, ETA 00:21:44
# Fork: 3 of 3
# Warmup Iteration   1: 115.080 us/op
# Warmup Iteration   2: 109.542 us/op
# Warmup Iteration   3: 99.274 us/op
# Warmup Iteration   4: 99.562 us/op
# Warmup Iteration   5: 100.127 us/op
Iteration   1: 100.163 us/op
Iteration   2: 100.169 us/op
Iteration   3: 100.286 us/op
Iteration   4: 100.358 us/op
Iteration   5: 100.496 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_stride_2":
  106.029 ±(99.9%) 4.725 us/op [Average]
  (min, avg, max) = (100.163, 106.029, 110.784), stdev = 4.420
  CI (99.9%): [101.304, 110.754] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count
# Parameters: (size = 262144)

# Run progress: 73.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 197.659 us/op
# Warmup Iteration   2: 186.161 us/op
# Warmup Iteration   3: 184.695 us/op
# Warmup Iteration   4: 184.497 us/op
# Warmup Iteration   5: 184.457 us/op
Iteration   1: 184.134 us/op
Iteration   2: 187.761 us/op
Iteration   3: 188.011 us/op
Iteration   4: 188.453 us/op
Iteration   5: 188.176 us/op

# Run progress: 75.56% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 223.497 us/op
# Warmup Iteration   2: 204.489 us/op
# Warmup Iteration   3: 203.856 us/op
# Warmup Iteration   4: 203.302 us/op
# Warmup Iteration   5: 202.744 us/op
Iteration   1: 202.263 us/op
Iteration   2: 202.357 us/op
Iteration   3: 201.923 us/op
Iteration   4: 181.765 us/op
Iteration   5: 183.634 us/op

# Run progress: 77.78% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 223.262 us/op
# Warmup Iteration   2: 208.025 us/op
# Warmup Iteration   3: 206.447 us/op
# Warmup Iteration   4: 205.340 us/op
# Warmup Iteration   5: 205.072 us/op
Iteration   1: 204.888 us/op
Iteration   2: 204.439 us/op
Iteration   3: 204.369 us/op
Iteration   4: 204.625 us/op
Iteration   5: 204.585 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count":
  195.425 ±(99.9%) 9.998 us/op [Average]
  (min, avg, max) = (181.765, 195.425, 204.888), stdev = 9.352
  CI (99.9%): [185.428, 205.423] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.shl_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 80.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 176.158 us/op
# Warmup Iteration   2: 164.438 us/op
# Warmup Iteration   3: 163.440 us/op
# Warmup Iteration   4: 162.635 us/op
# Warmup Iteration   5: 162.517 us/op
Iteration   1: 162.507 us/op
Iteration   2: 162.394 us/op
Iteration   3: 162.871 us/op
Iteration   4: 162.166 us/op
Iteration   5: 162.245 us/op

# Run progress: 82.22% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 169.170 us/op
# Warmup Iteration   2: 144.222 us/op
# Warmup Iteration   3: 144.808 us/op
# Warmup Iteration   4: 146.571 us/op
# Warmup Iteration   5: 146.965 us/op
Iteration   1: 146.755 us/op
Iteration   2: 146.927 us/op
Iteration   3: 147.101 us/op
Iteration   4: 147.036 us/op
Iteration   5: 147.162 us/op

# Run progress: 84.44% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 159.169 us/op
# Warmup Iteration   2: 150.288 us/op
# Warmup Iteration   3: 150.010 us/op
# Warmup Iteration   4: 149.913 us/op
# Warmup Iteration   5: 149.728 us/op
Iteration   1: 149.723 us/op
Iteration   2: 149.417 us/op
Iteration   3: 149.357 us/op
Iteration   4: 149.411 us/op
Iteration   5: 149.377 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.shl_2_arrays_elements":
  152.963 ±(99.9%) 7.498 us/op [Average]
  (min, avg, max) = (146.755, 152.963, 162.871), stdev = 7.014
  CI (99.9%): [145.465, 160.461] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 86.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 179.064 us/op
# Warmup Iteration   2: 168.932 us/op
# Warmup Iteration   3: 167.894 us/op
# Warmup Iteration   4: 167.560 us/op
# Warmup Iteration   5: 166.914 us/op
Iteration   1: 166.880 us/op
Iteration   2: 167.009 us/op
Iteration   3: 166.886 us/op
Iteration   4: 166.707 us/op
Iteration   5: 166.686 us/op

# Run progress: 88.89% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 182.237 us/op
# Warmup Iteration   2: 171.748 us/op
# Warmup Iteration   3: 170.573 us/op
# Warmup Iteration   4: 170.351 us/op
# Warmup Iteration   5: 169.785 us/op
Iteration   1: 169.968 us/op
Iteration   2: 169.806 us/op
Iteration   3: 169.442 us/op
Iteration   4: 169.541 us/op
Iteration   5: 169.829 us/op

# Run progress: 91.11% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 175.561 us/op
# Warmup Iteration   2: 166.546 us/op
# Warmup Iteration   3: 165.937 us/op
# Warmup Iteration   4: 165.960 us/op
# Warmup Iteration   5: 166.186 us/op
Iteration   1: 165.978 us/op
Iteration   2: 165.811 us/op
Iteration   3: 165.904 us/op
Iteration   4: 165.650 us/op
Iteration   5: 165.269 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements":
  167.424 ±(99.9%) 1.876 us/op [Average]
  (min, avg, max) = (165.269, 167.424, 169.968), stdev = 1.754
  CI (99.9%): [165.549, 169.300] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.xor_2_arrays_elements
# Parameters: (size = 262144)

# Run progress: 93.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 216.432 us/op
# Warmup Iteration   2: 180.046 us/op
# Warmup Iteration   3: 205.148 us/op
# Warmup Iteration   4: 181.766 us/op
# Warmup Iteration   5: 182.161 us/op
Iteration   1: 181.914 us/op
Iteration   2: 182.195 us/op
Iteration   3: 182.421 us/op
Iteration   4: 182.345 us/op
Iteration   5: 182.985 us/op

# Run progress: 95.56% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 198.533 us/op
# Warmup Iteration   2: 189.032 us/op
# Warmup Iteration   3: 212.318 us/op
# Warmup Iteration   4: 187.422 us/op
# Warmup Iteration   5: 187.197 us/op
Iteration   1: 187.202 us/op
Iteration   2: 187.346 us/op
Iteration   3: 187.288 us/op
Iteration   4: 187.191 us/op
Iteration   5: 187.112 us/op

# Run progress: 97.78% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 216.097 us/op
# Warmup Iteration   2: 205.219 us/op
# Warmup Iteration   3: 224.470 us/op
# Warmup Iteration   4: 201.961 us/op
# Warmup Iteration   5: 201.427 us/op
Iteration   1: 200.914 us/op
Iteration   2: 201.368 us/op
Iteration   3: 200.441 us/op
Iteration   4: 200.823 us/op
Iteration   5: 201.023 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationPatternsMultipleIntArraysBenchmark.xor_2_arrays_elements":
  190.171 ±(99.9%) 8.693 us/op [Average]
  (min, avg, max) = (181.914, 190.171, 201.368), stdev = 8.131
  CI (99.9%): [181.479, 198.864] (assumes normal distribution)


# Run complete. Total time: 01:15:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      (size)  Mode  Cnt    Score    Error  Units
VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements                          262144  avgt   15  196.822 ±  9.256  us/op
VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_inc_index_access         262144  avgt   15  224.746 ± 10.211  us/op
VectorizationPatternsMultipleIntArraysBenchmark.add_2_arrays_elements_modulo_index_access      262144  avgt   15  297.687 ± 12.833  us/op
VectorizationPatternsMultipleIntArraysBenchmark.extract_2_arrays_elements                      262144  avgt   15  201.173 ± 10.233  us/op
VectorizationPatternsMultipleIntArraysBenchmark.if_with_masking_conditional_flow               262144  avgt   15  198.133 ±  9.485  us/op
VectorizationPatternsMultipleIntArraysBenchmark.mod_2_arrays_elements                          262144  avgt   15  654.031 ± 36.315  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements                     262144  avgt   15  192.272 ±  7.112  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_backward_iterator   262144  avgt   15  199.175 ±  9.249  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_long_stride         262144  avgt   15  241.583 ± 11.073  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_of_mixed_types      262144  avgt   15  195.975 ± 10.323  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_stride_2            262144  avgt   15  106.029 ±  4.725  us/op
VectorizationPatternsMultipleIntArraysBenchmark.multiply_2_arrays_elements_unknown_trip_count  262144  avgt   15  195.425 ±  9.998  us/op
VectorizationPatternsMultipleIntArraysBenchmark.shl_2_arrays_elements                          262144  avgt   15  152.963 ±  7.498  us/op
VectorizationPatternsMultipleIntArraysBenchmark.sum_all_product_pairs_of_2_arrays_elements     262144  avgt   15  167.424 ±  1.876  us/op
VectorizationPatternsMultipleIntArraysBenchmark.xor_2_arrays_elements                          262144  avgt   15  190.171 ±  8.693  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/VectorizationPatternsMultipleIntArraysBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*VectorizationScatterGatherPatternBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/VectorizationScatterGatherPatternBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.VectorizationScatterGatherPatternBenchmark.scatter_gather
# Parameters: (size = 262144)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 246.636 us/op
# Warmup Iteration   2: 246.563 us/op
# Warmup Iteration   3: 244.324 us/op
# Warmup Iteration   4: 243.749 us/op
# Warmup Iteration   5: 243.573 us/op
Iteration   1: 242.775 us/op
Iteration   2: 242.892 us/op
Iteration   3: 242.858 us/op
Iteration   4: 243.008 us/op
Iteration   5: 242.818 us/op

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 229.917 us/op
# Warmup Iteration   2: 219.625 us/op
# Warmup Iteration   3: 220.397 us/op
# Warmup Iteration   4: 220.624 us/op
# Warmup Iteration   5: 220.795 us/op
Iteration   1: 221.405 us/op
Iteration   2: 221.325 us/op
Iteration   3: 221.186 us/op
Iteration   4: 221.365 us/op
Iteration   5: 221.343 us/op

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 241.923 us/op
# Warmup Iteration   2: 226.422 us/op
# Warmup Iteration   3: 226.000 us/op
# Warmup Iteration   4: 225.398 us/op
# Warmup Iteration   5: 225.544 us/op
Iteration   1: 225.031 us/op
Iteration   2: 225.084 us/op
Iteration   3: 224.941 us/op
Iteration   4: 225.226 us/op
Iteration   5: 225.463 us/op


Result "com.ionutbalosin.jvm.jit.benchmark.VectorizationScatterGatherPatternBenchmark.scatter_gather":
  229.781 ±(99.9%) 10.387 us/op [Average]
  (min, avg, max) = (221.186, 229.781, 243.008), stdev = 9.716
  CI (99.9%): [219.394, 240.169] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (size)  Mode  Cnt    Score    Error  Units
VectorizationScatterGatherPatternBenchmark.scatter_gather  262144  avgt   15  229.781 ± 10.387  us/op

Benchmark result is saved to results/hotspotvm_graal_jit/VectorizationScatterGatherPatternBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*MegamorphicAbsClassCallBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/MegamorphicAbsClassCallBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.bimorphic
# Parameters: (param = 3)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.956 ns/op
# Warmup Iteration   2: 3.572 ns/op
# Warmup Iteration   3: 3.544 ns/op
# Warmup Iteration   4: 3.543 ns/op
# Warmup Iteration   5: 3.547 ns/op
Iteration   1: 3.536 ns/op
Iteration   2: 3.541 ns/op
Iteration   3: 3.533 ns/op
Iteration   4: 3.543 ns/op
Iteration   5: 3.539 ns/op

# Run progress: 5.56% complete, ETA 00:28:27
# Fork: 2 of 3
# Warmup Iteration   1: 4.354 ns/op
# Warmup Iteration   2: 4.020 ns/op
# Warmup Iteration   3: 3.596 ns/op
# Warmup Iteration   4: 3.615 ns/op
# Warmup Iteration   5: 3.617 ns/op
Iteration   1: 3.619 ns/op
Iteration   2: 3.616 ns/op
Iteration   3: 3.616 ns/op
Iteration   4: 3.615 ns/op
Iteration   5: 3.617 ns/op

# Run progress: 11.11% complete, ETA 00:26:46
# Fork: 3 of 3
# Warmup Iteration   1: 3.736 ns/op
# Warmup Iteration   2: 3.526 ns/op
# Warmup Iteration   3: 3.522 ns/op
# Warmup Iteration   4: 3.523 ns/op
# Warmup Iteration   5: 3.522 ns/op
Iteration   1: 3.522 ns/op
Iteration   2: 3.521 ns/op
Iteration   3: 3.522 ns/op
Iteration   4: 3.521 ns/op
Iteration   5: 3.533 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.bimorphic":
  3.560 ±(99.9%) 0.045 ns/op [Average]
  (min, avg, max) = (3.521, 3.560, 3.619), stdev = 0.042
  CI (99.9%): [3.514, 3.605] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_3
# Parameters: (param = 3)

# Run progress: 16.67% complete, ETA 00:25:05
# Fork: 1 of 3
# Warmup Iteration   1: 3.980 ns/op
# Warmup Iteration   2: 3.667 ns/op
# Warmup Iteration   3: 3.654 ns/op
# Warmup Iteration   4: 3.635 ns/op
# Warmup Iteration   5: 3.624 ns/op
Iteration   1: 3.277 ns/op
Iteration   2: 3.296 ns/op
Iteration   3: 3.303 ns/op
Iteration   4: 3.304 ns/op
Iteration   5: 3.308 ns/op

# Run progress: 22.22% complete, ETA 00:23:24
# Fork: 2 of 3
# Warmup Iteration   1: 3.863 ns/op
# Warmup Iteration   2: 3.613 ns/op
# Warmup Iteration   3: 3.586 ns/op
# Warmup Iteration   4: 3.574 ns/op
# Warmup Iteration   5: 3.570 ns/op
Iteration   1: 3.564 ns/op
Iteration   2: 3.234 ns/op
Iteration   3: 3.229 ns/op
Iteration   4: 3.243 ns/op
Iteration   5: 3.252 ns/op

# Run progress: 27.78% complete, ETA 00:21:44
# Fork: 3 of 3
# Warmup Iteration   1: 3.837 ns/op
# Warmup Iteration   2: 3.612 ns/op
# Warmup Iteration   3: 3.614 ns/op
# Warmup Iteration   4: 3.607 ns/op
# Warmup Iteration   5: 3.605 ns/op
Iteration   1: 3.601 ns/op
Iteration   2: 3.599 ns/op
Iteration   3: 3.593 ns/op
Iteration   4: 3.584 ns/op
Iteration   5: 3.586 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_3":
  3.398 ±(99.9%) 0.174 ns/op [Average]
  (min, avg, max) = (3.229, 3.398, 3.601), stdev = 0.162
  CI (99.9%): [3.225, 3.572] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_4
# Parameters: (param = 3)

# Run progress: 33.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 3.595 ns/op
# Warmup Iteration   2: 3.072 ns/op
# Warmup Iteration   3: 3.113 ns/op
# Warmup Iteration   4: 3.125 ns/op
# Warmup Iteration   5: 3.124 ns/op
Iteration   1: 3.134 ns/op
Iteration   2: 3.138 ns/op
Iteration   3: 3.140 ns/op
Iteration   4: 3.138 ns/op
Iteration   5: 3.137 ns/op

# Run progress: 38.89% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 3.588 ns/op
# Warmup Iteration   2: 3.442 ns/op
# Warmup Iteration   3: 3.416 ns/op
# Warmup Iteration   4: 3.410 ns/op
# Warmup Iteration   5: 3.401 ns/op
Iteration   1: 3.398 ns/op
Iteration   2: 3.395 ns/op
Iteration   3: 3.393 ns/op
Iteration   4: 3.388 ns/op
Iteration   5: 3.384 ns/op

# Run progress: 44.44% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 3.289 ns/op
# Warmup Iteration   2: 3.096 ns/op
# Warmup Iteration   3: 3.420 ns/op
# Warmup Iteration   4: 3.411 ns/op
# Warmup Iteration   5: 3.403 ns/op
Iteration   1: 3.393 ns/op
Iteration   2: 3.299 ns/op
Iteration   3: 3.307 ns/op
Iteration   4: 3.306 ns/op
Iteration   5: 3.306 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_4":
  3.284 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (3.134, 3.284, 3.398), stdev = 0.113
  CI (99.9%): [3.163, 3.405] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_5
# Parameters: (param = 3)

# Run progress: 50.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 3.549 ns/op
# Warmup Iteration   2: 3.073 ns/op
# Warmup Iteration   3: 3.131 ns/op
# Warmup Iteration   4: 3.139 ns/op
# Warmup Iteration   5: 3.141 ns/op
Iteration   1: 3.145 ns/op
Iteration   2: 3.146 ns/op
Iteration   3: 3.145 ns/op
Iteration   4: 3.142 ns/op
Iteration   5: 3.143 ns/op

# Run progress: 55.56% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 3.275 ns/op
# Warmup Iteration   2: 3.458 ns/op
# Warmup Iteration   3: 3.422 ns/op
# Warmup Iteration   4: 3.412 ns/op
# Warmup Iteration   5: 3.391 ns/op
Iteration   1: 3.385 ns/op
Iteration   2: 3.379 ns/op
Iteration   3: 3.372 ns/op
Iteration   4: 3.373 ns/op
Iteration   5: 3.366 ns/op

# Run progress: 61.11% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.718 ns/op
# Warmup Iteration   2: 3.307 ns/op
# Warmup Iteration   3: 3.292 ns/op
# Warmup Iteration   4: 3.293 ns/op
# Warmup Iteration   5: 3.294 ns/op
Iteration   1: 3.291 ns/op
Iteration   2: 3.313 ns/op
Iteration   3: 3.296 ns/op
Iteration   4: 3.294 ns/op
Iteration   5: 3.297 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_5":
  3.272 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (3.142, 3.272, 3.385), stdev = 0.099
  CI (99.9%): [3.166, 3.379] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_6
# Parameters: (param = 3)

# Run progress: 66.67% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 3.446 ns/op
# Warmup Iteration   2: 3.645 ns/op
# Warmup Iteration   3: 3.620 ns/op
# Warmup Iteration   4: 3.604 ns/op
# Warmup Iteration   5: 3.594 ns/op
Iteration   1: 3.594 ns/op
Iteration   2: 3.590 ns/op
Iteration   3: 3.588 ns/op
Iteration   4: 3.594 ns/op
Iteration   5: 3.583 ns/op

# Run progress: 72.22% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 4.132 ns/op
# Warmup Iteration   2: 3.643 ns/op
# Warmup Iteration   3: 3.873 ns/op
# Warmup Iteration   4: 3.868 ns/op
# Warmup Iteration   5: 3.867 ns/op
Iteration   1: 3.889 ns/op
Iteration   2: 3.518 ns/op
Iteration   3: 3.623 ns/op
Iteration   4: 3.630 ns/op
Iteration   5: 3.631 ns/op

# Run progress: 77.78% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.536 ns/op
# Warmup Iteration   2: 3.339 ns/op
# Warmup Iteration   3: 3.326 ns/op
# Warmup Iteration   4: 3.585 ns/op
# Warmup Iteration   5: 3.559 ns/op
Iteration   1: 3.551 ns/op
Iteration   2: 3.223 ns/op
Iteration   3: 3.244 ns/op
Iteration   4: 3.251 ns/op
Iteration   5: 3.252 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.megamorphic_6":
  3.517 ±(99.9%) 0.203 ns/op [Average]
  (min, avg, max) = (3.223, 3.517, 3.889), stdev = 0.190
  CI (99.9%): [3.314, 3.721] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.monomorphic
# Parameters: (param = 3)

# Run progress: 83.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.612 ns/op
# Warmup Iteration   2: 4.354 ns/op
# Warmup Iteration   3: 4.327 ns/op
# Warmup Iteration   4: 4.324 ns/op
# Warmup Iteration   5: 4.328 ns/op
Iteration   1: 4.331 ns/op
Iteration   2: 4.332 ns/op
Iteration   3: 4.326 ns/op
Iteration   4: 4.327 ns/op
Iteration   5: 4.322 ns/op

# Run progress: 88.89% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 5.229 ns/op
# Warmup Iteration   2: 4.917 ns/op
# Warmup Iteration   3: 4.878 ns/op
# Warmup Iteration   4: 4.854 ns/op
# Warmup Iteration   5: 4.839 ns/op
Iteration   1: 4.830 ns/op
Iteration   2: 4.704 ns/op
Iteration   3: 4.717 ns/op
Iteration   4: 4.724 ns/op
Iteration   5: 4.716 ns/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 5.120 ns/op
# Warmup Iteration   2: 4.738 ns/op
# Warmup Iteration   3: 4.720 ns/op
# Warmup Iteration   4: 4.715 ns/op
# Warmup Iteration   5: 4.714 ns/op
Iteration   1: 4.715 ns/op
Iteration   2: 4.705 ns/op
Iteration   3: 4.711 ns/op
Iteration   4: 4.711 ns/op
Iteration   5: 4.712 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicAbsClassCallBenchmark.monomorphic":
  4.592 ±(99.9%) 0.210 ns/op [Average]
  (min, avg, max) = (4.322, 4.592, 4.830), stdev = 0.196
  CI (99.9%): [4.383, 4.802] (assumes normal distribution)


# Run complete. Total time: 00:30:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (param)  Mode  Cnt  Score   Error  Units
MegamorphicAbsClassCallBenchmark.bimorphic            3  avgt   15  3.560 ± 0.045  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_3        3  avgt   15  3.398 ± 0.174  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_4        3  avgt   15  3.284 ± 0.121  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_5        3  avgt   15  3.272 ± 0.106  ns/op
MegamorphicAbsClassCallBenchmark.megamorphic_6        3  avgt   15  3.517 ± 0.203  ns/op
MegamorphicAbsClassCallBenchmark.monomorphic          3  avgt   15  4.592 ± 0.210  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/MegamorphicAbsClassCallBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*MegamorphicInterfaceCallBenchmark.*  -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/MegamorphicInterfaceCallBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.bimorphic
# Parameters: (param = 3)

# Run progress: 0.00% complete, ETA 00:30:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.185 ns/op
# Warmup Iteration   2: 3.962 ns/op
# Warmup Iteration   3: 3.451 ns/op
# Warmup Iteration   4: 3.492 ns/op
# Warmup Iteration   5: 3.501 ns/op
Iteration   1: 3.506 ns/op
Iteration   2: 3.518 ns/op
Iteration   3: 3.522 ns/op
Iteration   4: 3.519 ns/op
Iteration   5: 3.518 ns/op

# Run progress: 5.56% complete, ETA 00:28:27
# Fork: 2 of 3
# Warmup Iteration   1: 4.301 ns/op
# Warmup Iteration   2: 3.496 ns/op
# Warmup Iteration   3: 3.976 ns/op
# Warmup Iteration   4: 3.959 ns/op
# Warmup Iteration   5: 3.948 ns/op
Iteration   1: 3.935 ns/op
Iteration   2: 3.923 ns/op
Iteration   3: 3.912 ns/op
Iteration   4: 3.915 ns/op
Iteration   5: 3.914 ns/op

# Run progress: 11.11% complete, ETA 00:26:45
# Fork: 3 of 3
# Warmup Iteration   1: 4.152 ns/op
# Warmup Iteration   2: 3.847 ns/op
# Warmup Iteration   3: 3.838 ns/op
# Warmup Iteration   4: 3.834 ns/op
# Warmup Iteration   5: 3.825 ns/op
Iteration   1: 3.823 ns/op
Iteration   2: 3.820 ns/op
Iteration   3: 3.820 ns/op
Iteration   4: 3.817 ns/op
Iteration   5: 3.813 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.bimorphic":
  3.752 ±(99.9%) 0.190 ns/op [Average]
  (min, avg, max) = (3.506, 3.752, 3.935), stdev = 0.177
  CI (99.9%): [3.562, 3.941] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_3
# Parameters: (param = 3)

# Run progress: 16.67% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 3.703 ns/op
# Warmup Iteration   2: 3.497 ns/op
# Warmup Iteration   3: 3.467 ns/op
# Warmup Iteration   4: 3.467 ns/op
# Warmup Iteration   5: 3.467 ns/op
Iteration   1: 3.465 ns/op
Iteration   2: 3.469 ns/op
Iteration   3: 3.467 ns/op
Iteration   4: 3.474 ns/op
Iteration   5: 3.473 ns/op

# Run progress: 22.22% complete, ETA 00:23:24
# Fork: 2 of 3
# Warmup Iteration   1: 3.855 ns/op
# Warmup Iteration   2: 3.145 ns/op
# Warmup Iteration   3: 3.175 ns/op
# Warmup Iteration   4: 3.178 ns/op
# Warmup Iteration   5: 3.182 ns/op
Iteration   1: 3.184 ns/op
Iteration   2: 3.190 ns/op
Iteration   3: 3.191 ns/op
Iteration   4: 3.187 ns/op
Iteration   5: 3.188 ns/op

# Run progress: 27.78% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 3.487 ns/op
# Warmup Iteration   2: 3.532 ns/op
# Warmup Iteration   3: 3.550 ns/op
# Warmup Iteration   4: 3.521 ns/op
# Warmup Iteration   5: 3.445 ns/op
Iteration   1: 3.196 ns/op
Iteration   2: 3.207 ns/op
Iteration   3: 3.211 ns/op
Iteration   4: 3.212 ns/op
Iteration   5: 3.223 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_3":
  3.289 ±(99.9%) 0.142 ns/op [Average]
  (min, avg, max) = (3.184, 3.289, 3.474), stdev = 0.132
  CI (99.9%): [3.148, 3.431] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_4
# Parameters: (param = 3)

# Run progress: 33.33% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 3.312 ns/op
# Warmup Iteration   2: 3.488 ns/op
# Warmup Iteration   3: 3.435 ns/op
# Warmup Iteration   4: 3.419 ns/op
# Warmup Iteration   5: 3.411 ns/op
Iteration   1: 3.402 ns/op
Iteration   2: 3.395 ns/op
Iteration   3: 3.388 ns/op
Iteration   4: 3.388 ns/op
Iteration   5: 3.383 ns/op

# Run progress: 38.89% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 3.089 ns/op
# Warmup Iteration   2: 3.345 ns/op
# Warmup Iteration   3: 3.441 ns/op
# Warmup Iteration   4: 3.120 ns/op
# Warmup Iteration   5: 3.204 ns/op
Iteration   1: 3.210 ns/op
Iteration   2: 3.215 ns/op
Iteration   3: 3.219 ns/op
Iteration   4: 3.217 ns/op
Iteration   5: 3.221 ns/op

# Run progress: 44.44% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 3.302 ns/op
# Warmup Iteration   2: 3.374 ns/op
# Warmup Iteration   3: 3.111 ns/op
# Warmup Iteration   4: 3.112 ns/op
# Warmup Iteration   5: 3.108 ns/op
Iteration   1: 3.110 ns/op
Iteration   2: 3.109 ns/op
Iteration   3: 3.108 ns/op
Iteration   4: 3.110 ns/op
Iteration   5: 3.110 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_4":
  3.239 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (3.108, 3.239, 3.402), stdev = 0.120
  CI (99.9%): [3.110, 3.368] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_5
# Parameters: (param = 3)

# Run progress: 50.00% complete, ETA 00:15:03
# Fork: 1 of 3
# Warmup Iteration   1: 3.258 ns/op
# Warmup Iteration   2: 3.057 ns/op
# Warmup Iteration   3: 3.048 ns/op
# Warmup Iteration   4: 3.049 ns/op
# Warmup Iteration   5: 3.049 ns/op
Iteration   1: 3.050 ns/op
Iteration   2: 3.049 ns/op
Iteration   3: 3.048 ns/op
Iteration   4: 3.047 ns/op
Iteration   5: 3.047 ns/op

# Run progress: 55.56% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 3.332 ns/op
# Warmup Iteration   2: 3.138 ns/op
# Warmup Iteration   3: 3.148 ns/op
# Warmup Iteration   4: 3.146 ns/op
# Warmup Iteration   5: 3.146 ns/op
Iteration   1: 3.148 ns/op
Iteration   2: 3.147 ns/op
Iteration   3: 3.147 ns/op
Iteration   4: 3.145 ns/op
Iteration   5: 3.145 ns/op

# Run progress: 61.11% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 3.314 ns/op
# Warmup Iteration   2: 3.325 ns/op
# Warmup Iteration   3: 3.331 ns/op
# Warmup Iteration   4: 3.324 ns/op
# Warmup Iteration   5: 3.319 ns/op
Iteration   1: 3.315 ns/op
Iteration   2: 3.310 ns/op
Iteration   3: 3.313 ns/op
Iteration   4: 3.311 ns/op
Iteration   5: 3.307 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_5":
  3.169 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (3.047, 3.169, 3.315), stdev = 0.112
  CI (99.9%): [3.048, 3.289] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_6
# Parameters: (param = 3)

# Run progress: 66.67% complete, ETA 00:10:02
# Fork: 1 of 3
# Warmup Iteration   1: 3.873 ns/op
# Warmup Iteration   2: 3.677 ns/op
# Warmup Iteration   3: 3.636 ns/op
# Warmup Iteration   4: 3.636 ns/op
# Warmup Iteration   5: 3.629 ns/op
Iteration   1: 3.635 ns/op
Iteration   2: 3.627 ns/op
Iteration   3: 3.626 ns/op
Iteration   4: 3.628 ns/op
Iteration   5: 3.626 ns/op

# Run progress: 72.22% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.471 ns/op
# Warmup Iteration   2: 3.252 ns/op
# Warmup Iteration   3: 3.283 ns/op
# Warmup Iteration   4: 3.283 ns/op
# Warmup Iteration   5: 3.280 ns/op
Iteration   1: 3.300 ns/op
Iteration   2: 3.370 ns/op
Iteration   3: 3.360 ns/op
Iteration   4: 3.359 ns/op
Iteration   5: 3.354 ns/op

# Run progress: 77.78% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.510 ns/op
# Warmup Iteration   2: 3.342 ns/op
# Warmup Iteration   3: 3.325 ns/op
# Warmup Iteration   4: 3.329 ns/op
# Warmup Iteration   5: 3.330 ns/op
Iteration   1: 3.328 ns/op
Iteration   2: 3.325 ns/op
Iteration   3: 3.327 ns/op
Iteration   4: 3.331 ns/op
Iteration   5: 3.332 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.megamorphic_6":
  3.435 ±(99.9%) 0.152 ns/op [Average]
  (min, avg, max) = (3.300, 3.435, 3.635), stdev = 0.142
  CI (99.9%): [3.283, 3.587] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.monomorphic
# Parameters: (param = 3)

# Run progress: 83.33% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 4.896 ns/op
# Warmup Iteration   2: 4.506 ns/op
# Warmup Iteration   3: 4.516 ns/op
# Warmup Iteration   4: 4.537 ns/op
# Warmup Iteration   5: 4.535 ns/op
Iteration   1: 4.562 ns/op
Iteration   2: 4.547 ns/op
Iteration   3: 4.559 ns/op
Iteration   4: 4.548 ns/op
Iteration   5: 4.553 ns/op

# Run progress: 88.89% complete, ETA 00:03:21
# Fork: 2 of 3
# Warmup Iteration   1: 4.714 ns/op
# Warmup Iteration   2: 4.879 ns/op
# Warmup Iteration   3: 4.569 ns/op
# Warmup Iteration   4: 4.568 ns/op
# Warmup Iteration   5: 5.048 ns/op
Iteration   1: 5.012 ns/op
Iteration   2: 4.986 ns/op
Iteration   3: 4.974 ns/op
Iteration   4: 4.946 ns/op
Iteration   5: 4.943 ns/op

# Run progress: 94.44% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 5.129 ns/op
# Warmup Iteration   2: 4.856 ns/op
# Warmup Iteration   3: 4.840 ns/op
# Warmup Iteration   4: 4.842 ns/op
# Warmup Iteration   5: 4.838 ns/op
Iteration   1: 4.841 ns/op
Iteration   2: 4.835 ns/op
Iteration   3: 4.841 ns/op
Iteration   4: 4.835 ns/op
Iteration   5: 4.836 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.MegamorphicInterfaceCallBenchmark.monomorphic":
  4.788 ±(99.9%) 0.194 ns/op [Average]
  (min, avg, max) = (4.547, 4.788, 5.012), stdev = 0.181
  CI (99.9%): [4.594, 4.982] (assumes normal distribution)


# Run complete. Total time: 00:30:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (param)  Mode  Cnt  Score   Error  Units
MegamorphicInterfaceCallBenchmark.bimorphic            3  avgt   15  3.752 ± 0.190  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_3        3  avgt   15  3.289 ± 0.142  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_4        3  avgt   15  3.239 ± 0.129  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_5        3  avgt   15  3.169 ± 0.120  ns/op
MegamorphicInterfaceCallBenchmark.megamorphic_6        3  avgt   15  3.435 ± 0.152  ns/op
MegamorphicInterfaceCallBenchmark.monomorphic          3  avgt   15  4.788 ± 0.194  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/MegamorphicInterfaceCallBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ScalarReplacementBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ScalarReplacementBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.arg_escape_object_containing_array
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 0.00% complete, ETA 00:20:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.378 ns/op
# Warmup Iteration   2: 3.051 ns/op
# Warmup Iteration   3: 2.740 ns/op
# Warmup Iteration   4: 2.774 ns/op
# Warmup Iteration   5: 3.149 ns/op
Iteration   1: 3.120 ns/op
Iteration   2: 3.118 ns/op
Iteration   3: 3.086 ns/op
Iteration   4: 3.080 ns/op
Iteration   5: 3.075 ns/op

# Run progress: 8.33% complete, ETA 00:18:24
# Fork: 2 of 3
# Warmup Iteration   1: 3.261 ns/op
# Warmup Iteration   2: 2.753 ns/op
# Warmup Iteration   3: 2.756 ns/op
# Warmup Iteration   4: 2.774 ns/op
# Warmup Iteration   5: 2.774 ns/op
Iteration   1: 3.133 ns/op
Iteration   2: 2.743 ns/op
Iteration   3: 3.140 ns/op
Iteration   4: 3.111 ns/op
Iteration   5: 2.870 ns/op

# Run progress: 16.67% complete, ETA 00:16:43
# Fork: 3 of 3
# Warmup Iteration   1: 3.309 ns/op
# Warmup Iteration   2: 2.828 ns/op
# Warmup Iteration   3: 2.774 ns/op
# Warmup Iteration   4: 2.783 ns/op
# Warmup Iteration   5: 2.786 ns/op
Iteration   1: 2.788 ns/op
Iteration   2: 2.802 ns/op
Iteration   3: 2.792 ns/op
Iteration   4: 2.794 ns/op
Iteration   5: 2.798 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.arg_escape_object_containing_array":
  2.963 ±(99.9%) 0.174 ns/op [Average]
  (min, avg, max) = (2.743, 2.963, 3.140), stdev = 0.163
  CI (99.9%): [2.789, 3.137] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 25.00% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.972 ns/op
# Warmup Iteration   2: 2.861 ns/op
# Warmup Iteration   3: 2.857 ns/op
# Warmup Iteration   4: 2.859 ns/op
# Warmup Iteration   5: 2.852 ns/op
Iteration   1: 2.850 ns/op
Iteration   2: 2.850 ns/op
Iteration   3: 2.830 ns/op
Iteration   4: 2.831 ns/op
Iteration   5: 2.834 ns/op

# Run progress: 33.33% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 3.323 ns/op
# Warmup Iteration   2: 3.149 ns/op
# Warmup Iteration   3: 3.103 ns/op
# Warmup Iteration   4: 3.091 ns/op
# Warmup Iteration   5: 3.084 ns/op
Iteration   1: 3.076 ns/op
Iteration   2: 3.075 ns/op
Iteration   3: 3.077 ns/op
Iteration   4: 3.074 ns/op
Iteration   5: 3.074 ns/op

# Run progress: 41.67% complete, ETA 00:11:42
# Fork: 3 of 3
# Warmup Iteration   1: 3.269 ns/op
# Warmup Iteration   2: 3.093 ns/op
# Warmup Iteration   3: 3.076 ns/op
# Warmup Iteration   4: 3.076 ns/op
# Warmup Iteration   5: 3.076 ns/op
Iteration   1: 3.074 ns/op
Iteration   2: 3.083 ns/op
Iteration   3: 3.074 ns/op
Iteration   4: 3.073 ns/op
Iteration   5: 3.073 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object":
  2.997 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (2.830, 2.997, 3.083), stdev = 0.115
  CI (99.9%): [2.873, 3.120] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object_containing_array
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 50.00% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 3.233 ns/op
# Warmup Iteration   2: 3.074 ns/op
# Warmup Iteration   3: 3.037 ns/op
# Warmup Iteration   4: 3.048 ns/op
# Warmup Iteration   5: 3.054 ns/op
Iteration   1: 3.060 ns/op
Iteration   2: 3.062 ns/op
Iteration   3: 3.056 ns/op
Iteration   4: 3.066 ns/op
Iteration   5: 3.070 ns/op

# Run progress: 58.33% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.703 ns/op
# Warmup Iteration   2: 3.478 ns/op
# Warmup Iteration   3: 3.430 ns/op
# Warmup Iteration   4: 3.414 ns/op
# Warmup Iteration   5: 3.085 ns/op
Iteration   1: 3.083 ns/op
Iteration   2: 3.108 ns/op
Iteration   3: 3.099 ns/op
Iteration   4: 3.099 ns/op
Iteration   5: 3.101 ns/op

# Run progress: 66.67% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.330 ns/op
# Warmup Iteration   2: 3.382 ns/op
# Warmup Iteration   3: 3.349 ns/op
# Warmup Iteration   4: 3.336 ns/op
# Warmup Iteration   5: 3.331 ns/op
Iteration   1: 3.319 ns/op
Iteration   2: 3.319 ns/op
Iteration   3: 3.318 ns/op
Iteration   4: 3.315 ns/op
Iteration   5: 3.313 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.no_escape_object_containing_array":
  3.159 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (3.056, 3.159, 3.319), stdev = 0.116
  CI (99.9%): [3.035, 3.284] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.partial_escape_object_containing_array
# Parameters: (objectEscapes = false, param = 3, size = 128)

# Run progress: 75.00% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.280 ns/op
# Warmup Iteration   2: 3.346 ns/op
# Warmup Iteration   3: 3.274 ns/op
# Warmup Iteration   4: 3.265 ns/op
# Warmup Iteration   5: 3.272 ns/op
Iteration   1: 3.256 ns/op
Iteration   2: 3.169 ns/op
Iteration   3: 2.923 ns/op
Iteration   4: 2.951 ns/op
Iteration   5: 2.963 ns/op

# Run progress: 83.33% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3.630 ns/op
# Warmup Iteration   2: 2.970 ns/op
# Warmup Iteration   3: 2.903 ns/op
# Warmup Iteration   4: 2.909 ns/op
# Warmup Iteration   5: 2.911 ns/op
Iteration   1: 2.913 ns/op
Iteration   2: 2.913 ns/op
Iteration   3: 2.913 ns/op
Iteration   4: 2.913 ns/op
Iteration   5: 2.913 ns/op

# Run progress: 91.67% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 3.651 ns/op
# Warmup Iteration   2: 3.033 ns/op
# Warmup Iteration   3: 2.986 ns/op
# Warmup Iteration   4: 2.987 ns/op
# Warmup Iteration   5: 2.986 ns/op
Iteration   1: 2.984 ns/op
Iteration   2: 2.995 ns/op
Iteration   3: 2.984 ns/op
Iteration   4: 2.974 ns/op
Iteration   5: 2.976 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.ScalarReplacementBenchmark.partial_escape_object_containing_array":
  2.983 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (2.913, 2.983, 3.256), stdev = 0.100
  CI (99.9%): [2.876, 3.089] (assumes normal distribution)


# Run complete. Total time: 00:20:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (objectEscapes)  (param)  (size)  Mode  Cnt  Score   Error  Units
ScalarReplacementBenchmark.arg_escape_object_containing_array                false        3     128  avgt   15  2.963 ± 0.174  ns/op
ScalarReplacementBenchmark.no_escape_object                                  false        3     128  avgt   15  2.997 ± 0.123  ns/op
ScalarReplacementBenchmark.no_escape_object_containing_array                 false        3     128  avgt   15  3.159 ± 0.124  ns/op
ScalarReplacementBenchmark.partial_escape_object_containing_array            false        3     128  avgt   15  2.983 ± 0.107  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/ScalarReplacementBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ChainingLambdaBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ChainingLambdaBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:55:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.194 ns/op
# Warmup Iteration   2: 2.748 ns/op
# Warmup Iteration   3: 2.504 ns/op
# Warmup Iteration   4: 2.520 ns/op
# Warmup Iteration   5: 2.529 ns/op
Iteration   1: 2.525 ns/op
Iteration   2: 2.524 ns/op
Iteration   3: 2.525 ns/op
Iteration   4: 2.849 ns/op
Iteration   5: 2.834 ns/op

# Run progress: 3.03% complete, ETA 00:53:34
# Fork: 2 of 3
# Warmup Iteration   1: 2.727 ns/op
# Warmup Iteration   2: 2.526 ns/op
# Warmup Iteration   3: 2.522 ns/op
# Warmup Iteration   4: 2.526 ns/op
# Warmup Iteration   5: 2.529 ns/op
Iteration   1: 2.526 ns/op
Iteration   2: 2.529 ns/op
Iteration   3: 2.531 ns/op
Iteration   4: 2.531 ns/op
Iteration   5: 2.531 ns/op

# Run progress: 6.06% complete, ETA 00:51:51
# Fork: 3 of 3
# Warmup Iteration   1: 2.743 ns/op
# Warmup Iteration   2: 2.546 ns/op
# Warmup Iteration   3: 2.537 ns/op
# Warmup Iteration   4: 2.537 ns/op
# Warmup Iteration   5: 2.538 ns/op
Iteration   1: 2.536 ns/op
Iteration   2: 2.535 ns/op
Iteration   3: 2.536 ns/op
Iteration   4: 2.537 ns/op
Iteration   5: 2.537 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.baseline":
  2.572 ±(99.9%) 0.117 ns/op [Average]
  (min, avg, max) = (2.524, 2.572, 2.849), stdev = 0.109
  CI (99.9%): [2.455, 2.689] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_1
# Parameters: (value = 42)

# Run progress: 9.09% complete, ETA 00:50:10
# Fork: 1 of 3
# Warmup Iteration   1: 3.147 ns/op
# Warmup Iteration   2: 2.574 ns/op
# Warmup Iteration   3: 2.855 ns/op
# Warmup Iteration   4: 2.848 ns/op
# Warmup Iteration   5: 2.834 ns/op
Iteration   1: 2.826 ns/op
Iteration   2: 2.820 ns/op
Iteration   3: 2.812 ns/op
Iteration   4: 2.811 ns/op
Iteration   5: 2.812 ns/op

# Run progress: 12.12% complete, ETA 00:48:29
# Fork: 2 of 3
# Warmup Iteration   1: 3.006 ns/op
# Warmup Iteration   2: 2.545 ns/op
# Warmup Iteration   3: 2.554 ns/op
# Warmup Iteration   4: 2.558 ns/op
# Warmup Iteration   5: 2.566 ns/op
Iteration   1: 2.566 ns/op
Iteration   2: 2.565 ns/op
Iteration   3: 2.574 ns/op
Iteration   4: 2.570 ns/op
Iteration   5: 2.566 ns/op

# Run progress: 15.15% complete, ETA 00:46:49
# Fork: 3 of 3
# Warmup Iteration   1: 3.046 ns/op
# Warmup Iteration   2: 2.508 ns/op
# Warmup Iteration   3: 2.517 ns/op
# Warmup Iteration   4: 2.517 ns/op
# Warmup Iteration   5: 2.518 ns/op
Iteration   1: 2.532 ns/op
Iteration   2: 2.522 ns/op
Iteration   3: 2.527 ns/op
Iteration   4: 2.529 ns/op
Iteration   5: 2.529 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_1":
  2.637 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (2.522, 2.637, 2.826), stdev = 0.132
  CI (99.9%): [2.496, 2.779] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_12
# Parameters: (value = 42)

# Run progress: 18.18% complete, ETA 00:45:08
# Fork: 1 of 3
# Warmup Iteration   1: 2.852 ns/op
# Warmup Iteration   2: 2.584 ns/op
# Warmup Iteration   3: 2.575 ns/op
# Warmup Iteration   4: 2.568 ns/op
# Warmup Iteration   5: 2.577 ns/op
Iteration   1: 2.570 ns/op
Iteration   2: 2.564 ns/op
Iteration   3: 2.566 ns/op
Iteration   4: 2.562 ns/op
Iteration   5: 2.564 ns/op

# Run progress: 21.21% complete, ETA 00:43:27
# Fork: 2 of 3
# Warmup Iteration   1: 2.816 ns/op
# Warmup Iteration   2: 2.868 ns/op
# Warmup Iteration   3: 2.835 ns/op
# Warmup Iteration   4: 2.828 ns/op
# Warmup Iteration   5: 2.819 ns/op
Iteration   1: 2.813 ns/op
Iteration   2: 2.807 ns/op
Iteration   3: 2.806 ns/op
Iteration   4: 2.807 ns/op
Iteration   5: 2.806 ns/op

# Run progress: 24.24% complete, ETA 00:41:47
# Fork: 3 of 3
# Warmup Iteration   1: 3.064 ns/op
# Warmup Iteration   2: 2.771 ns/op
# Warmup Iteration   3: 2.747 ns/op
# Warmup Iteration   4: 2.745 ns/op
# Warmup Iteration   5: 2.738 ns/op
Iteration   1: 2.741 ns/op
Iteration   2: 2.737 ns/op
Iteration   3: 2.736 ns/op
Iteration   4: 2.741 ns/op
Iteration   5: 2.741 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_12":
  2.704 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (2.562, 2.704, 2.813), stdev = 0.106
  CI (99.9%): [2.591, 2.817] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_16
# Parameters: (value = 42)

# Run progress: 27.27% complete, ETA 00:40:07
# Fork: 1 of 3
# Warmup Iteration   1: 5.441 ns/op
# Warmup Iteration   2: 5.080 ns/op
# Warmup Iteration   3: 5.054 ns/op
# Warmup Iteration   4: 5.054 ns/op
# Warmup Iteration   5: 5.064 ns/op
Iteration   1: 5.065 ns/op
Iteration   2: 5.054 ns/op
Iteration   3: 5.060 ns/op
Iteration   4: 5.058 ns/op
Iteration   5: 5.065 ns/op

# Run progress: 30.30% complete, ETA 00:38:26
# Fork: 2 of 3
# Warmup Iteration   1: 2.803 ns/op
# Warmup Iteration   2: 2.570 ns/op
# Warmup Iteration   3: 2.782 ns/op
# Warmup Iteration   4: 2.769 ns/op
# Warmup Iteration   5: 2.761 ns/op
Iteration   1: 2.757 ns/op
Iteration   2: 2.752 ns/op
Iteration   3: 2.485 ns/op
Iteration   4: 2.505 ns/op
Iteration   5: 2.519 ns/op

# Run progress: 33.33% complete, ETA 00:36:46
# Fork: 3 of 3
# Warmup Iteration   1: 2.841 ns/op
# Warmup Iteration   2: 2.872 ns/op
# Warmup Iteration   3: 2.821 ns/op
# Warmup Iteration   4: 2.806 ns/op
# Warmup Iteration   5: 2.792 ns/op
Iteration   1: 2.787 ns/op
Iteration   2: 2.802 ns/op
Iteration   3: 2.785 ns/op
Iteration   4: 2.784 ns/op
Iteration   5: 2.779 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_16":
  3.484 ±(99.9%) 1.239 ns/op [Average]
  (min, avg, max) = (2.485, 3.484, 5.065), stdev = 1.159
  CI (99.9%): [2.245, 4.723] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_2
# Parameters: (value = 42)

# Run progress: 36.36% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.999 ns/op
# Warmup Iteration   2: 2.751 ns/op
# Warmup Iteration   3: 2.743 ns/op
# Warmup Iteration   4: 2.745 ns/op
# Warmup Iteration   5: 2.743 ns/op
Iteration   1: 2.744 ns/op
Iteration   2: 2.468 ns/op
Iteration   3: 2.490 ns/op
Iteration   4: 2.504 ns/op
Iteration   5: 2.512 ns/op

# Run progress: 39.39% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 2.813 ns/op
# Warmup Iteration   2: 2.861 ns/op
# Warmup Iteration   3: 2.813 ns/op
# Warmup Iteration   4: 2.798 ns/op
# Warmup Iteration   5: 2.784 ns/op
Iteration   1: 2.788 ns/op
Iteration   2: 2.783 ns/op
Iteration   3: 2.775 ns/op
Iteration   4: 2.771 ns/op
Iteration   5: 2.772 ns/op

# Run progress: 42.42% complete, ETA 00:31:45
# Fork: 3 of 3
# Warmup Iteration   1: 3.082 ns/op
# Warmup Iteration   2: 2.806 ns/op
# Warmup Iteration   3: 2.783 ns/op
# Warmup Iteration   4: 2.786 ns/op
# Warmup Iteration   5: 2.786 ns/op
Iteration   1: 2.780 ns/op
Iteration   2: 2.464 ns/op
Iteration   3: 2.489 ns/op
Iteration   4: 2.501 ns/op
Iteration   5: 2.566 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_2":
  2.627 ±(99.9%) 0.153 ns/op [Average]
  (min, avg, max) = (2.464, 2.627, 2.788), stdev = 0.143
  CI (99.9%): [2.474, 2.781] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_24
# Parameters: (value = 42)

# Run progress: 45.45% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.845 ns/op
# Warmup Iteration   2: 2.860 ns/op
# Warmup Iteration   3: 2.815 ns/op
# Warmup Iteration   4: 2.799 ns/op
# Warmup Iteration   5: 2.790 ns/op
Iteration   1: 2.782 ns/op
Iteration   2: 2.777 ns/op
Iteration   3: 2.771 ns/op
Iteration   4: 2.776 ns/op
Iteration   5: 2.771 ns/op

# Run progress: 48.48% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 2.782 ns/op
# Warmup Iteration   2: 2.499 ns/op
# Warmup Iteration   3: 2.501 ns/op
# Warmup Iteration   4: 2.511 ns/op
# Warmup Iteration   5: 2.513 ns/op
Iteration   1: 2.513 ns/op
Iteration   2: 2.517 ns/op
Iteration   3: 2.516 ns/op
Iteration   4: 2.515 ns/op
Iteration   5: 2.515 ns/op

# Run progress: 51.52% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 2.847 ns/op
# Warmup Iteration   2: 2.526 ns/op
# Warmup Iteration   3: 2.509 ns/op
# Warmup Iteration   4: 2.510 ns/op
# Warmup Iteration   5: 2.511 ns/op
Iteration   1: 2.509 ns/op
Iteration   2: 2.509 ns/op
Iteration   3: 2.511 ns/op
Iteration   4: 2.511 ns/op
Iteration   5: 2.507 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_24":
  2.600 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (2.507, 2.600, 2.782), stdev = 0.128
  CI (99.9%): [2.463, 2.737] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_3
# Parameters: (value = 42)

# Run progress: 54.55% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.846 ns/op
# Warmup Iteration   2: 2.865 ns/op
# Warmup Iteration   3: 2.833 ns/op
# Warmup Iteration   4: 2.815 ns/op
# Warmup Iteration   5: 2.803 ns/op
Iteration   1: 2.800 ns/op
Iteration   2: 2.792 ns/op
Iteration   3: 2.786 ns/op
Iteration   4: 2.784 ns/op
Iteration   5: 2.785 ns/op

# Run progress: 57.58% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 3.113 ns/op
# Warmup Iteration   2: 2.541 ns/op
# Warmup Iteration   3: 2.547 ns/op
# Warmup Iteration   4: 2.559 ns/op
# Warmup Iteration   5: 2.559 ns/op
Iteration   1: 2.559 ns/op
Iteration   2: 2.565 ns/op
Iteration   3: 2.563 ns/op
Iteration   4: 2.569 ns/op
Iteration   5: 2.575 ns/op

# Run progress: 60.61% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 3.107 ns/op
# Warmup Iteration   2: 2.828 ns/op
# Warmup Iteration   3: 2.807 ns/op
# Warmup Iteration   4: 2.806 ns/op
# Warmup Iteration   5: 2.790 ns/op
Iteration   1: 2.784 ns/op
Iteration   2: 2.784 ns/op
Iteration   3: 2.777 ns/op
Iteration   4: 2.782 ns/op
Iteration   5: 2.774 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_3":
  2.712 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (2.559, 2.712, 2.800), stdev = 0.107
  CI (99.9%): [2.598, 2.826] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_4
# Parameters: (value = 42)

# Run progress: 63.64% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 3.025 ns/op
# Warmup Iteration   2: 2.753 ns/op
# Warmup Iteration   3: 2.738 ns/op
# Warmup Iteration   4: 2.740 ns/op
# Warmup Iteration   5: 2.740 ns/op
Iteration   1: 2.744 ns/op
Iteration   2: 2.736 ns/op
Iteration   3: 2.737 ns/op
Iteration   4: 2.732 ns/op
Iteration   5: 2.731 ns/op

# Run progress: 66.67% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.784 ns/op
# Warmup Iteration   2: 2.549 ns/op
# Warmup Iteration   3: 2.536 ns/op
# Warmup Iteration   4: 2.540 ns/op
# Warmup Iteration   5: 2.536 ns/op
Iteration   1: 2.539 ns/op
Iteration   2: 2.541 ns/op
Iteration   3: 2.543 ns/op
Iteration   4: 2.541 ns/op
Iteration   5: 2.541 ns/op

# Run progress: 69.70% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 3.107 ns/op
# Warmup Iteration   2: 2.777 ns/op
# Warmup Iteration   3: 2.745 ns/op
# Warmup Iteration   4: 2.744 ns/op
# Warmup Iteration   5: 2.739 ns/op
Iteration   1: 2.737 ns/op
Iteration   2: 2.733 ns/op
Iteration   3: 2.728 ns/op
Iteration   4: 2.731 ns/op
Iteration   5: 2.729 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_4":
  2.669 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (2.539, 2.669, 2.744), stdev = 0.094
  CI (99.9%): [2.569, 2.770] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_5
# Parameters: (value = 42)

# Run progress: 72.73% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.799 ns/op
# Warmup Iteration   2: 2.549 ns/op
# Warmup Iteration   3: 2.541 ns/op
# Warmup Iteration   4: 2.544 ns/op
# Warmup Iteration   5: 2.551 ns/op
Iteration   1: 2.554 ns/op
Iteration   2: 2.550 ns/op
Iteration   3: 2.551 ns/op
Iteration   4: 2.553 ns/op
Iteration   5: 2.551 ns/op

# Run progress: 75.76% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.813 ns/op
# Warmup Iteration   2: 2.561 ns/op
# Warmup Iteration   3: 2.550 ns/op
# Warmup Iteration   4: 2.553 ns/op
# Warmup Iteration   5: 2.552 ns/op
Iteration   1: 2.555 ns/op
Iteration   2: 2.548 ns/op
Iteration   3: 2.556 ns/op
Iteration   4: 2.557 ns/op
Iteration   5: 2.550 ns/op

# Run progress: 78.79% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.779 ns/op
# Warmup Iteration   2: 2.524 ns/op
# Warmup Iteration   3: 2.519 ns/op
# Warmup Iteration   4: 2.521 ns/op
# Warmup Iteration   5: 2.517 ns/op
Iteration   1: 2.514 ns/op
Iteration   2: 2.519 ns/op
Iteration   3: 2.521 ns/op
Iteration   4: 2.522 ns/op
Iteration   5: 2.517 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_5":
  2.541 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (2.514, 2.541, 2.557), stdev = 0.017
  CI (99.9%): [2.523, 2.559] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_6
# Parameters: (value = 42)

# Run progress: 81.82% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 3.155 ns/op
# Warmup Iteration   2: 2.562 ns/op
# Warmup Iteration   3: 2.563 ns/op
# Warmup Iteration   4: 2.571 ns/op
# Warmup Iteration   5: 2.568 ns/op
Iteration   1: 2.563 ns/op
Iteration   2: 2.562 ns/op
Iteration   3: 2.562 ns/op
Iteration   4: 2.567 ns/op
Iteration   5: 2.566 ns/op

# Run progress: 84.85% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.171 ns/op
# Warmup Iteration   2: 2.846 ns/op
# Warmup Iteration   3: 2.817 ns/op
# Warmup Iteration   4: 2.811 ns/op
# Warmup Iteration   5: 2.810 ns/op
Iteration   1: 2.804 ns/op
Iteration   2: 2.808 ns/op
Iteration   3: 2.804 ns/op
Iteration   4: 2.798 ns/op
Iteration   5: 2.796 ns/op

# Run progress: 87.88% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.115 ns/op
# Warmup Iteration   2: 2.793 ns/op
# Warmup Iteration   3: 2.787 ns/op
# Warmup Iteration   4: 2.783 ns/op
# Warmup Iteration   5: 2.783 ns/op
Iteration   1: 2.781 ns/op
Iteration   2: 2.717 ns/op
Iteration   3: 2.726 ns/op
Iteration   4: 2.733 ns/op
Iteration   5: 2.729 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_6":
  2.701 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (2.562, 2.701, 2.808), stdev = 0.105
  CI (99.9%): [2.589, 2.813] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_8
# Parameters: (value = 42)

# Run progress: 90.91% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.052 ns/op
# Warmup Iteration   2: 2.750 ns/op
# Warmup Iteration   3: 2.740 ns/op
# Warmup Iteration   4: 2.739 ns/op
# Warmup Iteration   5: 2.740 ns/op
Iteration   1: 2.741 ns/op
Iteration   2: 2.739 ns/op
Iteration   3: 2.739 ns/op
Iteration   4: 2.739 ns/op
Iteration   5: 2.740 ns/op

# Run progress: 93.94% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.726 ns/op
# Warmup Iteration   2: 2.823 ns/op
# Warmup Iteration   3: 2.794 ns/op
# Warmup Iteration   4: 2.779 ns/op
# Warmup Iteration   5: 2.774 ns/op
Iteration   1: 2.771 ns/op
Iteration   2: 2.771 ns/op
Iteration   3: 2.769 ns/op
Iteration   4: 2.768 ns/op
Iteration   5: 2.768 ns/op

# Run progress: 96.97% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.756 ns/op
# Warmup Iteration   2: 2.757 ns/op
# Warmup Iteration   3: 2.728 ns/op
# Warmup Iteration   4: 2.730 ns/op
# Warmup Iteration   5: 2.728 ns/op
Iteration   1: 2.729 ns/op
Iteration   2: 2.724 ns/op
Iteration   3: 2.721 ns/op
Iteration   4: 2.723 ns/op
Iteration   5: 2.720 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingLambdaBenchmark.depth_8":
  2.744 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (2.720, 2.744, 2.771), stdev = 0.020
  CI (99.9%): [2.723, 2.765] (assumes normal distribution)


# Run complete. Total time: 00:55:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         (value)  Mode  Cnt  Score   Error  Units
ChainingLambdaBenchmark.baseline       42  avgt   15  2.572 ± 0.117  ns/op
ChainingLambdaBenchmark.depth_1        42  avgt   15  2.637 ± 0.141  ns/op
ChainingLambdaBenchmark.depth_12       42  avgt   15  2.704 ± 0.113  ns/op
ChainingLambdaBenchmark.depth_16       42  avgt   15  3.484 ± 1.239  ns/op
ChainingLambdaBenchmark.depth_2        42  avgt   15  2.627 ± 0.153  ns/op
ChainingLambdaBenchmark.depth_24       42  avgt   15  2.600 ± 0.137  ns/op
ChainingLambdaBenchmark.depth_3        42  avgt   15  2.712 ± 0.114  ns/op
ChainingLambdaBenchmark.depth_4        42  avgt   15  2.669 ± 0.101  ns/op
ChainingLambdaBenchmark.depth_5        42  avgt   15  2.541 ± 0.018  ns/op
ChainingLambdaBenchmark.depth_6        42  avgt   15  2.701 ± 0.112  ns/op
ChainingLambdaBenchmark.depth_8        42  avgt   15  2.744 ± 0.021  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/ChainingLambdaBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ChainingAnonymousClassBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ChainingAnonymousClassBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:55:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.064 ns/op
# Warmup Iteration   2: 2.808 ns/op
# Warmup Iteration   3: 2.787 ns/op
# Warmup Iteration   4: 2.776 ns/op
# Warmup Iteration   5: 2.775 ns/op
Iteration   1: 2.769 ns/op
Iteration   2: 2.766 ns/op
Iteration   3: 2.765 ns/op
Iteration   4: 2.763 ns/op
Iteration   5: 2.766 ns/op

# Run progress: 3.03% complete, ETA 00:53:32
# Fork: 2 of 3
# Warmup Iteration   1: 3.008 ns/op
# Warmup Iteration   2: 2.791 ns/op
# Warmup Iteration   3: 2.789 ns/op
# Warmup Iteration   4: 2.780 ns/op
# Warmup Iteration   5: 2.782 ns/op
Iteration   1: 2.781 ns/op
Iteration   2: 2.785 ns/op
Iteration   3: 2.781 ns/op
Iteration   4: 2.775 ns/op
Iteration   5: 2.772 ns/op

# Run progress: 6.06% complete, ETA 00:51:50
# Fork: 3 of 3
# Warmup Iteration   1: 2.725 ns/op
# Warmup Iteration   2: 2.731 ns/op
# Warmup Iteration   3: 2.725 ns/op
# Warmup Iteration   4: 2.722 ns/op
# Warmup Iteration   5: 2.723 ns/op
Iteration   1: 2.722 ns/op
Iteration   2: 2.721 ns/op
Iteration   3: 2.727 ns/op
Iteration   4: 2.729 ns/op
Iteration   5: 2.724 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.baseline":
  2.756 ±(99.9%) 0.026 ns/op [Average]
  (min, avg, max) = (2.721, 2.756, 2.785), stdev = 0.024
  CI (99.9%): [2.730, 2.782] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_1
# Parameters: (value = 42)

# Run progress: 9.09% complete, ETA 00:50:09
# Fork: 1 of 3
# Warmup Iteration   1: 2.695 ns/op
# Warmup Iteration   2: 2.751 ns/op
# Warmup Iteration   3: 2.738 ns/op
# Warmup Iteration   4: 2.733 ns/op
# Warmup Iteration   5: 2.736 ns/op
Iteration   1: 2.523 ns/op
Iteration   2: 2.537 ns/op
Iteration   3: 2.538 ns/op
Iteration   4: 2.540 ns/op
Iteration   5: 2.545 ns/op

# Run progress: 12.12% complete, ETA 00:48:28
# Fork: 2 of 3
# Warmup Iteration   1: 3.018 ns/op
# Warmup Iteration   2: 2.765 ns/op
# Warmup Iteration   3: 2.805 ns/op
# Warmup Iteration   4: 2.799 ns/op
# Warmup Iteration   5: 2.788 ns/op
Iteration   1: 2.787 ns/op
Iteration   2: 2.729 ns/op
Iteration   3: 2.734 ns/op
Iteration   4: 2.732 ns/op
Iteration   5: 2.729 ns/op

# Run progress: 15.15% complete, ETA 00:46:48
# Fork: 3 of 3
# Warmup Iteration   1: 3.040 ns/op
# Warmup Iteration   2: 2.790 ns/op
# Warmup Iteration   3: 2.773 ns/op
# Warmup Iteration   4: 2.770 ns/op
# Warmup Iteration   5: 2.768 ns/op
Iteration   1: 2.766 ns/op
Iteration   2: 2.766 ns/op
Iteration   3: 2.769 ns/op
Iteration   4: 2.770 ns/op
Iteration   5: 2.768 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_1":
  2.682 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (2.523, 2.682, 2.787), stdev = 0.108
  CI (99.9%): [2.567, 2.798] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_12
# Parameters: (value = 42)

# Run progress: 18.18% complete, ETA 00:45:08
# Fork: 1 of 3
# Warmup Iteration   1: 2.812 ns/op
# Warmup Iteration   2: 2.550 ns/op
# Warmup Iteration   3: 2.535 ns/op
# Warmup Iteration   4: 2.542 ns/op
# Warmup Iteration   5: 2.545 ns/op
Iteration   1: 2.546 ns/op
Iteration   2: 2.551 ns/op
Iteration   3: 2.548 ns/op
Iteration   4: 2.546 ns/op
Iteration   5: 2.548 ns/op

# Run progress: 21.21% complete, ETA 00:43:27
# Fork: 2 of 3
# Warmup Iteration   1: 2.933 ns/op
# Warmup Iteration   2: 2.853 ns/op
# Warmup Iteration   3: 2.814 ns/op
# Warmup Iteration   4: 2.803 ns/op
# Warmup Iteration   5: 2.790 ns/op
Iteration   1: 2.789 ns/op
Iteration   2: 2.788 ns/op
Iteration   3: 2.781 ns/op
Iteration   4: 2.780 ns/op
Iteration   5: 2.776 ns/op

# Run progress: 24.24% complete, ETA 00:41:47
# Fork: 3 of 3
# Warmup Iteration   1: 3.001 ns/op
# Warmup Iteration   2: 2.729 ns/op
# Warmup Iteration   3: 2.718 ns/op
# Warmup Iteration   4: 2.722 ns/op
# Warmup Iteration   5: 2.724 ns/op
Iteration   1: 2.721 ns/op
Iteration   2: 2.718 ns/op
Iteration   3: 2.720 ns/op
Iteration   4: 2.722 ns/op
Iteration   5: 2.716 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_12":
  2.683 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (2.546, 2.683, 2.789), stdev = 0.103
  CI (99.9%): [2.574, 2.793] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_16
# Parameters: (value = 42)

# Run progress: 27.27% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 3.117 ns/op
# Warmup Iteration   2: 2.541 ns/op
# Warmup Iteration   3: 2.634 ns/op
# Warmup Iteration   4: 2.800 ns/op
# Warmup Iteration   5: 2.787 ns/op
Iteration   1: 2.771 ns/op
Iteration   2: 2.520 ns/op
Iteration   3: 2.534 ns/op
Iteration   4: 2.537 ns/op
Iteration   5: 2.747 ns/op

# Run progress: 30.30% complete, ETA 00:38:26
# Fork: 2 of 3
# Warmup Iteration   1: 2.766 ns/op
# Warmup Iteration   2: 2.850 ns/op
# Warmup Iteration   3: 2.804 ns/op
# Warmup Iteration   4: 2.798 ns/op
# Warmup Iteration   5: 2.786 ns/op
Iteration   1: 2.784 ns/op
Iteration   2: 2.777 ns/op
Iteration   3: 2.770 ns/op
Iteration   4: 2.771 ns/op
Iteration   5: 2.769 ns/op

# Run progress: 33.33% complete, ETA 00:36:46
# Fork: 3 of 3
# Warmup Iteration   1: 2.824 ns/op
# Warmup Iteration   2: 2.485 ns/op
# Warmup Iteration   3: 2.483 ns/op
# Warmup Iteration   4: 2.500 ns/op
# Warmup Iteration   5: 2.501 ns/op
Iteration   1: 2.502 ns/op
Iteration   2: 2.510 ns/op
Iteration   3: 2.529 ns/op
Iteration   4: 2.517 ns/op
Iteration   5: 2.513 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_16":
  2.637 ±(99.9%) 0.138 ns/op [Average]
  (min, avg, max) = (2.502, 2.637, 2.784), stdev = 0.129
  CI (99.9%): [2.499, 2.775] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_2
# Parameters: (value = 42)

# Run progress: 36.36% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.776 ns/op
# Warmup Iteration   2: 2.529 ns/op
# Warmup Iteration   3: 2.519 ns/op
# Warmup Iteration   4: 2.520 ns/op
# Warmup Iteration   5: 2.521 ns/op
Iteration   1: 2.516 ns/op
Iteration   2: 2.517 ns/op
Iteration   3: 2.519 ns/op
Iteration   4: 2.518 ns/op
Iteration   5: 2.518 ns/op

# Run progress: 39.39% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 2.776 ns/op
# Warmup Iteration   2: 2.826 ns/op
# Warmup Iteration   3: 2.765 ns/op
# Warmup Iteration   4: 2.761 ns/op
# Warmup Iteration   5: 2.750 ns/op
Iteration   1: 2.757 ns/op
Iteration   2: 2.747 ns/op
Iteration   3: 2.739 ns/op
Iteration   4: 2.739 ns/op
Iteration   5: 2.740 ns/op

# Run progress: 42.42% complete, ETA 00:31:45
# Fork: 3 of 3
# Warmup Iteration   1: 3.069 ns/op
# Warmup Iteration   2: 2.804 ns/op
# Warmup Iteration   3: 2.792 ns/op
# Warmup Iteration   4: 2.792 ns/op
# Warmup Iteration   5: 2.793 ns/op
Iteration   1: 2.789 ns/op
Iteration   2: 2.531 ns/op
Iteration   3: 2.547 ns/op
Iteration   4: 2.556 ns/op
Iteration   5: 2.565 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_2":
  2.620 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (2.516, 2.620, 2.789), stdev = 0.113
  CI (99.9%): [2.499, 2.741] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_24
# Parameters: (value = 42)

# Run progress: 45.45% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 3.126 ns/op
# Warmup Iteration   2: 2.490 ns/op
# Warmup Iteration   3: 2.498 ns/op
# Warmup Iteration   4: 2.510 ns/op
# Warmup Iteration   5: 2.516 ns/op
Iteration   1: 2.515 ns/op
Iteration   2: 2.515 ns/op
Iteration   3: 2.513 ns/op
Iteration   4: 2.513 ns/op
Iteration   5: 2.516 ns/op

# Run progress: 48.48% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 2.824 ns/op
# Warmup Iteration   2: 2.595 ns/op
# Warmup Iteration   3: 2.521 ns/op
# Warmup Iteration   4: 2.527 ns/op
# Warmup Iteration   5: 2.852 ns/op
Iteration   1: 2.835 ns/op
Iteration   2: 2.814 ns/op
Iteration   3: 2.807 ns/op
Iteration   4: 2.800 ns/op
Iteration   5: 2.795 ns/op

# Run progress: 51.52% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 3.102 ns/op
# Warmup Iteration   2: 2.564 ns/op
# Warmup Iteration   3: 2.569 ns/op
# Warmup Iteration   4: 2.508 ns/op
# Warmup Iteration   5: 2.519 ns/op
Iteration   1: 2.521 ns/op
Iteration   2: 2.523 ns/op
Iteration   3: 2.531 ns/op
Iteration   4: 2.529 ns/op
Iteration   5: 2.532 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_24":
  2.617 ±(99.9%) 0.151 ns/op [Average]
  (min, avg, max) = (2.513, 2.617, 2.835), stdev = 0.142
  CI (99.9%): [2.466, 2.769] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_3
# Parameters: (value = 42)

# Run progress: 54.55% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 2.763 ns/op
# Warmup Iteration   2: 2.588 ns/op
# Warmup Iteration   3: 2.566 ns/op
# Warmup Iteration   4: 2.564 ns/op
# Warmup Iteration   5: 2.567 ns/op
Iteration   1: 2.564 ns/op
Iteration   2: 2.567 ns/op
Iteration   3: 2.562 ns/op
Iteration   4: 2.561 ns/op
Iteration   5: 2.563 ns/op

# Run progress: 57.58% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.827 ns/op
# Warmup Iteration   2: 2.792 ns/op
# Warmup Iteration   3: 2.770 ns/op
# Warmup Iteration   4: 2.769 ns/op
# Warmup Iteration   5: 2.757 ns/op
Iteration   1: 2.756 ns/op
Iteration   2: 2.752 ns/op
Iteration   3: 2.745 ns/op
Iteration   4: 2.811 ns/op
Iteration   5: 2.808 ns/op

# Run progress: 60.61% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 3.068 ns/op
# Warmup Iteration   2: 2.540 ns/op
# Warmup Iteration   3: 2.550 ns/op
# Warmup Iteration   4: 2.564 ns/op
# Warmup Iteration   5: 2.567 ns/op
Iteration   1: 2.571 ns/op
Iteration   2: 2.843 ns/op
Iteration   3: 2.833 ns/op
Iteration   4: 2.814 ns/op
Iteration   5: 2.799 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_3":
  2.703 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (2.561, 2.703, 2.843), stdev = 0.120
  CI (99.9%): [2.575, 2.832] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_4
# Parameters: (value = 42)

# Run progress: 63.64% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 3.134 ns/op
# Warmup Iteration   2: 2.492 ns/op
# Warmup Iteration   3: 2.488 ns/op
# Warmup Iteration   4: 2.497 ns/op
# Warmup Iteration   5: 2.508 ns/op
Iteration   1: 2.512 ns/op
Iteration   2: 2.509 ns/op
Iteration   3: 2.512 ns/op
Iteration   4: 2.513 ns/op
Iteration   5: 2.517 ns/op

# Run progress: 66.67% complete, ETA 00:18:22
# Fork: 2 of 3
# Warmup Iteration   1: 3.088 ns/op
# Warmup Iteration   2: 2.801 ns/op
# Warmup Iteration   3: 2.542 ns/op
# Warmup Iteration   4: 2.555 ns/op
# Warmup Iteration   5: 2.560 ns/op
Iteration   1: 2.562 ns/op
Iteration   2: 2.560 ns/op
Iteration   3: 2.566 ns/op
Iteration   4: 2.566 ns/op
Iteration   5: 2.564 ns/op

# Run progress: 69.70% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.677 ns/op
# Warmup Iteration   2: 2.858 ns/op
# Warmup Iteration   3: 2.825 ns/op
# Warmup Iteration   4: 2.807 ns/op
# Warmup Iteration   5: 2.799 ns/op
Iteration   1: 2.792 ns/op
Iteration   2: 2.788 ns/op
Iteration   3: 2.787 ns/op
Iteration   4: 2.785 ns/op
Iteration   5: 2.784 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_4":
  2.621 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (2.509, 2.621, 2.792), stdev = 0.123
  CI (99.9%): [2.489, 2.753] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_5
# Parameters: (value = 42)

# Run progress: 72.73% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 2.798 ns/op
# Warmup Iteration   2: 2.563 ns/op
# Warmup Iteration   3: 2.567 ns/op
# Warmup Iteration   4: 2.576 ns/op
# Warmup Iteration   5: 2.575 ns/op
Iteration   1: 2.579 ns/op
Iteration   2: 2.576 ns/op
Iteration   3: 2.580 ns/op
Iteration   4: 2.583 ns/op
Iteration   5: 2.589 ns/op

# Run progress: 75.76% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.779 ns/op
# Warmup Iteration   2: 2.534 ns/op
# Warmup Iteration   3: 2.528 ns/op
# Warmup Iteration   4: 2.531 ns/op
# Warmup Iteration   5: 2.530 ns/op
Iteration   1: 2.527 ns/op
Iteration   2: 2.529 ns/op
Iteration   3: 2.531 ns/op
Iteration   4: 2.529 ns/op
Iteration   5: 2.532 ns/op

# Run progress: 78.79% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.812 ns/op
# Warmup Iteration   2: 2.542 ns/op
# Warmup Iteration   3: 2.528 ns/op
# Warmup Iteration   4: 2.530 ns/op
# Warmup Iteration   5: 2.530 ns/op
Iteration   1: 2.527 ns/op
Iteration   2: 2.529 ns/op
Iteration   3: 2.529 ns/op
Iteration   4: 2.531 ns/op
Iteration   5: 2.530 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_5":
  2.547 ±(99.9%) 0.027 ns/op [Average]
  (min, avg, max) = (2.527, 2.547, 2.589), stdev = 0.026
  CI (99.9%): [2.519, 2.574] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_6
# Parameters: (value = 42)

# Run progress: 81.82% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 3.094 ns/op
# Warmup Iteration   2: 2.802 ns/op
# Warmup Iteration   3: 2.761 ns/op
# Warmup Iteration   4: 2.760 ns/op
# Warmup Iteration   5: 2.749 ns/op
Iteration   1: 2.749 ns/op
Iteration   2: 2.748 ns/op
Iteration   3: 2.750 ns/op
Iteration   4: 2.746 ns/op
Iteration   5: 2.743 ns/op

# Run progress: 84.85% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.041 ns/op
# Warmup Iteration   2: 2.756 ns/op
# Warmup Iteration   3: 2.740 ns/op
# Warmup Iteration   4: 2.744 ns/op
# Warmup Iteration   5: 2.743 ns/op
Iteration   1: 2.745 ns/op
Iteration   2: 2.739 ns/op
Iteration   3: 2.742 ns/op
Iteration   4: 2.743 ns/op
Iteration   5: 2.737 ns/op

# Run progress: 87.88% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.063 ns/op
# Warmup Iteration   2: 2.749 ns/op
# Warmup Iteration   3: 2.743 ns/op
# Warmup Iteration   4: 2.742 ns/op
# Warmup Iteration   5: 2.472 ns/op
Iteration   1: 2.491 ns/op
Iteration   2: 2.502 ns/op
Iteration   3: 2.506 ns/op
Iteration   4: 2.510 ns/op
Iteration   5: 2.516 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_6":
  2.664 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (2.491, 2.664, 2.750), stdev = 0.117
  CI (99.9%): [2.540, 2.789] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_8
# Parameters: (value = 42)

# Run progress: 90.91% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.892 ns/op
# Warmup Iteration   2: 2.799 ns/op
# Warmup Iteration   3: 2.757 ns/op
# Warmup Iteration   4: 2.749 ns/op
# Warmup Iteration   5: 2.747 ns/op
Iteration   1: 2.739 ns/op
Iteration   2: 2.740 ns/op
Iteration   3: 2.739 ns/op
Iteration   4: 2.735 ns/op
Iteration   5: 2.737 ns/op

# Run progress: 93.94% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3.071 ns/op
# Warmup Iteration   2: 2.754 ns/op
# Warmup Iteration   3: 2.742 ns/op
# Warmup Iteration   4: 2.743 ns/op
# Warmup Iteration   5: 2.744 ns/op
Iteration   1: 2.744 ns/op
Iteration   2: 2.467 ns/op
Iteration   3: 2.484 ns/op
Iteration   4: 2.500 ns/op
Iteration   5: 2.502 ns/op

# Run progress: 96.97% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 3.164 ns/op
# Warmup Iteration   2: 2.828 ns/op
# Warmup Iteration   3: 2.804 ns/op
# Warmup Iteration   4: 2.796 ns/op
# Warmup Iteration   5: 2.786 ns/op
Iteration   1: 2.782 ns/op
Iteration   2: 2.778 ns/op
Iteration   3: 2.782 ns/op
Iteration   4: 2.773 ns/op
Iteration   5: 2.772 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingAnonymousClassBenchmark.depth_8":
  2.685 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (2.467, 2.685, 2.782), stdev = 0.124
  CI (99.9%): [2.552, 2.818] (assumes normal distribution)


# Run complete. Total time: 00:55:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 (value)  Mode  Cnt  Score   Error  Units
ChainingAnonymousClassBenchmark.baseline       42  avgt   15  2.756 ± 0.026  ns/op
ChainingAnonymousClassBenchmark.depth_1        42  avgt   15  2.682 ± 0.115  ns/op
ChainingAnonymousClassBenchmark.depth_12       42  avgt   15  2.683 ± 0.110  ns/op
ChainingAnonymousClassBenchmark.depth_16       42  avgt   15  2.637 ± 0.138  ns/op
ChainingAnonymousClassBenchmark.depth_2        42  avgt   15  2.620 ± 0.121  ns/op
ChainingAnonymousClassBenchmark.depth_24       42  avgt   15  2.617 ± 0.151  ns/op
ChainingAnonymousClassBenchmark.depth_3        42  avgt   15  2.703 ± 0.129  ns/op
ChainingAnonymousClassBenchmark.depth_4        42  avgt   15  2.621 ± 0.132  ns/op
ChainingAnonymousClassBenchmark.depth_5        42  avgt   15  2.547 ± 0.027  ns/op
ChainingAnonymousClassBenchmark.depth_6        42  avgt   15  2.664 ± 0.125  ns/op
ChainingAnonymousClassBenchmark.depth_8        42  avgt   15  2.685 ± 0.133  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/ChainingAnonymousClassBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ChainingMethodRefBoundedBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ChainingMethodRefBoundedBenchmark.json
Running java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -jar benchmarks/target/benchmarks.jar .*ChainingMethodRefUnboundedBenchmark.* -gc -prof -wi 5 -w 10 -i 5 -r 10 -f 3 -foe true -rf json -rff results/hotspotvm_graal_jit/ChainingMethodRefUnboundedBenchmark.json
# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.baseline
# Parameters: (value = 42)

# Run progress: 0.00% complete, ETA 00:55:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.837 ns/op
# Warmup Iteration   2: 2.511 ns/op
# Warmup Iteration   3: 2.831 ns/op
# Warmup Iteration   4: 2.817 ns/op
# Warmup Iteration   5: 2.797 ns/op
Iteration   1: 2.786 ns/op
Iteration   2: 2.781 ns/op
Iteration   3: 2.779 ns/op
Iteration   4: 2.774 ns/op
Iteration   5: 2.774 ns/op

# Run progress: 3.03% complete, ETA 00:53:33
# Fork: 2 of 3
# Warmup Iteration   1: 3.022 ns/op
# Warmup Iteration   2: 2.543 ns/op
# Warmup Iteration   3: 2.543 ns/op
# Warmup Iteration   4: 2.552 ns/op
# Warmup Iteration   5: 2.562 ns/op
Iteration   1: 2.565 ns/op
Iteration   2: 2.568 ns/op
Iteration   3: 2.567 ns/op
Iteration   4: 2.578 ns/op
Iteration   5: 2.517 ns/op

# Run progress: 6.06% complete, ETA 00:51:50
# Fork: 3 of 3
# Warmup Iteration   1: 2.706 ns/op
# Warmup Iteration   2: 2.513 ns/op
# Warmup Iteration   3: 2.509 ns/op
# Warmup Iteration   4: 2.514 ns/op
# Warmup Iteration   5: 2.512 ns/op
Iteration   1: 2.525 ns/op
Iteration   2: 2.508 ns/op
Iteration   3: 2.510 ns/op
Iteration   4: 2.535 ns/op
Iteration   5: 2.509 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.baseline":
  2.618 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (2.508, 2.618, 2.786), stdev = 0.120
  CI (99.9%): [2.491, 2.746] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_1
# Parameters: (value = 42)

# Run progress: 9.09% complete, ETA 00:50:10
# Fork: 1 of 3
# Warmup Iteration   1: 3.174 ns/op
# Warmup Iteration   2: 2.760 ns/op
# Warmup Iteration   3: 2.749 ns/op
# Warmup Iteration   4: 2.744 ns/op
# Warmup Iteration   5: 2.741 ns/op
Iteration   1: 2.735 ns/op
Iteration   2: 2.732 ns/op
Iteration   3: 2.734 ns/op
Iteration   4: 2.734 ns/op
Iteration   5: 2.733 ns/op

# Run progress: 12.12% complete, ETA 00:48:29
# Fork: 2 of 3
# Warmup Iteration   1: 3.006 ns/op
# Warmup Iteration   2: 2.754 ns/op
# Warmup Iteration   3: 2.740 ns/op
# Warmup Iteration   4: 2.737 ns/op
# Warmup Iteration   5: 2.740 ns/op
Iteration   1: 2.735 ns/op
Iteration   2: 2.734 ns/op
Iteration   3: 2.736 ns/op
Iteration   4: 2.731 ns/op
Iteration   5: 2.733 ns/op

# Run progress: 15.15% complete, ETA 00:46:48
# Fork: 3 of 3
# Warmup Iteration   1: 3.064 ns/op
# Warmup Iteration   2: 2.783 ns/op
# Warmup Iteration   3: 2.769 ns/op
# Warmup Iteration   4: 2.767 ns/op
# Warmup Iteration   5: 2.780 ns/op
Iteration   1: 2.766 ns/op
Iteration   2: 2.767 ns/op
Iteration   3: 2.765 ns/op
Iteration   4: 2.765 ns/op
Iteration   5: 2.765 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_1":
  2.744 ±(99.9%) 0.017 ns/op [Average]
  (min, avg, max) = (2.731, 2.744, 2.767), stdev = 0.016
  CI (99.9%): [2.728, 2.761] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_12
# Parameters: (value = 42)

# Run progress: 18.18% complete, ETA 00:45:07
# Fork: 1 of 3
# Warmup Iteration   1: 2.776 ns/op
# Warmup Iteration   2: 2.538 ns/op
# Warmup Iteration   3: 2.535 ns/op
# Warmup Iteration   4: 2.537 ns/op
# Warmup Iteration   5: 2.535 ns/op
Iteration   1: 2.537 ns/op
Iteration   2: 2.536 ns/op
Iteration   3: 2.541 ns/op
Iteration   4: 2.544 ns/op
Iteration   5: 2.733 ns/op

# Run progress: 21.21% complete, ETA 00:43:27
# Fork: 2 of 3
# Warmup Iteration   1: 3.117 ns/op
# Warmup Iteration   2: 2.542 ns/op
# Warmup Iteration   3: 2.537 ns/op
# Warmup Iteration   4: 2.537 ns/op
# Warmup Iteration   5: 2.544 ns/op
Iteration   1: 2.547 ns/op
Iteration   2: 2.544 ns/op
Iteration   3: 2.551 ns/op
Iteration   4: 2.549 ns/op
Iteration   5: 2.549 ns/op

# Run progress: 24.24% complete, ETA 00:41:47
# Fork: 3 of 3
# Warmup Iteration   1: 3.090 ns/op
# Warmup Iteration   2: 2.760 ns/op
# Warmup Iteration   3: 2.746 ns/op
# Warmup Iteration   4: 2.744 ns/op
# Warmup Iteration   5: 2.740 ns/op
Iteration   1: 2.740 ns/op
Iteration   2: 2.465 ns/op
Iteration   3: 2.478 ns/op
Iteration   4: 2.492 ns/op
Iteration   5: 2.501 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_12":
  2.554 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (2.465, 2.554, 2.740), stdev = 0.079
  CI (99.9%): [2.469, 2.638] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_16
# Parameters: (value = 42)

# Run progress: 27.27% complete, ETA 00:40:06
# Fork: 1 of 3
# Warmup Iteration   1: 2.767 ns/op
# Warmup Iteration   2: 2.514 ns/op
# Warmup Iteration   3: 2.510 ns/op
# Warmup Iteration   4: 2.516 ns/op
# Warmup Iteration   5: 2.515 ns/op
Iteration   1: 2.514 ns/op
Iteration   2: 2.512 ns/op
Iteration   3: 2.511 ns/op
Iteration   4: 2.511 ns/op
Iteration   5: 2.510 ns/op

# Run progress: 30.30% complete, ETA 00:38:26
# Fork: 2 of 3
# Warmup Iteration   1: 3.074 ns/op
# Warmup Iteration   2: 2.772 ns/op
# Warmup Iteration   3: 2.756 ns/op
# Warmup Iteration   4: 2.753 ns/op
# Warmup Iteration   5: 2.753 ns/op
Iteration   1: 2.749 ns/op
Iteration   2: 2.744 ns/op
Iteration   3: 2.740 ns/op
Iteration   4: 2.741 ns/op
Iteration   5: 2.739 ns/op

# Run progress: 33.33% complete, ETA 00:36:45
# Fork: 3 of 3
# Warmup Iteration   1: 3.037 ns/op
# Warmup Iteration   2: 2.533 ns/op
# Warmup Iteration   3: 2.535 ns/op
# Warmup Iteration   4: 2.538 ns/op
# Warmup Iteration   5: 2.542 ns/op
Iteration   1: 2.541 ns/op
Iteration   2: 2.543 ns/op
Iteration   3: 2.541 ns/op
Iteration   4: 2.538 ns/op
Iteration   5: 2.539 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_16":
  2.598 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (2.510, 2.598, 2.749), stdev = 0.106
  CI (99.9%): [2.484, 2.712] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_2
# Parameters: (value = 42)

# Run progress: 36.36% complete, ETA 00:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.732 ns/op
# Warmup Iteration   2: 2.785 ns/op
# Warmup Iteration   3: 2.768 ns/op
# Warmup Iteration   4: 2.750 ns/op
# Warmup Iteration   5: 2.745 ns/op
Iteration   1: 2.739 ns/op
Iteration   2: 2.737 ns/op
Iteration   3: 2.736 ns/op
Iteration   4: 2.738 ns/op
Iteration   5: 2.738 ns/op

# Run progress: 39.39% complete, ETA 00:33:25
# Fork: 2 of 3
# Warmup Iteration   1: 3.023 ns/op
# Warmup Iteration   2: 2.739 ns/op
# Warmup Iteration   3: 2.729 ns/op
# Warmup Iteration   4: 2.724 ns/op
# Warmup Iteration   5: 2.731 ns/op
Iteration   1: 2.756 ns/op
Iteration   2: 2.729 ns/op
Iteration   3: 2.726 ns/op
Iteration   4: 2.729 ns/op
Iteration   5: 2.724 ns/op

# Run progress: 42.42% complete, ETA 00:31:45
# Fork: 3 of 3
# Warmup Iteration   1: 2.709 ns/op
# Warmup Iteration   2: 2.506 ns/op
# Warmup Iteration   3: 2.510 ns/op
# Warmup Iteration   4: 2.522 ns/op
# Warmup Iteration   5: 2.522 ns/op
Iteration   1: 2.525 ns/op
Iteration   2: 2.524 ns/op
Iteration   3: 2.861 ns/op
Iteration   4: 2.844 ns/op
Iteration   5: 2.827 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_2":
  2.729 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (2.524, 2.729, 2.861), stdev = 0.094
  CI (99.9%): [2.628, 2.830] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_24
# Parameters: (value = 42)

# Run progress: 45.45% complete, ETA 00:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 3.063 ns/op
# Warmup Iteration   2: 2.754 ns/op
# Warmup Iteration   3: 2.730 ns/op
# Warmup Iteration   4: 2.731 ns/op
# Warmup Iteration   5: 2.727 ns/op
Iteration   1: 2.719 ns/op
Iteration   2: 2.717 ns/op
Iteration   3: 2.720 ns/op
Iteration   4: 2.719 ns/op
Iteration   5: 2.713 ns/op

# Run progress: 48.48% complete, ETA 00:28:24
# Fork: 2 of 3
# Warmup Iteration   1: 3.079 ns/op
# Warmup Iteration   2: 2.465 ns/op
# Warmup Iteration   3: 2.472 ns/op
# Warmup Iteration   4: 2.488 ns/op
# Warmup Iteration   5: 2.496 ns/op
Iteration   1: 2.498 ns/op
Iteration   2: 2.501 ns/op
Iteration   3: 2.501 ns/op
Iteration   4: 2.501 ns/op
Iteration   5: 2.503 ns/op

# Run progress: 51.52% complete, ETA 00:26:44
# Fork: 3 of 3
# Warmup Iteration   1: 3.193 ns/op
# Warmup Iteration   2: 2.817 ns/op
# Warmup Iteration   3: 2.795 ns/op
# Warmup Iteration   4: 2.783 ns/op
# Warmup Iteration   5: 2.774 ns/op
Iteration   1: 2.769 ns/op
Iteration   2: 2.766 ns/op
Iteration   3: 2.767 ns/op
Iteration   4: 2.766 ns/op
Iteration   5: 2.767 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_24":
  2.662 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (2.498, 2.662, 2.769), stdev = 0.120
  CI (99.9%): [2.534, 2.790] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_3
# Parameters: (value = 42)

# Run progress: 54.55% complete, ETA 00:25:03
# Fork: 1 of 3
# Warmup Iteration   1: 5.322 ns/op
# Warmup Iteration   2: 4.836 ns/op
# Warmup Iteration   3: 4.822 ns/op
# Warmup Iteration   4: 4.819 ns/op
# Warmup Iteration   5: 4.818 ns/op
Iteration   1: 4.818 ns/op
Iteration   2: 4.819 ns/op
Iteration   3: 4.818 ns/op
Iteration   4: 4.819 ns/op
Iteration   5: 4.819 ns/op

# Run progress: 57.58% complete, ETA 00:23:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.804 ns/op
# Warmup Iteration   2: 2.548 ns/op
# Warmup Iteration   3: 2.539 ns/op
# Warmup Iteration   4: 2.545 ns/op
# Warmup Iteration   5: 2.545 ns/op
Iteration   1: 2.547 ns/op
Iteration   2: 2.543 ns/op
Iteration   3: 2.542 ns/op
Iteration   4: 2.541 ns/op
Iteration   5: 2.542 ns/op

# Run progress: 60.61% complete, ETA 00:21:43
# Fork: 3 of 3
# Warmup Iteration   1: 3.152 ns/op
# Warmup Iteration   2: 2.826 ns/op
# Warmup Iteration   3: 2.532 ns/op
# Warmup Iteration   4: 2.546 ns/op
# Warmup Iteration   5: 2.490 ns/op
Iteration   1: 2.499 ns/op
Iteration   2: 2.499 ns/op
Iteration   3: 2.509 ns/op
Iteration   4: 2.507 ns/op
Iteration   5: 2.509 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_3":
  3.289 ±(99.9%) 1.197 ns/op [Average]
  (min, avg, max) = (2.499, 3.289, 4.819), stdev = 1.120
  CI (99.9%): [2.092, 4.486] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_4
# Parameters: (value = 42)

# Run progress: 63.64% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 2.688 ns/op
# Warmup Iteration   2: 2.522 ns/op
# Warmup Iteration   3: 2.516 ns/op
# Warmup Iteration   4: 2.519 ns/op
# Warmup Iteration   5: 2.522 ns/op
Iteration   1: 2.516 ns/op
Iteration   2: 2.520 ns/op
Iteration   3: 2.527 ns/op
Iteration   4: 2.517 ns/op
Iteration   5: 2.520 ns/op

# Run progress: 66.67% complete, ETA 00:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 3.131 ns/op
# Warmup Iteration   2: 2.539 ns/op
# Warmup Iteration   3: 2.539 ns/op
# Warmup Iteration   4: 2.545 ns/op
# Warmup Iteration   5: 2.547 ns/op
Iteration   1: 2.549 ns/op
Iteration   2: 2.546 ns/op
Iteration   3: 2.552 ns/op
Iteration   4: 2.550 ns/op
Iteration   5: 2.551 ns/op

# Run progress: 69.70% complete, ETA 00:16:42
# Fork: 3 of 3
# Warmup Iteration   1: 3.115 ns/op
# Warmup Iteration   2: 2.840 ns/op
# Warmup Iteration   3: 2.793 ns/op
# Warmup Iteration   4: 2.790 ns/op
# Warmup Iteration   5: 2.776 ns/op
Iteration   1: 2.773 ns/op
Iteration   2: 2.772 ns/op
Iteration   3: 2.767 ns/op
Iteration   4: 2.768 ns/op
Iteration   5: 2.767 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_4":
  2.613 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (2.516, 2.613, 2.773), stdev = 0.115
  CI (99.9%): [2.490, 2.736] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_5
# Parameters: (value = 42)

# Run progress: 72.73% complete, ETA 00:15:02
# Fork: 1 of 3
# Warmup Iteration   1: 3.013 ns/op
# Warmup Iteration   2: 2.476 ns/op
# Warmup Iteration   3: 2.469 ns/op
# Warmup Iteration   4: 2.480 ns/op
# Warmup Iteration   5: 2.489 ns/op
Iteration   1: 2.489 ns/op
Iteration   2: 2.493 ns/op
Iteration   3: 2.498 ns/op
Iteration   4: 2.497 ns/op
Iteration   5: 2.502 ns/op

# Run progress: 75.76% complete, ETA 00:13:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.837 ns/op
# Warmup Iteration   2: 2.529 ns/op
# Warmup Iteration   3: 2.511 ns/op
# Warmup Iteration   4: 2.517 ns/op
# Warmup Iteration   5: 2.518 ns/op
Iteration   1: 2.513 ns/op
Iteration   2: 2.510 ns/op
Iteration   3: 2.517 ns/op
Iteration   4: 2.519 ns/op
Iteration   5: 2.518 ns/op

# Run progress: 78.79% complete, ETA 00:11:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.102 ns/op
# Warmup Iteration   2: 2.827 ns/op
# Warmup Iteration   3: 2.789 ns/op
# Warmup Iteration   4: 2.781 ns/op
# Warmup Iteration   5: 2.775 ns/op
Iteration   1: 2.772 ns/op
Iteration   2: 2.771 ns/op
Iteration   3: 2.485 ns/op
Iteration   4: 2.493 ns/op
Iteration   5: 2.796 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_5":
  2.558 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (2.485, 2.558, 2.796), stdev = 0.115
  CI (99.9%): [2.435, 2.681] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_6
# Parameters: (value = 42)

# Run progress: 81.82% complete, ETA 00:10:01
# Fork: 1 of 3
# Warmup Iteration   1: 2.881 ns/op
# Warmup Iteration   2: 2.830 ns/op
# Warmup Iteration   3: 2.761 ns/op
# Warmup Iteration   4: 2.752 ns/op
# Warmup Iteration   5: 2.745 ns/op
Iteration   1: 2.742 ns/op
Iteration   2: 2.735 ns/op
Iteration   3: 2.732 ns/op
Iteration   4: 2.788 ns/op
Iteration   5: 2.742 ns/op

# Run progress: 84.85% complete, ETA 00:08:21
# Fork: 2 of 3
# Warmup Iteration   1: 3.083 ns/op
# Warmup Iteration   2: 2.770 ns/op
# Warmup Iteration   3: 2.531 ns/op
# Warmup Iteration   4: 2.542 ns/op
# Warmup Iteration   5: 2.543 ns/op
Iteration   1: 2.553 ns/op
Iteration   2: 2.555 ns/op
Iteration   3: 2.560 ns/op
Iteration   4: 2.559 ns/op
Iteration   5: 2.562 ns/op

# Run progress: 87.88% complete, ETA 00:06:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.761 ns/op
# Warmup Iteration   2: 2.521 ns/op
# Warmup Iteration   3: 2.837 ns/op
# Warmup Iteration   4: 2.817 ns/op
# Warmup Iteration   5: 2.800 ns/op
Iteration   1: 2.793 ns/op
Iteration   2: 2.787 ns/op
Iteration   3: 2.789 ns/op
Iteration   4: 2.781 ns/op
Iteration   5: 2.782 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_6":
  2.697 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (2.553, 2.697, 2.793), stdev = 0.104
  CI (99.9%): [2.586, 2.809] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: /usr/lib/jvm/jdk-12/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_8
# Parameters: (value = 42)

# Run progress: 90.91% complete, ETA 00:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 3.021 ns/op
# Warmup Iteration   2: 2.564 ns/op
# Warmup Iteration   3: 2.554 ns/op
# Warmup Iteration   4: 2.544 ns/op
# Warmup Iteration   5: 2.542 ns/op
Iteration   1: 2.545 ns/op
Iteration   2: 2.544 ns/op
Iteration   3: 2.550 ns/op
Iteration   4: 2.552 ns/op
Iteration   5: 2.547 ns/op

# Run progress: 93.94% complete, ETA 00:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 3.127 ns/op
# Warmup Iteration   2: 2.827 ns/op
# Warmup Iteration   3: 2.852 ns/op
# Warmup Iteration   4: 2.869 ns/op
# Warmup Iteration   5: 2.629 ns/op
Iteration   1: 2.558 ns/op
Iteration   2: 2.588 ns/op
Iteration   3: 2.546 ns/op
Iteration   4: 2.553 ns/op
Iteration   5: 2.582 ns/op

# Run progress: 96.97% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: 3.058 ns/op
# Warmup Iteration   2: 2.804 ns/op
# Warmup Iteration   3: 2.775 ns/op
# Warmup Iteration   4: 2.751 ns/op
# Warmup Iteration   5: 2.789 ns/op
Iteration   1: 2.751 ns/op
Iteration   2: 2.740 ns/op
Iteration   3: 2.858 ns/op
Iteration   4: 2.881 ns/op
Iteration   5: 2.605 ns/op


Result "com.ionutbalosin.jvm.jit.benchmark.lambda.ChainingMethodRefUnboundedBenchmark.depth_8":
  2.627 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (2.544, 2.627, 2.881), stdev = 0.119
  CI (99.9%): [2.499, 2.754] (assumes normal distribution)


# Run complete. Total time: 00:55:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (value)  Mode  Cnt  Score   Error  Units
ChainingMethodRefUnboundedBenchmark.baseline       42  avgt   15  2.618 ± 0.128  ns/op
ChainingMethodRefUnboundedBenchmark.depth_1        42  avgt   15  2.744 ± 0.017  ns/op
ChainingMethodRefUnboundedBenchmark.depth_12       42  avgt   15  2.554 ± 0.085  ns/op
ChainingMethodRefUnboundedBenchmark.depth_16       42  avgt   15  2.598 ± 0.114  ns/op
ChainingMethodRefUnboundedBenchmark.depth_2        42  avgt   15  2.729 ± 0.101  ns/op
ChainingMethodRefUnboundedBenchmark.depth_24       42  avgt   15  2.662 ± 0.128  ns/op
ChainingMethodRefUnboundedBenchmark.depth_3        42  avgt   15  3.289 ± 1.197  ns/op
ChainingMethodRefUnboundedBenchmark.depth_4        42  avgt   15  2.613 ± 0.123  ns/op
ChainingMethodRefUnboundedBenchmark.depth_5        42  avgt   15  2.558 ± 0.123  ns/op
ChainingMethodRefUnboundedBenchmark.depth_6        42  avgt   15  2.697 ± 0.111  ns/op
ChainingMethodRefUnboundedBenchmark.depth_8        42  avgt   15  2.627 ± 0.127  ns/op

Benchmark result is saved to results/hotspotvm_graal_jit/ChainingMethodRefUnboundedBenchmark.json
Finished hotspotvm_graal_jit JMH Tests Suite!
